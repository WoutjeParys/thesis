GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameterz
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(T,H)                              Elasticity relative to hour one and hour two
 318  P_REF                                   reference price (calculated in advance)
 319  TOTDEM                                  The sum of the demand over all hours
 320  LIMIT                                   absolute value of price difference that is allowed
 321  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 322  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 323  LENGTH_P                                the length of the period as programmed in main and init (.py)
 324  ;
 325   
--- LOAD  G_DATA = 39:G_DATA
 326  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 327  $LOAD S_DATA
--- LOAD  RG = 41:RG
 328  $LOAD RG
--- LOAD  RSC = 42:RSC
 329  $LOAD RSC
--- LOAD  RSD = 43:RSD
 330  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 331  $LOAD DEM DEM_T
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  RES_T = 46:RES_T
 332  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 333  $LOAD REL_T
--- LOAD  W = 48:W
 334  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 335  $LOAD POL_TARGETS
 336  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 337  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 338  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 339  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 340  $LOAD ELAST
--- LOAD  SHIFTMIN = 54:SHIFTMIN
 341  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 55:SHIFTMAX
 342  $LOAD SHIFTMAX
 343   
 344  #C_GAS = 25.6643460843943;
 345  C_GAS = 25.6643460843943*2;
 346  T_MARKET = 1;
 347  EGCAPEX = 2000000000000000000000000;
 348  E_LP = 7100000;
 349  P_REF = 55.8;
 350  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 351  LIMIT = P_REF*0.7;
 352  LENGTH_P = card(T);
 353   
 354  VARIABLES
 355  obj                     Value of objective function
 356  ;
 357   
 358  POSITIVE VARIABLES
 359  #######################################################
 360   
 361  price_unit(P,T,Z)                               Price of the electricity
 362  demand_unit(P,T,Z)                              demand of the electricity
 363  demand_tot(P,Z)                                 total demand, based on demand_unit
 364  demand_ref(P,T,Z)                               the reference demand with flat price
 365  innerframe(P,H,Z)
 366  outerframe(P,H,Z)
 367   
 368  #######################################################
 369   
 370  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 371  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 372  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 373  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 374  eg_cap                                          Gas storage capacity
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 03/09/16 17:24:40 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 375   
 376  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 377  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 378   
 379  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 380  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 381  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 382  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 383  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 384  eg(Y,P,C)                                       Energy content of gas storage at period P
 385  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 386  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 387  pg_c(Y,P,T,C)                           Charging of gas storage
 388  pg_d(Y,P,T,C)                           Discharging of gas storage
 389   
 390  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 391  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 392   
 393  load_shedding(Y,P,T,Z)          Load shedding
 394  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 395  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 396  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 397   
 398  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 399  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 400  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 401   
 402  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 403  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 404  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 405  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 406  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 407   
 408  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 409  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 410  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 411  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 412   
 413  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 414   
 415  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 416  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 417  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 418  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 419  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 420  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 421  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 422  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 423   
 424  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 425  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 426  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 427  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 428  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 429   
 430  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 431  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 432  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 433  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 434   
 435  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 436  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 437  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 438  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 439  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 440   
 441  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 442  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 443  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 444  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 445   
 446  pg_import(Y,P,T,C)                      Import of gas
 447  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 448  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 449   
 450  ;
 451   
 452  EQUATIONS
 453  #--Objective function--#
 454  qobj
 455   
 456  #--System constraints--#
 457  qbalance(Y,P,T,Z)
 458  qresprod(Y,C)
 459  qco2lim(Y,C)
 460  qresendomin(Y,P,T,C,R,GRI)
 461  qresendomax(Y,P,T,C,R,GRI)
 462  qres(Y,P,T,C,R)
 463  qgendisp(Y,P,T,C)
 464  qgendisppeak(Y,C)
 465  qco2(Y,C,G)
 466  qlcg(Y,C,G)
 467   
 468  #--Generation technologies--#
 469  qpotcapmin(Y,C,G)
 470  #qpotcapmax(Y,C,G)
 471  #qpotgenmin(Y,C,G)
 472  #qpotgenmax(Y,C,G)
 473   
 474  qresgcu(Y,P,T,Z,RU,GD)
 475  qresgcd(Y,P,T,Z,RD,GD)
 476  qn(Y,P,T,Z,GD)
 477  qnmax(Y,P,T,Z,GD)
 478  qnsu(Y,P,T,Z,GD)
 479  qnsd(Y,P,T,Z,GD)
 480  qgen(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 481  qgenmin(Y,P,T,Z,GD)
 482  qgenmax(Y,P,T,Z,GD)
 483  qrudyn(Y,P,T,Z,GD)
 484  qrucap(Y,P,T,Z,GD)
 485  qrddyn(Y,P,T,Z,GD)
 486  qrdcap(Y,P,T,Z,GD)
 487  qsumin(Y,P,T,Z,GD)
 488  qsumax(Y,P,T,Z,GD)
 489  qsdmin(Y,P,T,Z,GD)
 490  qsdmax(Y,P,T,Z,GD)
 491  qrufu(Y,P,T,Z,GD)
 492  qruau(Y,P,T,Z,GD)
 493  qrumus(Y,P,T,Z,GD)
 494  qrdad(Y,P,T,Z,GD)
 495  qrdmd(Y,P,T,Z,GD)
 496  qrunsmin(Y,P,T,Z,RU,GD)
 497  qrunsmax(Y,P,T,Z,RU,GD)
 498  qrdsdmin(Y,P,T,Z,RD,GD)
 499  qrdsdmax(Y,P,T,Z,RD,GD)
 500   
 501  qresgru(Y,P,T,Z,RU,GRI)
 502  qgenr(Y,P,T,Z,GRI)
 503  qresgrdr(Y,P,T,Z,GRI)
 504  qresgrdg(Y,P,T,Z,GRI)
 505   
 506  #--Storage technologies--#
 507  qress(Y,P,T,Z,R,S)
 508  qspotcapmin(Y,C,S)
 509  qspotcapmax(Y,C,S)
 510   
 511  qe(Y,P,Z,S)
 512  qemax(Y,P,Z,S)
 513  qef(Y,P,T,Z,S)
 514  qefmin(Y,P,T,Z,S)
 515  qefmax(Y,P,T,Z,S)
 516  qefstart(Y,P,T,Z,S)
 517  qel(Y,P,T,Z,S)
 518  qelmin(Y,P,T,Z,S)
 519  qelmax(Y,P,T,Z,S)
 520  qelstart(Y,P,T,Z,S)
 521  qdurmin(Y,Z,S)
 522  qdurmax(Y,Z,S)
 523   
 524  qssc(Y,P,T,Z,SS)
 525  qsscru(Y,P,T,Z,SS)
 526  qsscrd(Y,P,T,Z,SS)
 527  qssd(Y,P,T,Z,SS)
 528  qssdru(Y,P,T,Z,SS)
 529  qssdrd(Y,P,T,Z,SS)
 530   
 531  qresscu(Y,P,T,Z,RU,SML)
 532  qresscd(Y,P,T,Z,RD,SML)
 533  qressdu(Y,P,T,Z,RU,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 534  qressdd(Y,P,T,Z,RD,SM)
 535  qnc(Y,P,T,Z,SML)
 536  qncmax(Y,P,T,Z,SML)
 537  qncsu(Y,P,T,Z,SML)
 538  qncsd(Y,P,T,Z,SML)
 539  qsmlc(Y,P,T,Z,SML)
 540  qsmlcmin(Y,P,T,Z,SML)
 541  qsmlcmax(Y,P,T,Z,SML)
 542  qcrudyn(Y,P,T,Z,SML)
 543  qcrucap(Y,P,T,Z,SML)
 544  qcrddyn(Y,P,T,Z,SML)
 545  qcrdcap(Y,P,T,Z,SML)
 546  qcsumin(Y,P,T,Z,SML)
 547  qcsumax(Y,P,T,Z,SML)
 548  qcsdmin(Y,P,T,Z,SML)
 549  qcsdmax(Y,P,T,Z,SML)
 550  qcruad(Y,P,T,Z,SML)
 551  qcrumd(Y,P,T,Z,SML)
 552  qcrdfu(Y,P,T,Z,SML)
 553  qcrdau(Y,P,T,Z,SML)
 554  qcrdmus(Y,P,T,Z,SML)
 555  qcrunsmin(Y,P,T,Z,RD,SML)
 556  qcrunsmax(Y,P,T,Z,RD,SML)
 557  qcrdsdmin(Y,P,T,Z,RU,SML)
 558  qcrdsdmax(Y,P,T,Z,RU,SML)
 559   
 560  qcapdeqcapc(Y,Z,SM)
 561  qnd(Y,P,T,Z,SM)
 562  qndmax(Y,P,T,Z,SM)
 563  qndsu(Y,P,T,Z,SM)
 564  qndsd(Y,P,T,Z,SM)
 565  qsmd(Y,P,T,Z,SM)
 566  qsmdmin(Y,P,T,Z,SM)
 567  qsmdmax(Y,P,T,Z,SM)
 568  qdrudyn(Y,P,T,Z,SM)
 569  qdrucap(Y,P,T,Z,SM)
 570  qdrddyn(Y,P,T,Z,SM)
 571  qdrdcap(Y,P,T,Z,SM)
 572  qdsumin(Y,P,T,Z,SM)
 573  qdsumax(Y,P,T,Z,SM)
 574  qdsdmin(Y,P,T,Z,SM)
 575  qdsdmax(Y,P,T,Z,SM)
 576  qdrufu(Y,P,T,Z,SM)
 577  qdruau(Y,P,T,Z,SM)
 578  qdrumus(Y,P,T,Z,SM)
 579  qdrdad(Y,P,T,Z,SM)
 580  qdrdmd(Y,P,T,Z,SM)
 581  qdrunsmin(Y,P,T,Z,RU,SM)
 582  qdrunsmax(Y,P,T,Z,RU,SM)
 583  qdrdsdmin(Y,P,T,Z,RD,SM)
 584  qdrdsdmax(Y,P,T,Z,RD,SM)
 585   
 586  qslressd(Y,P,T,Z,R,SL)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 587  qgase(Y,P,C)
 588  qgasemax(Y,P,C)
 589  qgasef(Y,P,T,C)
 590  qgasefmax(Y,P,T,C)
 591  qgasefstart(Y,P,T,C)
 592  qgasel(Y,P,T,C)
 593  qgaselmax(Y,P,T,C)
 594  qgaselstart(Y,P,T,C)
 595  qgasc(Y,P,T,C)
 596  qgasd(Y,P,T,C)
 597  qgasuse(Y,C)
 598  qgasusegen(Y,P,T,Z,GCG)
 599   
 600  ###############################
 601  price(P,T,Z)
 602  demand(P,T,Z)
 603  totdemand(P,Z)
 604  totdemand2(P,Z)
 605  refdemand(P,T,Z)
 606  refdemand2(Z)
 607  priceconstraint1(P,T,Z)
 608  priceconstraint2(P,T,Z)
 609  shiftconstraint(P,H,Z)
 610  qinnerframe(P,H,Z)
 611  qouterframe(P,H,Z)
 612  ;
 613   
 614  #-----######################---------------------------------------------------#
 615  #-----# Objective function #---------------------------------------------------#
 616  #-----######################---------------------------------------------------#
 617  qobj..              obj
 618  #                                       =e=
 619  #                                               sum((P,T,Z),price_unit(P,T,Z)*demand_unit(P,T,Z))
 620  #                                               -
 621  #                                               sum((Y,Z,G),                    (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 622  #                                               -
 623  #                                               (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 624  #                                               + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 625  #                                               )*((8760/card(T))*((365/7)/sum(P, W(P))));
 626  #                                               ;
 627                                          =e=
 628                                                  sum((Y,Z,G),                    (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 629                                                  #+ sum((Y,Z,SSM),               (S_DATA(SSM,'C_E_INV')*1000)*e_cap(Y,Z,SSM))
 630                                                  ######+ sum((Y,Z,S),                    (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 631                                                  #+ sum((Y,Z,SM),                (S_DATA(SM,'C_P_D_INV')*1000)*p_cap_d(Y,Z,SM))
 632                                                  #+                                              (EGCAPEX*1000)*eg_cap
 633                                                  +(sum((Y,P,T,Z,G),              W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 634                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 635                                                  #+ sum((Y,P,T,Z,GRD),   W(P)*(G_DATA(GRD,'C_FUEL'))*gen(Y,P,T,Z,GRD))
 636                                                  #+ sum((Y,P,T,C),               W(P)*(C_GAS)*pg_import(Y,P,T,C))
 637                                                  #+ sum((Y,P,T,Z,GD),    W(P)*(G_DATA(GD,'RC'))*(ramp_up(Y,P,T,Z,GD)+ramp_dn(Y,P,T,Z,GD)))
 638                                                  #+ sum((Y,P,T,Z,GD),    W(P)*(G_DATA(GD,'SUC'))*ramp_su(Y,P,T,Z,GD))
 639                                                  ######+ sum((Y,P,T,Z,GRI),      W(P)*(0)*curt(Y,P,T,Z,GRI) + W(P)*(1000000)*curt_dummy(Y,P,T,Z,GRI))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 640                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 641                                                  ######+ sum((Y,P,T,Z),          W(P)*(10000)*load_shedding(Y,P,T,Z))
 642   
 643                                                  )*((8760/card(T))*((365/7)/sum(P, W(P))));
 644   
 645                                                  #+ sum((Y,Z,G), co2(Y,Z,G)*15)
 646                                                  ;
 647   
 648   
 649   
 650   
 651  #-----######################---------------------------------------------------#
 652  #-----# System constraints #---------------------------------------------------#
 653  #-----######################---------------------------------------------------#
 654   
 655  #--System balance--#
 656   
 657  # balance with demand response
 658  qbalance(Y,P,T,Z)..
 659                                  sum(G, gen(Y,P,T,Z,G))
 660  #                               + sum(SSM, p_d(Y,P,T,Z,SSM))
 661                                          =e=
 662                                                  demand_unit(P,T,Z)
 663  #                                               - load_shedding(Y,P,T,Z)
 664  #                                               + sum(S, p_c(Y,P,T,Z,S))
 665                                                  ;
 666   
 667  #balance without demand response
 668  #qbalance(Y,P,T,Z)..
 669  #                               sum(G, gen(Y,P,T,Z,G))
 670  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 671  #                                       =e=
 672  #                                               DEM_T(P,T,Z)
 673  #                                       #       - load_shedding(Y,P,T,Z)
 674  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 675  #                                               ;
 676  #DEM(Y,Z)*DEM_T(T,Z);
 677   
 678  #--Renewable target--#
 679   
 680  #qresprod(Y,C)..
 681  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 682  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 683  #                                       =l=
 684  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 685  #                                               ;
 686   
 687  qresprod(Y,C)..
 688                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 689                                          =g=
 690                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 691                                                  ;
 692   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 693  qco2lim(Y,C)..
 694  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 695  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 696                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 697                                          =l=
 698                                                  50000000*0.4
 699                                                  ;
 700   
 701  #--Reserve requirements--#
 702   
 703  qresendomin(Y,P,T,C,R,GRI)..
 704                                          q_endo(Y,P,T,C,R,GRI)
 705                                          =g=
 706                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 707                                                  ;
 708   
 709  qresendomax(Y,P,T,C,R,GRI)..
 710                                          q_endo(Y,P,T,C,R,GRI)
 711                                          =l=
 712                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 713                                                  ;
 714   
 715   
 716  qres(Y,P,T,C,R)..
 717                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 718                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 719                                          =e=
 720                                                  R_EXO(C,R)
 721                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 722                                                  ;
 723   
 724  #--Dispatchable capacity--#
 725   
 726  qgendisp(Y,P,T,C)..
 727                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 728                                          =g=
 729                                                  sum(Z $ C_Z(C,Z), DEM_T(P,T,Z))*0.20
 730                                                  ;
 731   
 732  qgendisppeak(Y,C)..
 733                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 734                                          =g=
 735                                                  10000*1.20
 736                                                  ;
 737   
 738  #--Emissions--#
 739   
 740  qco2(Y,C,G)..
 741                                          co2(Y,C,G)
 742                                          =e=
 743                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 744                                                  ;
 745   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 746  qlcg(Y,C,G)..
 747                                          lcg(Y,C,G)
 748                                          =e=
 749                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 750                                                  ;
 751   
 752   
 753  #-----###########################----------------------------------------------#
 754  #-----# Generation technologies #----------------------------------------------#
 755  #-----###########################----------------------------------------------#
 756   
 757  ##--Installed generation capacities--#
 758   
 759  qpotcapmin(Y,C,G)..
 760                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 761                                          =g=
 762                                                  G_DATA(G,'CAP_MIN')
 763                                                  ;
 764   
 765  #qpotcapmax(Y,C,G)..
 766  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 767  #                                       =g=
 768  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 769  #                                               ;
 770  #
 771  #qpotgenmin(Y,C,G)..
 772  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 773  #                                       =g=
 774  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 775  #                                               ;
 776  #
 777  #qpotgenmax(Y,Z,G)..
 778  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 779  #                                       =g=
 780  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 781  #                                               ;
 782   
 783  #-------Dispatchable generation technologies-----------------------------------#
 784   
 785  #--Reserve allocation--#
 786   
 787  qresgcu(Y,P,T,Z,RU,GD)..
 788                                          res_g(Y,P,T,Z,RU,GD)
 789                                          =e=
 790                                                  res_g_s(Y,P,T,Z,RU,GD)
 791                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 792                                                  ;
 793   
 794  qresgcd(Y,P,T,Z,RD,GD)..
 795                                          res_g(Y,P,T,Z,RD,GD)
 796                                          =e=
 797                                                  res_g_s(Y,P,T,Z,RD,GD)
 798                                                  + res_g_sd(Y,P,T,Z,RD,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 799                                                  ;
 800   
 801  #--Clustering logical constraints--#
 802   
 803  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 804                                          n(Y,P,T+1,Z,GD)
 805                                          =e=
 806                                                  n(Y,P,T,Z,GD)
 807                                                  + n_su(Y,P,T,Z,GD)
 808                                                  - n_sd(Y,P,T,Z,GD)
 809                                                  ;
 810   
 811  qnmax(Y,P,T,Z,GD)..
 812                                          n(Y,P,T,Z,GD)
 813                                          =l=
 814                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 815                                                  ;
 816   
 817  qnsu(Y,P,T,Z,GD)..
 818                                          n_su(Y,P,T,Z,GD)
 819                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 820                                          =l=
 821                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 822                                                  - n(Y,P,T,Z,GD)
 823                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 824                                                  ;
 825   
 826  qnsd(Y,P,T,Z,GD)..
 827                                          n_sd(Y,P,T,Z,GD)
 828                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 829                                          =l=
 830                                                  n(Y,P,T,Z,GD)
 831                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 832                                                  ;
 833   
 834  #--Generation constraints--#
 835   
 836  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 837                      gen(Y,P,T+1,Z,GD)
 838                      =e=
 839                          gen(Y,P,T,Z,GD)
 840                          + ramp_up(Y,P,T,Z,GD)
 841                          - ramp_dn(Y,P,T,Z,GD)
 842                          + ramp_su(Y,P,T,Z,GD)
 843                          - ramp_sd(Y,P,T,Z,GD)
 844                          ;
 845   
 846  qgenmin(Y,P,T,Z,GD)..
 847                                          gen(Y,P,T,Z,GD)
 848                                          =g=
 849                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 850                                                  ;
 851   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 852  qgenmax(Y,P,T,Z,GD)..
 853                                          gen(Y,P,T,Z,GD)
 854                                          =l=
 855                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 856                                                  ;
 857                                                  #*G_DATA(G,'PM')/100;
 858   
 859  #--Ramping constraints--#
 860   
 861  qrudyn(Y,P,T,Z,GD)..
 862                      ramp_up(Y,P,T,Z,GD)
 863                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 864                      =l=
 865                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 866                          ;
 867   
 868  qrucap(Y,P,T,Z,GD)..
 869                      ramp_up(Y,P,T,Z,GD)
 870                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 871                      =l=
 872                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
 873                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
 874                          ;
 875   
 876  qrddyn(Y,P,T,Z,GD)..
 877                      ramp_dn(Y,P,T,Z,GD)
 878                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 879                      =l=
 880                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 881                          ;
 882   
 883  qrdcap(Y,P,T,Z,GD)..
 884                      ramp_dn(Y,P,T,Z,GD)
 885                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 886                      =l=
 887                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
 888                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
 889                          ;
 890   
 891  qsumin(Y,P,T,Z,GD)..
 892                                          ramp_su(Y,P,T,Z,GD)
 893                                          =g=
 894                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 895                                                  ;
 896   
 897  qsumax(Y,P,T,Z,GD)..
 898                                          ramp_su(Y,P,T,Z,GD)
 899                                          =l=
 900                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 901                                                  ;
 902   
 903  qsdmin(Y,P,T,Z,GD)..
 904                                          ramp_sd(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 905                                          =g=
 906                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 907                                                  ;
 908   
 909  qsdmax(Y,P,T,Z,GD)..
 910                                          ramp_sd(Y,P,T,Z,GD)
 911                                          =l=
 912                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 913                                                  ;
 914   
 915  #--Reserve allocation constraints--#
 916   
 917  qrufu(Y,P,T,Z,GD)..
 918                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
 919                      =l=
 920                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
 921                          ;
 922   
 923  qruau(Y,P,T,Z,GD)..
 924                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
 925                      =l=
 926                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 927                          ;
 928   
 929  qrumus(Y,P,T,Z,GD)..
 930                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 931                      =l=
 932                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 933                          ;
 934   
 935  qrdad(Y,P,T,Z,GD)..
 936                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
 937                      =l=
 938                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 939                          ;
 940   
 941  qrdmd(Y,P,T,Z,GD)..
 942                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 943                      =l=
 944                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 945                          ;
 946   
 947  qrunsmin(Y,P,T,Z,RU,GD)..
 948                                          res_g_ns(Y,P,T,Z,RU,GD)
 949                                          =g=
 950                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
 951                                                  ;
 952   
 953  qrunsmax(Y,P,T,Z,RU,GD)..
 954                                          res_g_ns(Y,P,T,Z,RU,GD)
 955                                          =l=
 956                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
 957                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 958   
 959  qrdsdmin(Y,P,T,Z,RD,GD)..
 960                                          res_g_sd(Y,P,T,Z,RD,GD)
 961                                          =g=
 962                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
 963                                                  ;
 964   
 965  qrdsdmax(Y,P,T,Z,RD,GD)..
 966                                          res_g_sd(Y,P,T,Z,RD,GD)
 967                                          =l=
 968                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
 969                                                  ;
 970   
 971  #-------Intermittent renewable generation technologies-------------------------#
 972   
 973  #--Reserve allocation--#
 974   
 975  qresgru(Y,P,T,Z,RU,GRI)..
 976                                          res_g(Y,P,T,Z,RU,GRI)
 977                                          =e=
 978                                                  0
 979                                                  ;
 980   
 981  #--Output and curtailment constraint--#
 982   
 983  qgenr(Y,P,T,Z,GRI)..
 984                      gen(Y,P,T,Z,GRI)
 985                      + curt(Y,P,T,Z,GRI)
 986                      + curt_dummy(Y,P,T,Z,GRI)
 987                      =e=
 988                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
 989                          ;
 990   
 991  #--Reserve allocation constraints--#
 992   
 993  qresgrdr(Y,P,T,Z,GRI)..
 994                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
 995                                          =l=
 996                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
 997                                                  ;
 998   
 999  qresgrdg(Y,P,T,Z,GRI)..
1000                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1001                                          =l=
1002                                                  gen(Y,P,T,Z,GRI)
1003                                                  ;
1004   
1005  #-----########################-------------------------------------------------#
1006  #-----# Storage technologies #-------------------------------------------------#
1007  #-----########################-------------------------------------------------#
1008   
1009  #-------General constraints----------------------------------------------------#
1010   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1011  #--Reserve allocation--#
1012   
1013  qress(Y,P,T,Z,R,S)..
1014                                          res_s(Y,P,T,Z,R,S)
1015                                          =e=
1016                                                  res_s_c(Y,P,T,Z,R,S)
1017                                                  + res_s_d(Y,P,T,Z,R,S)
1018                                                  ;
1019   
1020  #--Installed capacities--#
1021   
1022  qspotcapmin(Y,C,S)..
1023                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1024                                          =g=
1025                                                  S_DATA(S,'CAP_MIN')
1026                                                  ;
1027   
1028  qspotcapmax(Y,C,S)..
1029                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1030                                          =l=
1031                                                  S_DATA(S,'CAP_MAX')
1032                                                  ;
1033   
1034  #-------Short- and mid-term storage--------------------------------------------#
1035   
1036  #--Energy constraints--#
1037   
1038  qe(Y,P,Z,SSM)..
1039                                          e(Y,P++1,Z,SSM)
1040                                          =e=
1041                                                  e(Y,P,Z,SSM)
1042                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1043                                                  ;
1044   
1045  qemax(Y,P,Z,SSM)..
1046                                          e(Y,P,Z,SSM)
1047                                          =l=
1048                                                  e_cap(Y,Z,SSM)
1049                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1050                                                  ;
1051   
1052  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1053                                          e_f(Y,P,T,Z,SSM)
1054                                          =e=
1055                                                  e(Y,P,Z,SSM)
1056                                                  ;
1057   
1058  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1059                                          e_f(Y,P,T+1,Z,SSM)
1060                                          =e=
1061                                                  e_f(Y,P,T,Z,SSM)
1062                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1063                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1064                                                  ;
1065   
1066  qefmin(Y,P,T,Z,SSM)..
1067                                          e_f(Y,P,T,Z,SSM)
1068                                          =g=
1069                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1070                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1071                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1072                                                  ;
1073  qefmax(Y,P,T,Z,SSM)..
1074                                          e_f(Y,P,T,Z,SSM)
1075                                          =l=
1076                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1077                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1078                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1079                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1080                                                  ;
1081   
1082  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1083                                          e_l(Y,P,T,Z,SSM)
1084                                          =e=
1085                                                  e(Y,P,Z,SSM)
1086                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1087                                                  ;
1088   
1089  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1090                                          e_l(Y,P,T+1,Z,SSM)
1091                                          =e=
1092                                                  e_l(Y,P,T,Z,SSM)
1093                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1094                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1095                                                  ;
1096   
1097  qelmin(Y,P,T,Z,SSM)..
1098                                          e_l(Y,P,T,Z,SSM)
1099                                          =g=
1100                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1101                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1102                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1103                                                  ;
1104  qelmax(Y,P,T,Z,SSM)..
1105                                          e_l(Y,P,T,Z,SSM)
1106                                          =l=
1107                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1108                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1109                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1110                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1111                                                  ;
1112   
1113  #--Duration limits--#
1114   
1115  qdurmin(Y,Z,SSM)..
1116                                          e_cap(Y,Z,SSM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1117                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1118                                          =g=
1119                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1120                                                  ;
1121   
1122  qdurmax(Y,Z,SSM)..
1123                                          e_cap(Y,Z,SSM)
1124                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1125                                          =l=
1126                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1127                                                  ;
1128   
1129  #-------Short-term storage-----------------------------------------------------#
1130   
1131  #--Charging constraints--#
1132   
1133  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1134                                          p_c(Y,P,T+1,Z,SS)
1135                                          =e=
1136                                                  p_c(Y,P,T,Z,SS)
1137                                                  + ramp_c_up(Y,P,T,Z,SS)
1138                          - ramp_c_dn(Y,P,T,Z,SS)
1139                          ;
1140   
1141  qsscru(Y,P,T,Z,SS)..
1142                      ramp_c_up(Y,P,T,Z,SS)
1143                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1144                      =l=
1145                          p_cap_c(Y,Z,SS)
1146                          - p_c(Y,P,T,Z,SS)
1147                          ;
1148   
1149  qsscrd(Y,P,T,Z,SS)..
1150                      ramp_c_dn(Y,P,T,Z,SS)
1151                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1152                      =l=
1153                          p_c(Y,P,T,Z,SS)
1154                          ;
1155   
1156  #--Discharging constraints--#
1157   
1158  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1159                          p_d(Y,P,T+1,Z,SS)
1160                          =e=
1161                                  p_d(Y,P,T,Z,SS)
1162                                  + ramp_d_up(Y,P,T,Z,SS)
1163                          - ramp_d_dn(Y,P,T,Z,SS)
1164                          ;
1165   
1166  qssdru(Y,P,T,Z,SS)..
1167                      ramp_d_up(Y,P,T,Z,SS)
1168                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1169                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1170                          p_cap_c(Y,Z,SS)
1171                          - p_d(Y,P,T,Z,SS)
1172                          ;
1173   
1174  qssdrd(Y,P,T,Z,SS)..
1175                      ramp_d_dn(Y,P,T,Z,SS)
1176                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1177                      =l=
1178                          p_d(Y,P,T,Z,SS)
1179                          ;
1180   
1181  #-------Mid and long-term storage----------------------------------------------#
1182   
1183  #--Reserve allocation--#
1184   
1185  qresscu(Y,P,T,Z,RU,SML)..
1186                                          res_s_c(Y,P,T,Z,RU,SML)
1187                                          =e=
1188                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1189                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1190                                                  ;
1191   
1192  qresscd(Y,P,T,Z,RD,SML)..
1193                                          res_s_c(Y,P,T,Z,RD,SML)
1194                                          =e=
1195                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1196                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1197                                                  ;
1198   
1199  qressdu(Y,P,T,Z,RU,SM)..
1200                                          res_s_d(Y,P,T,Z,RU,SM)
1201                                          =e=
1202                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1203                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1204                                                  ;
1205   
1206  qressdd(Y,P,T,Z,RD,SM)..
1207                                          res_s_d(Y,P,T,Z,RD,SM)
1208                                          =e=
1209                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1210                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1211                                                  ;
1212   
1213  #--Charging logical constraints--#
1214   
1215  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1216                                          n_c(Y,P,T+1,Z,SML)
1217                                          =e=
1218                                                  n_c(Y,P,T,Z,SML)
1219                                                  + n_c_su(Y,P,T,Z,SML)
1220                                                  - n_c_sd(Y,P,T,Z,SML)
1221                                                  ;
1222   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1223  qncmax(Y,P,T,Z,SML)..
1224                                          n_c(Y,P,T,Z,SML)
1225                                          =l=
1226                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1227                                                  ;
1228   
1229  qncsu(Y,P,T,Z,SML)..
1230                                          n_c_su(Y,P,T,Z,SML)
1231                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1232                                          =l=
1233                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1234                                                  - n_c(Y,P,T,Z,SML)
1235                                                  ;
1236   
1237  qncsd(Y,P,T,Z,SML)..
1238                                          n_c_sd(Y,P,T,Z,SML)
1239                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1240                                          =l=
1241                                                  n_c(Y,P,T,Z,SML)
1242                                                  ;
1243   
1244  #--Charging constraints--#
1245   
1246  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1247                      p_c(Y,P,T+1,Z,SML)
1248                      =e=
1249                          p_c(Y,P,T,Z,SML)
1250                          + ramp_c_up(Y,P,T,Z,SML)
1251                          - ramp_c_dn(Y,P,T,Z,SML)
1252                          + ramp_c_su(Y,P,T,Z,SML)
1253                          - ramp_c_sd(Y,P,T,Z,SML)
1254                          ;
1255   
1256  qsmlcmin(Y,P,T,Z,SML)..
1257                                          p_c(Y,P,T,Z,SML)
1258                                          =g=
1259                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1260                                                  ;
1261   
1262  qsmlcmax(Y,P,T,Z,SML)..
1263                                          p_c(Y,P,T,Z,SML)
1264                                          =l=
1265                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1266                                                  ;
1267   
1268  #--Charging ramping constraints--#
1269   
1270  qcrudyn(Y,P,T,Z,SML)..
1271                      ramp_c_up(Y,P,T,Z,SML)
1272                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1273                      =l=
1274                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1275                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1276   
1277  qcrucap(Y,P,T,Z,SML)..
1278                      ramp_c_up(Y,P,T,Z,SML)
1279                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1280                      =l=
1281                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1282                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1283                          ;
1284   
1285  qcrddyn(Y,P,T,Z,SML)..
1286                      ramp_c_dn(Y,P,T,Z,SML)
1287                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1288                      =l=
1289                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1290                          ;
1291   
1292  qcrdcap(Y,P,T,Z,SML)..
1293                      ramp_c_dn(Y,P,T,Z,SML)
1294                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1295                      =l=
1296                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1297                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1298                          ;
1299   
1300  qcsumin(Y,P,T,Z,SML)..
1301                                          ramp_c_su(Y,P,T,Z,SML)
1302                                          =g=
1303                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1304                                                  ;
1305   
1306  qcsumax(Y,P,T,Z,SML)..
1307                                          ramp_c_su(Y,P,T,Z,SML)
1308                                          =l=
1309                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1310                                                  ;
1311   
1312  qcsdmin(Y,P,T,Z,SML)..
1313                                          ramp_c_sd(Y,P,T,Z,SML)
1314                                          =g=
1315                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1316                                                  ;
1317   
1318  qcsdmax(Y,P,T,Z,SML)..
1319                                          ramp_c_sd(Y,P,T,Z,SML)
1320                                          =l=
1321                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1322                                                  ;
1323   
1324  #--Reserve allocation constraints--#
1325   
1326  qcruad(Y,P,T,Z,SML)..
1327                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1328                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1329                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1330                          ;
1331   
1332  qcrumd(Y,P,T,Z,SML)..
1333                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1334                      =l=
1335                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1336                          ;
1337   
1338  qcrdfu(Y,P,T,Z,SML)..
1339                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1340                      =l=
1341                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1342                          ;
1343   
1344  qcrdau(Y,P,T,Z,SML)..
1345                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1346                      =l=
1347                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1348                          ;
1349   
1350  qcrdmus(Y,P,T,Z,SML)..
1351                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1352                      =l=
1353                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1354                          ;
1355   
1356  qcrunsmin(Y,P,T,Z,RD,SML)..
1357                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1358                                          =g=
1359                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1360                                                  ;
1361   
1362  qcrunsmax(Y,P,T,Z,RD,SML)..
1363                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1364                                          =l=
1365                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1366                                                  ;
1367   
1368  qcrdsdmin(Y,P,T,Z,RU,SML)..
1369                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1370                                          =g=
1371                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1372                                                  ;
1373   
1374  qcrdsdmax(Y,P,T,Z,RU,SML)..
1375                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1376                                          =l=
1377                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1378                                                  ;
1379   
1380  #-------Mid-term storage-------------------------------------------------------#
1381   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1382  qcapdeqcapc(Y,Z,SM)..
1383                                          p_cap_d(Y,Z,SM)
1384                                          =e=
1385                                                  p_cap_c(Y,Z,SM)
1386                                                  ;
1387   
1388  #--Discharging logical constraints--#
1389   
1390  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1391                                          n_d(Y,P,T+1,Z,SM)
1392                                          =e=
1393                                                  n_d(Y,P,T,Z,SM)
1394                                                  + n_d_su(Y,P,T,Z,SM)
1395                                                  - n_d_sd(Y,P,T,Z,SM)
1396                                                  ;
1397   
1398  qndmax(Y,P,T,Z,SM)..
1399                                          n_d(Y,P,T,Z,SM)
1400                                          =l=
1401                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1402                                                  ;
1403   
1404  qndsu(Y,P,T,Z,SM)..
1405                                          n_d_su(Y,P,T,Z,SM)
1406                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1407                                          =l=
1408                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1409                                                  - n_d(Y,P,T,Z,SM)
1410                                                  ;
1411   
1412  qndsd(Y,P,T,Z,SM)..
1413                                          n_d_sd(Y,P,T,Z,SM)
1414                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1415                                          =l=
1416                                                  n_d(Y,P,T,Z,SM)
1417                                                  ;
1418   
1419  #--Discharging constraints--#
1420   
1421  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1422                      p_d(Y,P,T+1,Z,SM)
1423                      =e=
1424                          p_d(Y,P,T,Z,SM)
1425                          + ramp_d_up(Y,P,T,Z,SM)
1426                          - ramp_d_dn(Y,P,T,Z,SM)
1427                          + ramp_d_su(Y,P,T,Z,SM)
1428                          - ramp_d_sd(Y,P,T,Z,SM)
1429                          ;
1430   
1431  qsmdmin(Y,P,T,Z,SM)..
1432                                          p_d(Y,P,T,Z,SM)
1433                                          =g=
1434                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1435                                                  ;
1436   
1437  qsmdmax(Y,P,T,Z,SM)..
1438                                          p_d(Y,P,T,Z,SM)
1439                                          =l=
1440                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1441                                                  ;
1442   
1443  #--Discharging ramping constraints--#
1444   
1445  qdrudyn(Y,P,T,Z,SM)..
1446                      ramp_d_up(Y,P,T,Z,SM)
1447                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1448                      =l=
1449                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1450                          ;
1451   
1452  qdrucap(Y,P,T,Z,SM)..
1453                      ramp_d_up(Y,P,T,Z,SM)
1454                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1455                      =l=
1456                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1457                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1458                          ;
1459   
1460  qdrddyn(Y,P,T,Z,SM)..
1461                      ramp_d_dn(Y,P,T,Z,SM)
1462                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1463                      =l=
1464                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1465                          ;
1466   
1467  qdrdcap(Y,P,T,Z,SM)..
1468                      ramp_d_dn(Y,P,T,Z,SM)
1469                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1470                      =l=
1471                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1472                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1473                          ;
1474   
1475  qdsumin(Y,P,T,Z,SM)..
1476                                          ramp_d_su(Y,P,T,Z,SM)
1477                                          =g=
1478                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1479                                                  ;
1480   
1481  qdsumax(Y,P,T,Z,SM)..
1482                                          ramp_d_su(Y,P,T,Z,SM)
1483                                          =l=
1484                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1485                                                  ;
1486   
1487  qdsdmin(Y,P,T,Z,SM)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1488                                          ramp_d_sd(Y,P,T,Z,SM)
1489                                          =g=
1490                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1491                                                  ;
1492   
1493  qdsdmax(Y,P,T,Z,SM)..
1494                                          ramp_d_sd(Y,P,T,Z,SM)
1495                                          =l=
1496                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1497                                                  ;
1498   
1499  #--Reserve allocation constraints--#
1500   
1501  qdrufu(Y,P,T,Z,SM)..
1502                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1503                      =l=
1504                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1505                          ;
1506   
1507  qdruau(Y,P,T,Z,SM)..
1508                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1509                      =l=
1510                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1511                          ;
1512   
1513  qdrumus(Y,P,T,Z,SM)..
1514                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1515                      =l=
1516                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1517                          ;
1518   
1519  qdrdad(Y,P,T,Z,SM)..
1520                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1521                      =l=
1522                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1523                          ;
1524   
1525  qdrdmd(Y,P,T,Z,SM)..
1526                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1527                      =l=
1528                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1529                          ;
1530   
1531  qdrunsmin(Y,P,T,Z,RU,SM)..
1532                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1533                                          =g=
1534                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1535                                                  ;
1536   
1537  qdrunsmax(Y,P,T,Z,RU,SM)..
1538                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1539                                          =l=
1540                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1541                                                  ;
1542   
1543  qdrdsdmin(Y,P,T,Z,RD,SM)..
1544                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1545                                          =g=
1546                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1547                                                  ;
1548   
1549  qdrdsdmax(Y,P,T,Z,RD,SM)..
1550                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1551                                          =l=
1552                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1553                                                  ;
1554   
1555  #-------Long-term storage------------------------------------------------------#
1556   
1557  #--Discharging reserve allocation--#
1558   
1559  qslressd(Y,P,T,Z,R,SL)..
1560                                          res_s_d(Y,P,T,Z,R,SL)
1561                                          =e=
1562                                                  0
1563                                                  ;
1564   
1565  #--Gas energy balance--#
1566   
1567  qgase(Y,P,C)..
1568                                          eg(Y,P++1,C)
1569                                          =e=
1570                                                  eg(Y,P,C)
1571                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1572                                                  ;
1573   
1574  qgasemax(Y,P,C)..
1575                                          eg(Y,P,C)
1576                                          =l=
1577                                                  E_LP
1578                                                  + eg_cap
1579                                                  ;
1580   
1581  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1582                                          eg_f(Y,P,T+1,C)
1583                                          =e=
1584                                                  eg_f(Y,P,T,C)
1585                                                  + pg_c(Y,P,T,C)
1586                                                  - pg_d(Y,P,T,C)
1587                                                  ;
1588   
1589  qgasefmax(Y,P,T,C)..
1590                                          eg_f(Y,P,T,C)
1591                                          =l=
1592                                                  E_LP
1593                                                  + eg_cap
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1594                                                  ;
1595   
1596  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1597                                          eg_f(Y,P,T,C)
1598                                          =e=
1599                                                  eg(Y,P,C)
1600                                                  ;
1601   
1602  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1603                                          eg_l(Y,P,T+1,C)
1604                                          =e=
1605                                                  eg_l(Y,P,T,C)
1606                                                  + pg_c(Y,P,T,C)
1607                                                  - pg_d(Y,P,T,C)
1608                                                  ;
1609   
1610  qgaselmax(Y,P,T,C)..
1611                                          eg_l(Y,P,T,C)
1612                                          =l=
1613                                                  E_LP
1614                                                  + eg_cap
1615                                                  ;
1616   
1617  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1618                                          eg_l(Y,P,T,C)
1619                                          =e=
1620                                                  eg(Y,P,C)
1621                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1622                                                  ;
1623   
1624  #--Gas charging constraints--#
1625   
1626  qgasc(Y,P,T,C)..
1627                                          pg_c(Y,P,T,C)
1628                                          =e=
1629                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1630                                                  + pg_import(Y,P,T,C)
1631                                                  ;
1632   
1633  #--Gas discharging constraints--#
1634   
1635  qgasd(Y,P,T,C)..
1636                                          pg_d(Y,P,T,C)
1637                                          =e=
1638                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1639                                                  ;
1640   
1641  #--Gas usage--#
1642   
1643  qgasuse(Y,C)..
1644                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1645                                          =l=
1646                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1647                                                  ;
1648   
1649  qgasusegen(Y,P,T,Z,GCG)..
1650                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1651                                          =e=
1652                                                  pg_syn(Y,P,T,Z,GCG)
1653                                                  + pg_fos(Y,P,T,Z,GCG)
1654                                                  ;
1655   
1656  demand(P,T,Z)..
1657                                          demand_unit(P,T,Z) =e= DEM_T(P,T,Z) + sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)*(price_unit(P,T,Z)-P_REF))
1658                                          #demand_unit(P,T,Z) =e= 8000
1659                                          ;
1660   
1661  totdemand(P,Z)..
1662                                          sum(T,DEM_T(P,T,Z)) =l= sum(T,demand_unit(P,T,Z))
1663                                          ;
1664   
1665  totdemand2(P,Z)..
1666                                          demand_tot(P,Z) =e= sum(T,demand_unit(P,T,Z))
1667                                          ;
1668   
1669  price(P,T,Z)..
1670                                          (price_unit(P,T,Z) - P_REF)*sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)) =e= (demand_unit(P,T,Z)-DEM_T(P,T,Z))
1671                                          ;
1672   
1673  refdemand(P,T,Z)..
1674                                          demand_ref(P,T,Z) =e= DEM_T(P,T,Z)
1675                                          ;
1676   
1677  shiftconstraint(P,H,Z)..
1678                                          sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1679                                          ;
1680   
1681  priceconstraint1(P,T,Z)..
1682                                          price_unit(P,T,Z) =l= P_ref + LIMIT
1683                                          ;
1684   
1685  priceconstraint2(P,T,Z)..
1686                                          price_unit(P,T,Z) =g= P_ref - LIMIT
1687                                          ;
1688   
1689  qinnerframe(P,H,Z)..
1690                                          innerframe(P,H,Z) =e= sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T))
1691                                          ;
1692   
1693  qouterframe(P,H,Z)..
1694                                          outerframe(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1695                                          ;
1696   
1697  MODEL GOA GOA model /
1698   
1699  #-------Objective function-----------------------------------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1700                  qobj
1701   
1702  #-------System constraints-----------------------------------------------------#
1703                  qbalance
1704   
1705                  qresprod
1706                  qco2lim
1707   
1708                  qresendomin
1709                  qresendomax
1710                  qres
1711   
1712                  #qgendisp
1713                  #qgendisppeak
1714   
1715                  qco2
1716                  qlcg
1717   
1718  #-------Generation technologies------------------------------------------------#
1719                  qpotcapmin
1720  #               qpotcapmax
1721  #               qpotgenmin
1722  #               qpotgenmax
1723   
1724  #--Conventional generation technologies--#
1725                  qresgcu
1726                  qresgcd
1727   
1728                  qn
1729                  qnmax
1730                  qnsu
1731                  qnsd
1732   
1733                  qgen
1734                  qgenmin
1735                  qgenmax
1736   
1737                  qrudyn
1738                  qrucap
1739                  qrddyn
1740                  qrdcap
1741                  qsumin
1742                  qsumax
1743                  qsdmin
1744                  qsdmax
1745   
1746                  qrufu
1747                  qruau
1748                  qrumus
1749                  qrdad
1750                  qrdmd
1751                  qrunsmin
1752                  qrunsmax
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1753                  qrdsdmin
1754                  qrdsdmax
1755   
1756  #--Intermittent renewable generation technologies--#
1757                  qresgru
1758   
1759                  qgenr
1760   
1761                  qresgrdr
1762                  qresgrdg
1763   
1764  #-------Storage technologies---------------------------------------------------#
1765  #--General constraints--#
1766                  qress
1767                  qspotcapmin
1768                  qspotcapmax
1769   
1770                  qe
1771                  qemax
1772                  qef
1773                  qefmin
1774                  qefmax
1775                  qefstart
1776                  qel
1777                  qelmin
1778                  qelmax
1779                  qelstart
1780   
1781                  qdurmin
1782                  qdurmax
1783   
1784  #--Short-term storage--#
1785                  qssc
1786                  qsscru
1787                  qsscrd
1788   
1789                  qssd
1790                  qssdru
1791                  qssdrd
1792   
1793  #--Mid and long-term storage--#
1794                  qresscu
1795                  qresscd
1796                  qressdu
1797                  qressdd
1798   
1799                  qnc
1800                  qncmax
1801                  qncsu
1802                  qncsd
1803   
1804                  qsmlc
1805                  qsmlcmin
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1806                  qsmlcmax
1807   
1808                  qcrudyn
1809                  qcrucap
1810                  qcrddyn
1811                  qcrdcap
1812                  qcsumin
1813                  qcsumax
1814                  qcsdmin
1815                  qcsdmax
1816   
1817                  qcruad
1818                  qcrumd
1819                  qcrdfu
1820                  qcrdau
1821                  qcrdmus
1822                  qcrunsmin
1823                  qcrunsmax
1824                  qcrdsdmin
1825                  qcrdsdmax
1826   
1827  #--Mid-term storage--#
1828                  qcapdeqcapc
1829   
1830                  qnd
1831                  qndmax
1832                  qndsu
1833                  qndsd
1834   
1835                  qsmd
1836                  qsmdmin
1837                  qsmdmax
1838   
1839                  qdrudyn
1840                  qdrucap
1841                  qdrddyn
1842                  qdrdcap
1843                  qdsumin
1844                  qdsumax
1845                  qdsdmin
1846                  qdsdmax
1847   
1848                  qdrufu
1849                  qdruau
1850                  qdrumus
1851                  qdrdad
1852                  qdrdmd
1853                  qdrunsmin
1854                  qdrunsmax
1855                  qdrdsdmin
1856                  qdrdsdmax
1857   
1858  #--Long-term storage--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1859                  qslressd
1860   
1861                  qgase
1862                  qgasemax
1863                  qgasef
1864                  qgasefmax
1865                  qgasefstart
1866                  qgasel
1867                  qgaselmax
1868                  qgaselstart
1869   
1870                  qgasc
1871   
1872                  qgasd
1873   
1874                  qgasuse
1875                  qgasusegen
1876   
1877  #-- Price-elasticity--#
1878   
1879                  price
1880                  demand
1881                  totdemand
1882                  totdemand2
1883                  refdemand
1884                  priceconstraint1
1885                  priceconstraint2
1886                  shiftconstraint
1887                  qinnerframe
1888                  qouterframe
1889  /;
1890   
1891   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 38
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/MainGEP_Storage_reduced_cp_Wouter2.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.015 SECONDS      3 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                03/09/16 17:24:40 Page 39
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/MainGEP_Storage_reduced_cp_Wouter2.gms
Output     C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/MainGEP_Storage_reduced_cp_Wouter2.lst
Save       C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
