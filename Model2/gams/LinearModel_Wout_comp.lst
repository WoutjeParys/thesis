GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(P,T,H)                            Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  COMPENSATE(P,H)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_NEW(P,T,H)        the new calculated elasticity matrix, taking into account the compensation factor
 337  DEM_REF_RES(P,T,Z)      amount of reference residential demand before DR
 338  DEM_NON_RES(P,T,Z)      amount of non residential demand
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 339  ELAST_COMP(P,T,H)       compensation PEM
 340  RATIO_H(P,H)            inbalance ratio
 341  LINEARPEM(T,H)          compensation PEM linear
 342  OWNELAST(T,H)           compensation PEM elast
 343   
 344  # data from DR model
 345  DEM_RES_MAX(P,T,Z)        max residential demand
 346  DEM_RES_MIN(P,T,Z)        min residential demand
 347  DEM_OPTIMAL(P,T,Z)        anchor point demand
 348  PRICE_REF(P,H,Z)          anchor point price
 349  DEM_RES_FP(P,T,Z)         prospected demand under flat price
 350   
 351  # factor of reserve allocation flexible damand
 352  FACTOR_RES_DR             factor that determines which part of the flexible band is used for flexibility
 353  ;
 354   
--- LOAD  G_DATA = 39:G_DATA
 355  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 356  $LOAD S_DATA
--- LOAD  RG = 41:RG
 357  $LOAD RG
--- LOAD  RSC = 42:RSC
 358  $LOAD RSC
--- LOAD  RSD = 43:RSD
 359  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 360  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 361  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 362  $LOAD REL_T
--- LOAD  W = 48:W
 363  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 364  $LOAD POL_TARGETS
 365  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 366  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 367  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 368  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 369  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 370  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 371  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 372  $LOAD SHIFTMIN
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/22/16 21:51:16 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  SHIFTMAX = 58:SHIFTMAX
 373  $LOAD SHIFTMAX
--- LOAD  COMPENSATE = 59:COMPENSATE
 374  $LOAD COMPENSATE
--- LOAD  DEM_REF_RES = 61:DEM_REF_RES
--- LOAD  DEM_NON_RES = 60:DEM_NON_RES
 375  $LOAD DEM_REF_RES DEM_NON_RES
--- LOAD  RATIO_H = 62:RATIO_H
 376  $LOAD RATIO_H
--- LOAD  LINEARPEM = 63:LINEARPEM
--- LOAD  OWNELAST = 64:OWNELAST
 377  $LOAD LINEARPEM OWNELAST
--- LOAD  DEM_OPTIMAL = 67:DEM_OPTIMAL
--- LOAD  DEM_RES_MIN = 66:DEM_RES_MIN
--- LOAD  DEM_RES_MAX = 65:DEM_RES_MAX
--- LOAD  DEM_RES_FP = 69:DEM_RES_FP
--- LOAD  PRICE_REF = 68:PRICE_REF
 378  $LOAD DEM_OPTIMAL DEM_RES_MIN DEM_RES_MAX DEM_RES_FP PRICE_REF
 379   
 380  #C_GAS = 25.6643460843943;
 381  C_GAS = 25.6643460843943*2;
 382  T_MARKET = 1;
 383  EGCAPEX = 2000000000000000000000000;
 384  E_LP = 7100000;
 385  P_REF = 55.5;
 386  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 387  LIMITPRICE = 1.5;
 388  LIMITDEM = 1500;
 389  LIMITSHIFT = 3000;
 390  LENGTH_P = card(T);
 391  FACTOR_RES_DR = 1;
 392   
 393  ############################
 394  ## CHOOSE STARTING DEMAND CURVE (Do not use!!!!!!!!)
 395  ###############
 396  #PRICE_REF(P,H,Z) = P_REF;
 397  #DEM_OPTIMAL(P,T,Z) = DEM_RES_FP(P,T,Z);
 398   
 399   
 400  ## flat compensation PEM
 401  ELAST_COMP(P,T,H) = (TRI_LOW(T,H)+TRI_UP(T,H))*RATIO_H(P,H);
 402  ## linear compensation PEM
 403  #ELAST_COMP(P,T,H) = (LINEARPEM(T,H))*RATIO_H(P,H);
 404  ## Elastic compensation PEM
 405  #ELAST_COMP(P,T,H) = (OWNELAST(T,H))*RATIO_H(P,H);
 406  ## Moving frames compensation PEM = 0
 407  #ELAST_COMP(P,T,H) = 0;
 408  ELAST_NEW(P,T,H) = ELAST(P,T,H)+ELAST_COMP(P,T,H);
 409   
 410  eff_factor_earlier = 0.0;
 411  eff_factor_later = 0.0;
 412   
 413  VARIABLES
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 414  obj                     Value of objective function
 415   
 416  #######################################################
 417   
 418  price_unit(P,H,Z)                               Residential price signal for the electricity
 419  price_unit_clone(P,T,Z)
 420   
 421  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 422  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 423  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 424  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 425  shiftaway(P,H,Z)                                Shift away from an hour
 426  shiftaway_total(P,Z)                    Shift away from a period
 427   
 428  shiftfi(P,H,Z)
 429  shiftbi(P,H,Z)
 430  shifta(P,H,Z)
 431  shiftfc(P,H,Z)
 432  shiftbc(P,H,Z)
 433   
 434  front_up(P,H,Z)
 435  front_down(P,H,Z)
 436  back_up(P,H,Z)
 437  back_down(P,H,Z)
 438  shift_up(P,H,Z)
 439  shift_down(P,H,Z)
 440  ;
 441   
 442  POSITIVE VARIABLES
 443  #######################################################
 444   
 445  demand_new_res(P,T,Z)           Residential demand after price signal applied
 446  demand_new_res_clone(P,H,Z)
 447  demand_unit(P,T,Z)                              demand of the electricity (sum residential & non-residential)
 448  demand_unit_clone(P,H,Z)
 449  demand_tot(P,Z)                                 total demand, based on demand_unit
 450  surplus(P,T,Z)
 451  demand_ref(P,T,Z)                               the reference demand with flat price
 452  innerframe(P,H,Z)
 453  outerframe(P,H,Z)
 454   
 455  totalrevenue(P,Z)                               the product of demand and price
 456  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 457  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 458  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 459   
 460  #######################################################
 461   
 462  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 463  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 464  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 465  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 466  eg_cap                                          Gas storage capacity
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 467   
 468  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 469  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 470   
 471  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 472  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 473  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 474  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 475  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 476  eg(Y,P,C)                                       Energy content of gas storage at period P
 477  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 478  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 479  pg_c(Y,P,T,C)                           Charging of gas storage
 480  pg_d(Y,P,T,C)                           Discharging of gas storage
 481   
 482  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 483  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 484  res_DR(Y,P,T,Z,R)             Reserve allocation of demand response for reserve category R
 485   
 486  load_shedding(Y,P,T,Z)          Load shedding
 487  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 488  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 489  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 490   
 491  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 492  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 493  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 494   
 495  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 496  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 497  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 498  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 499  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 500   
 501  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 502  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 503  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 504  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 505   
 506  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 507   
 508  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 509  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 510  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 511  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 512  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 513  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 514  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 515  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 516   
 517  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 518  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 519  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 520  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 521  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 522   
 523  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 524  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 525  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 526  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 527   
 528  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 529  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 530  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 531  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 532  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 533   
 534  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 535  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 536  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 537  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 538   
 539  pg_import(Y,P,T,C)                      Import of gas
 540  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 541  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 542   
 543  ;
 544   
 545  EQUATIONS
 546  #--Objective function--#
 547  qobj
 548   
 549  #--System constraints--#
 550  qbalance(Y,P,T,Z)
 551  qresprod(Y,C)
 552  qco2lim(Y,C)
 553  qresendomin(Y,P,T,C,R,GRI)
 554  qresendomax(Y,P,T,C,R,GRI)
 555  qres(Y,P,T,C,R)
 556  qgendisp(Y,P,T,C)
 557  qgendisppeak(Y,C)
 558  qco2(Y,C,G)
 559  qlcg(Y,C,G)
 560   
 561  #--Generation technologies--#
 562  qpotcapmin(Y,C,G)
 563  #qpotcapmax(Y,C,G)
 564  #qpotgenmin(Y,C,G)
 565  #qpotgenmax(Y,C,G)
 566   
 567  qresgcu(Y,P,T,Z,RU,GD)
 568  qresgcd(Y,P,T,Z,RD,GD)
 569  qn(Y,P,T,Z,GD)
 570  qnmax(Y,P,T,Z,GD)
 571  qnsu(Y,P,T,Z,GD)
 572  qnsd(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 573  qgen(Y,P,T,Z,GD)
 574  qgenmin(Y,P,T,Z,GD)
 575  qgenmax(Y,P,T,Z,GD)
 576  qrudyn(Y,P,T,Z,GD)
 577  qrucap(Y,P,T,Z,GD)
 578  qrddyn(Y,P,T,Z,GD)
 579  qrdcap(Y,P,T,Z,GD)
 580  qsumin(Y,P,T,Z,GD)
 581  qsumax(Y,P,T,Z,GD)
 582  qsdmin(Y,P,T,Z,GD)
 583  qsdmax(Y,P,T,Z,GD)
 584  qrufu(Y,P,T,Z,GD)
 585  qruau(Y,P,T,Z,GD)
 586  qrumus(Y,P,T,Z,GD)
 587  qrdad(Y,P,T,Z,GD)
 588  qrdmd(Y,P,T,Z,GD)
 589  qrunsmin(Y,P,T,Z,RU,GD)
 590  qrunsmax(Y,P,T,Z,RU,GD)
 591  qrdsdmin(Y,P,T,Z,RD,GD)
 592  qrdsdmax(Y,P,T,Z,RD,GD)
 593   
 594  qresgru(Y,P,T,Z,RU,GRI)
 595  qgenr(Y,P,T,Z,GRI)
 596  qresgrdr(Y,P,T,Z,GRI)
 597  qresgrdg(Y,P,T,Z,GRI)
 598   
 599  #--Storage technologies--#
 600  qress(Y,P,T,Z,R,S)
 601  qspotcapmin(Y,C,S)
 602  qspotcapmax(Y,C,S)
 603   
 604  qe(Y,P,Z,S)
 605  qemax(Y,P,Z,S)
 606  qef(Y,P,T,Z,S)
 607  qefmin(Y,P,T,Z,S)
 608  qefmax(Y,P,T,Z,S)
 609  qefstart(Y,P,T,Z,S)
 610  qel(Y,P,T,Z,S)
 611  qelmin(Y,P,T,Z,S)
 612  qelmax(Y,P,T,Z,S)
 613  qelstart(Y,P,T,Z,S)
 614  qdurmin(Y,Z,S)
 615  qdurmax(Y,Z,S)
 616   
 617  qssc(Y,P,T,Z,SS)
 618  qsscru(Y,P,T,Z,SS)
 619  qsscrd(Y,P,T,Z,SS)
 620  qssd(Y,P,T,Z,SS)
 621  qssdru(Y,P,T,Z,SS)
 622  qssdrd(Y,P,T,Z,SS)
 623   
 624  qresscu(Y,P,T,Z,RU,SML)
 625  qresscd(Y,P,T,Z,RD,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 626  qressdu(Y,P,T,Z,RU,SM)
 627  qressdd(Y,P,T,Z,RD,SM)
 628  qnc(Y,P,T,Z,SML)
 629  qncmax(Y,P,T,Z,SML)
 630  qncsu(Y,P,T,Z,SML)
 631  qncsd(Y,P,T,Z,SML)
 632  qsmlc(Y,P,T,Z,SML)
 633  qsmlcmin(Y,P,T,Z,SML)
 634  qsmlcmax(Y,P,T,Z,SML)
 635  qcrudyn(Y,P,T,Z,SML)
 636  qcrucap(Y,P,T,Z,SML)
 637  qcrddyn(Y,P,T,Z,SML)
 638  qcrdcap(Y,P,T,Z,SML)
 639  qcsumin(Y,P,T,Z,SML)
 640  qcsumax(Y,P,T,Z,SML)
 641  qcsdmin(Y,P,T,Z,SML)
 642  qcsdmax(Y,P,T,Z,SML)
 643  qcruad(Y,P,T,Z,SML)
 644  qcrumd(Y,P,T,Z,SML)
 645  qcrdfu(Y,P,T,Z,SML)
 646  qcrdau(Y,P,T,Z,SML)
 647  qcrdmus(Y,P,T,Z,SML)
 648  qcrunsmin(Y,P,T,Z,RD,SML)
 649  qcrunsmax(Y,P,T,Z,RD,SML)
 650  qcrdsdmin(Y,P,T,Z,RU,SML)
 651  qcrdsdmax(Y,P,T,Z,RU,SML)
 652   
 653  qcapdeqcapc(Y,Z,SM)
 654  qnd(Y,P,T,Z,SM)
 655  qndmax(Y,P,T,Z,SM)
 656  qndsu(Y,P,T,Z,SM)
 657  qndsd(Y,P,T,Z,SM)
 658  qsmd(Y,P,T,Z,SM)
 659  qsmdmin(Y,P,T,Z,SM)
 660  qsmdmax(Y,P,T,Z,SM)
 661  qdrudyn(Y,P,T,Z,SM)
 662  qdrucap(Y,P,T,Z,SM)
 663  qdrddyn(Y,P,T,Z,SM)
 664  qdrdcap(Y,P,T,Z,SM)
 665  qdsumin(Y,P,T,Z,SM)
 666  qdsumax(Y,P,T,Z,SM)
 667  qdsdmin(Y,P,T,Z,SM)
 668  qdsdmax(Y,P,T,Z,SM)
 669  qdrufu(Y,P,T,Z,SM)
 670  qdruau(Y,P,T,Z,SM)
 671  qdrumus(Y,P,T,Z,SM)
 672  qdrdad(Y,P,T,Z,SM)
 673  qdrdmd(Y,P,T,Z,SM)
 674  qdrunsmin(Y,P,T,Z,RU,SM)
 675  qdrunsmax(Y,P,T,Z,RU,SM)
 676  qdrdsdmin(Y,P,T,Z,RD,SM)
 677  qdrdsdmax(Y,P,T,Z,RD,SM)
 678   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 679  qslressd(Y,P,T,Z,R,SL)
 680  qgase(Y,P,C)
 681  qgasemax(Y,P,C)
 682  qgasef(Y,P,T,C)
 683  qgasefmax(Y,P,T,C)
 684  qgasefstart(Y,P,T,C)
 685  qgasel(Y,P,T,C)
 686  qgaselmax(Y,P,T,C)
 687  qgaselstart(Y,P,T,C)
 688  qgasc(Y,P,T,C)
 689  qgasd(Y,P,T,C)
 690  qgasuse(Y,C)
 691  qgasusegen(Y,P,T,Z,GCG)
 692   
 693  ###############################
 694  #price(P,H,Z)
 695  price_clone(P,T,Z)
 696  demand(P,T,Z)
 697  demand_clone(P,H,Z)
 698   
 699  #data DR model
 700  demand_max(P,T,Z)
 701  demand_min(P,T,Z)
 702   
 703  # reserve allocation
 704  qresdrup(Y,P,T,Z)
 705  qresdrdo(Y,P,T,Z)
 706   
 707  sum_demand(P,T,Z)
 708  totdemand(P,Z)
 709  surplusdemand(P,T,Z)
 710  totdemand2(P,Z)
 711  refdemand(P,T,Z)
 712  refdemand2(Z)
 713  priceconstraint1(P,H,Z)
 714  priceconstraint2(P,H,Z)
 715  priceconstraint3(P,Z)
 716  shiftconstraint_frame_1(P,H,Z)
 717  shiftconstraint_frame_2(P,H,Z)
 718  shiftconstraint1(P,H,Z)
 719  shiftconstraint2(P,H,Z)
 720  shiftedforward(P,H,Z)
 721  shiftedforwardtotal(P,Z)
 722  shiftedbackward(P,H,Z)
 723  shiftedbackwardtotal(P,Z)
 724  shiftedaway(P,H,Z)
 725  shiftedawaytotal(P,Z)
 726   
 727  shiftedfi(P,H,Z)
 728  shiftedbi(P,H,Z)
 729  shiftedfc(P,H,Z)
 730  shiftedbc(P,H,Z)
 731   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 732  front_d_1(P,H,Z)
 733  front_d_2(P,H,Z)
 734  front_u_1(P,H,Z)
 735  front_u_2(P,H,Z)
 736   
 737  back_d_1(P,H,Z)
 738  back_d_2(P,H,Z)
 739  back_u_1(P,H,Z)
 740  back_u_2(P,H,Z)
 741   
 742  shift_d_1(P,H,Z)
 743  shift_d_2(P,H,Z)
 744  shift_u_1(P,H,Z)
 745  shift_u_2(P,H,Z)
 746   
 747  qinnerframe(P,H,Z)
 748  qouterframe(P,H,Z)
 749   
 750  revenue(P,Z)
 751  fixedcost(Z)
 752  variablecost(P,Z)
 753  cost(Z)
 754   
 755  demlimitunder(P,T,Z)
 756  demlimitupper(P,T,Z)
 757  ;
 758   
 759  #-----######################---------------------------------------------------#
 760  #-----# Objective function #---------------------------------------------------#
 761  #-----######################---------------------------------------------------#
 762  qobj..              obj
 763                                          =e=
 764                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 765                                                  + sum((Y,Z,S),      (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 766                                                  +
 767                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 768                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 769   
 770                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 771                                                  + sum((Y,P,T,Z,GRI),    W(P)*(0)*curt(Y,P,T,Z,GRI) + W(P)*(1000000)*curt_dummy(Y,P,T,Z,GRI))
 772                          + sum((Y,P,T,Z),                W(P)*(10000)*load_shedding(Y,P,T,Z))
 773                                                  )
 774                                                  *(168/card(T));
 775                                                  ;
 776   
 777   
 778   
 779   
 780  #-----######################---------------------------------------------------#
 781  #-----# System constraints #---------------------------------------------------#
 782  #-----######################---------------------------------------------------#
 783   
 784  #--System balance--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 785   
 786  # balance with demand response
 787  qbalance(Y,P,T,Z)..
 788                                  sum(G, gen(Y,P,T,Z,G))
 789                                  + sum(SSM, p_d(Y,P,T,Z,SSM))
 790                                          =e=
 791                                                  demand_unit(P,T,Z)
 792                                                  - load_shedding(Y,P,T,Z)
 793                                                  + sum(S, p_c(Y,P,T,Z,S))
 794                                                  ;
 795   
 796  #balance without demand response
 797  #qbalance(Y,P,T,Z)..
 798  #                               sum(G, gen(Y,P,T,Z,G))
 799  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 800  #                                       =e=
 801  #                                               DEM_T(P,T,Z)
 802  #                                       #       - load_shedding(Y,P,T,Z)
 803  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 804  #                                               ;
 805  #DEM(Y,Z)*DEM_T(T,Z);
 806   
 807  #--Renewable target--#
 808   
 809  #qresprod(Y,C)..
 810  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 811  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 812  #                                       =l=
 813  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 814  #                                               ;
 815   
 816  qresprod(Y,C)..
 817                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 818                                          =g=
 819                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 820                                                  ;
 821   
 822  qco2lim(Y,C)..
 823  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 824  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 825                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 826                                          =l=
 827                                                  50000000*0.4
 828                                                  ;
 829   
 830  #--Reserve requirements--#
 831   
 832  qresendomin(Y,P,T,C,R,GRI)..
 833                                          q_endo(Y,P,T,C,R,GRI)
 834                                          =g=
 835                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 836                                                  ;
 837   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 838  qresendomax(Y,P,T,C,R,GRI)..
 839                                          q_endo(Y,P,T,C,R,GRI)
 840                                          =l=
 841                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 842                                                  ;
 843   
 844   
 845  qres(Y,P,T,C,R)..
 846                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 847                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 848                                          + sum(Z $ C_Z(C,Z), res_DR(Y,P,T,Z,R))
 849                                          =e=
 850                                                  R_EXO(C,R)
 851                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 852                                                  ;
 853   
 854  #--Dispatchable capacity--#
 855   
 856  #TODO: wich demand is needed here?
 857  qgendisp(Y,P,T,C)..
 858                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 859                                          =g=
 860                                                  sum(Z $ C_Z(C,Z), demand_unit(P,T,Z))*0.20
 861                                                  ;
 862   
 863  qgendisppeak(Y,C)..
 864                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 865                                          =g=
 866                                                  10000*1.20
 867                                                  ;
 868   
 869  #--Emissions--#
 870   
 871  qco2(Y,C,G)..
 872                                          co2(Y,C,G)
 873                                          =e=
 874                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 875                                                  ;
 876   
 877  qlcg(Y,C,G)..
 878                                          lcg(Y,C,G)
 879                                          =e=
 880                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 881                                                  ;
 882   
 883   
 884  #-----###########################----------------------------------------------#
 885  #-----# Generation technologies #----------------------------------------------#
 886  #-----###########################----------------------------------------------#
 887   
 888  ##--Installed generation capacities--#
 889   
 890  qpotcapmin(Y,C,G)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 891                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 892                                          =g=
 893                                                  G_DATA(G,'CAP_MIN')
 894                                                  ;
 895   
 896  #qpotcapmax(Y,C,G)..
 897  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 898  #                                       =g=
 899  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 900  #                                               ;
 901  #
 902  #qpotgenmin(Y,C,G)..
 903  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 904  #                                       =g=
 905  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 906  #                                               ;
 907  #
 908  #qpotgenmax(Y,Z,G)..
 909  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 910  #                                       =g=
 911  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 912  #                                               ;
 913   
 914  #-------Dispatchable generation technologies-----------------------------------#
 915   
 916  #--Reserve allocation--#
 917   
 918  qresgcu(Y,P,T,Z,RU,GD)..
 919                                          res_g(Y,P,T,Z,RU,GD)
 920                                          =e=
 921                                                  res_g_s(Y,P,T,Z,RU,GD)
 922                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 923                                                  ;
 924   
 925  qresgcd(Y,P,T,Z,RD,GD)..
 926                                          res_g(Y,P,T,Z,RD,GD)
 927                                          =e=
 928                                                  res_g_s(Y,P,T,Z,RD,GD)
 929                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 930                                                  ;
 931   
 932  #--Clustering logical constraints--#
 933   
 934  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 935                                          n(Y,P,T+1,Z,GD)
 936                                          =e=
 937                                                  n(Y,P,T,Z,GD)
 938                                                  + n_su(Y,P,T,Z,GD)
 939                                                  - n_sd(Y,P,T,Z,GD)
 940                                                  ;
 941   
 942  qnmax(Y,P,T,Z,GD)..
 943                                          n(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 944                                          =l=
 945                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 946                                                  ;
 947   
 948  qnsu(Y,P,T,Z,GD)..
 949                                          n_su(Y,P,T,Z,GD)
 950                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 951                                          =l=
 952                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 953                                                  - n(Y,P,T,Z,GD)
 954                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 955                                                  ;
 956   
 957  qnsd(Y,P,T,Z,GD)..
 958                                          n_sd(Y,P,T,Z,GD)
 959                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 960                                          =l=
 961                                                  n(Y,P,T,Z,GD)
 962                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 963                                                  ;
 964   
 965  #--Generation constraints--#
 966   
 967  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 968                      gen(Y,P,T+1,Z,GD)
 969                      =e=
 970                          gen(Y,P,T,Z,GD)
 971                          + ramp_up(Y,P,T,Z,GD)
 972                          - ramp_dn(Y,P,T,Z,GD)
 973                          + ramp_su(Y,P,T,Z,GD)
 974                          - ramp_sd(Y,P,T,Z,GD)
 975                          ;
 976   
 977  qgenmin(Y,P,T,Z,GD)..
 978                                          gen(Y,P,T,Z,GD)
 979                                          =g=
 980                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 981                                                  ;
 982   
 983  qgenmax(Y,P,T,Z,GD)..
 984                                          gen(Y,P,T,Z,GD)
 985                                          =l=
 986                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 987                                                  ;
 988                                                  #*G_DATA(G,'PM')/100;
 989   
 990  #--Ramping constraints--#
 991   
 992  qrudyn(Y,P,T,Z,GD)..
 993                      ramp_up(Y,P,T,Z,GD)
 994                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 995                      =l=
 996                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 997                          ;
 998   
 999  qrucap(Y,P,T,Z,GD)..
1000                      ramp_up(Y,P,T,Z,GD)
1001                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1002                      =l=
1003                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
1004                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
1005                          ;
1006   
1007  qrddyn(Y,P,T,Z,GD)..
1008                      ramp_dn(Y,P,T,Z,GD)
1009                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1010                      =l=
1011                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1012                          ;
1013   
1014  qrdcap(Y,P,T,Z,GD)..
1015                      ramp_dn(Y,P,T,Z,GD)
1016                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1017                      =l=
1018                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
1019                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
1020                          ;
1021   
1022  qsumin(Y,P,T,Z,GD)..
1023                                          ramp_su(Y,P,T,Z,GD)
1024                                          =g=
1025                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1026                                                  ;
1027   
1028  qsumax(Y,P,T,Z,GD)..
1029                                          ramp_su(Y,P,T,Z,GD)
1030                                          =l=
1031                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1032                                                  ;
1033   
1034  qsdmin(Y,P,T,Z,GD)..
1035                                          ramp_sd(Y,P,T,Z,GD)
1036                                          =g=
1037                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1038                                                  ;
1039   
1040  qsdmax(Y,P,T,Z,GD)..
1041                                          ramp_sd(Y,P,T,Z,GD)
1042                                          =l=
1043                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1044                                                  ;
1045   
1046  #--Reserve allocation constraints--#
1047   
1048  qrufu(Y,P,T,Z,GD)..
1049                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1050                      =l=
1051                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
1052                          ;
1053   
1054  qruau(Y,P,T,Z,GD)..
1055                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
1056                      =l=
1057                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1058                          ;
1059   
1060  qrumus(Y,P,T,Z,GD)..
1061                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1062                      =l=
1063                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1064                          ;
1065   
1066  qrdad(Y,P,T,Z,GD)..
1067                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
1068                      =l=
1069                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1070                          ;
1071   
1072  qrdmd(Y,P,T,Z,GD)..
1073                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1074                      =l=
1075                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1076                          ;
1077   
1078  qrunsmin(Y,P,T,Z,RU,GD)..
1079                                          res_g_ns(Y,P,T,Z,RU,GD)
1080                                          =g=
1081                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
1082                                                  ;
1083   
1084  qrunsmax(Y,P,T,Z,RU,GD)..
1085                                          res_g_ns(Y,P,T,Z,RU,GD)
1086                                          =l=
1087                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
1088                                                  ;
1089   
1090  qrdsdmin(Y,P,T,Z,RD,GD)..
1091                                          res_g_sd(Y,P,T,Z,RD,GD)
1092                                          =g=
1093                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1094                                                  ;
1095   
1096  qrdsdmax(Y,P,T,Z,RD,GD)..
1097                                          res_g_sd(Y,P,T,Z,RD,GD)
1098                                          =l=
1099                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1100                                                  ;
1101   
1102  #-------Intermittent renewable generation technologies-------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1103   
1104  #--Reserve allocation--#
1105   
1106  qresgru(Y,P,T,Z,RU,GRI)..
1107                                          res_g(Y,P,T,Z,RU,GRI)
1108                                          =e=
1109                                                  0
1110                                                  ;
1111   
1112  #--Output and curtailment constraint--#
1113   
1114  qgenr(Y,P,T,Z,GRI)..
1115                      gen(Y,P,T,Z,GRI)
1116                      + curt(Y,P,T,Z,GRI)
1117                      + curt_dummy(Y,P,T,Z,GRI)
1118                      =e=
1119                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1120                          ;
1121   
1122  #--Reserve allocation constraints--#
1123   
1124  qresgrdr(Y,P,T,Z,GRI)..
1125                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1126                                          =l=
1127                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1128                                                  ;
1129   
1130  qresgrdg(Y,P,T,Z,GRI)..
1131                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1132                                          =l=
1133                                                  gen(Y,P,T,Z,GRI)
1134                                                  ;
1135   
1136  #-----########################-------------------------------------------------#
1137  #-----# Storage technologies #-------------------------------------------------#
1138  #-----########################-------------------------------------------------#
1139   
1140  #-------General constraints----------------------------------------------------#
1141   
1142  #--Reserve allocation--#
1143   
1144  qress(Y,P,T,Z,R,S)..
1145                                          res_s(Y,P,T,Z,R,S)
1146                                          =e=
1147                                                  res_s_c(Y,P,T,Z,R,S)
1148                                                  + res_s_d(Y,P,T,Z,R,S)
1149                                                  ;
1150   
1151  #--Installed capacities--#
1152   
1153  qspotcapmin(Y,C,S)..
1154                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1155                                          =g=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1156                                                  S_DATA(S,'CAP_MIN')
1157                                                  ;
1158   
1159  qspotcapmax(Y,C,S)..
1160                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1161                                          =l=
1162                                                  S_DATA(S,'CAP_MAX')
1163                                                  ;
1164   
1165  #-------Short- and mid-term storage--------------------------------------------#
1166   
1167  #--Energy constraints--#
1168   
1169  qe(Y,P,Z,SSM)..
1170                                          e(Y,P++1,Z,SSM)
1171                                          =e=
1172                                                  e(Y,P,Z,SSM)
1173                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1174                                                  ;
1175   
1176  qemax(Y,P,Z,SSM)..
1177                                          e(Y,P,Z,SSM)
1178                                          =l=
1179                                                  e_cap(Y,Z,SSM)
1180                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1181                                                  ;
1182   
1183  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1184                                          e_f(Y,P,T,Z,SSM)
1185                                          =e=
1186                                                  e(Y,P,Z,SSM)
1187                                                  ;
1188   
1189  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1190                                          e_f(Y,P,T+1,Z,SSM)
1191                                          =e=
1192                                                  e_f(Y,P,T,Z,SSM)
1193                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1194                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1195                                                  ;
1196   
1197  qefmin(Y,P,T,Z,SSM)..
1198                                          e_f(Y,P,T,Z,SSM)
1199                                          =g=
1200                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1201                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1202                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1203                                                  ;
1204  qefmax(Y,P,T,Z,SSM)..
1205                                          e_f(Y,P,T,Z,SSM)
1206                                          =l=
1207                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1208                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1209                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1210                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1211                                                  ;
1212   
1213  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1214                                          e_l(Y,P,T,Z,SSM)
1215                                          =e=
1216                                                  e(Y,P,Z,SSM)
1217                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1218                                                  ;
1219   
1220  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1221                                          e_l(Y,P,T+1,Z,SSM)
1222                                          =e=
1223                                                  e_l(Y,P,T,Z,SSM)
1224                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1225                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1226                                                  ;
1227   
1228  qelmin(Y,P,T,Z,SSM)..
1229                                          e_l(Y,P,T,Z,SSM)
1230                                          =g=
1231                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1232                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1233                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1234                                                  ;
1235  qelmax(Y,P,T,Z,SSM)..
1236                                          e_l(Y,P,T,Z,SSM)
1237                                          =l=
1238                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1239                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1240                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1241                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1242                                                  ;
1243   
1244  #--Duration limits--#
1245   
1246  qdurmin(Y,Z,SSM)..
1247                                          e_cap(Y,Z,SSM)
1248                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1249                                          =g=
1250                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1251                                                  ;
1252   
1253  qdurmax(Y,Z,SSM)..
1254                                          e_cap(Y,Z,SSM)
1255                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1256                                          =l=
1257                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1258                                                  ;
1259   
1260  #-------Short-term storage-----------------------------------------------------#
1261   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1262  #--Charging constraints--#
1263   
1264  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1265                                          p_c(Y,P,T+1,Z,SS)
1266                                          =e=
1267                                                  p_c(Y,P,T,Z,SS)
1268                                                  + ramp_c_up(Y,P,T,Z,SS)
1269                          - ramp_c_dn(Y,P,T,Z,SS)
1270                          ;
1271   
1272  qsscru(Y,P,T,Z,SS)..
1273                      ramp_c_up(Y,P,T,Z,SS)
1274                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1275                      =l=
1276                          p_cap_c(Y,Z,SS)
1277                          - p_c(Y,P,T,Z,SS)
1278                          ;
1279   
1280  qsscrd(Y,P,T,Z,SS)..
1281                      ramp_c_dn(Y,P,T,Z,SS)
1282                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1283                      =l=
1284                          p_c(Y,P,T,Z,SS)
1285                          ;
1286   
1287  #--Discharging constraints--#
1288   
1289  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1290                          p_d(Y,P,T+1,Z,SS)
1291                          =e=
1292                                  p_d(Y,P,T,Z,SS)
1293                                  + ramp_d_up(Y,P,T,Z,SS)
1294                          - ramp_d_dn(Y,P,T,Z,SS)
1295                          ;
1296   
1297  qssdru(Y,P,T,Z,SS)..
1298                      ramp_d_up(Y,P,T,Z,SS)
1299                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1300                      =l=
1301                          p_cap_c(Y,Z,SS)
1302                          - p_d(Y,P,T,Z,SS)
1303                          ;
1304   
1305  qssdrd(Y,P,T,Z,SS)..
1306                      ramp_d_dn(Y,P,T,Z,SS)
1307                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1308                      =l=
1309                          p_d(Y,P,T,Z,SS)
1310                          ;
1311   
1312  #-------Mid and long-term storage----------------------------------------------#
1313   
1314  #--Reserve allocation--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1315   
1316  qresscu(Y,P,T,Z,RU,SML)..
1317                                          res_s_c(Y,P,T,Z,RU,SML)
1318                                          =e=
1319                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1320                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1321                                                  ;
1322   
1323  qresscd(Y,P,T,Z,RD,SML)..
1324                                          res_s_c(Y,P,T,Z,RD,SML)
1325                                          =e=
1326                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1327                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1328                                                  ;
1329   
1330  qressdu(Y,P,T,Z,RU,SM)..
1331                                          res_s_d(Y,P,T,Z,RU,SM)
1332                                          =e=
1333                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1334                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1335                                                  ;
1336   
1337  qressdd(Y,P,T,Z,RD,SM)..
1338                                          res_s_d(Y,P,T,Z,RD,SM)
1339                                          =e=
1340                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1341                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1342                                                  ;
1343   
1344  #--Charging logical constraints--#
1345   
1346  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1347                                          n_c(Y,P,T+1,Z,SML)
1348                                          =e=
1349                                                  n_c(Y,P,T,Z,SML)
1350                                                  + n_c_su(Y,P,T,Z,SML)
1351                                                  - n_c_sd(Y,P,T,Z,SML)
1352                                                  ;
1353   
1354  qncmax(Y,P,T,Z,SML)..
1355                                          n_c(Y,P,T,Z,SML)
1356                                          =l=
1357                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1358                                                  ;
1359   
1360  qncsu(Y,P,T,Z,SML)..
1361                                          n_c_su(Y,P,T,Z,SML)
1362                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1363                                          =l=
1364                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1365                                                  - n_c(Y,P,T,Z,SML)
1366                                                  ;
1367   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1368  qncsd(Y,P,T,Z,SML)..
1369                                          n_c_sd(Y,P,T,Z,SML)
1370                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1371                                          =l=
1372                                                  n_c(Y,P,T,Z,SML)
1373                                                  ;
1374   
1375  #--Charging constraints--#
1376   
1377  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1378                      p_c(Y,P,T+1,Z,SML)
1379                      =e=
1380                          p_c(Y,P,T,Z,SML)
1381                          + ramp_c_up(Y,P,T,Z,SML)
1382                          - ramp_c_dn(Y,P,T,Z,SML)
1383                          + ramp_c_su(Y,P,T,Z,SML)
1384                          - ramp_c_sd(Y,P,T,Z,SML)
1385                          ;
1386   
1387  qsmlcmin(Y,P,T,Z,SML)..
1388                                          p_c(Y,P,T,Z,SML)
1389                                          =g=
1390                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1391                                                  ;
1392   
1393  qsmlcmax(Y,P,T,Z,SML)..
1394                                          p_c(Y,P,T,Z,SML)
1395                                          =l=
1396                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1397                                                  ;
1398   
1399  #--Charging ramping constraints--#
1400   
1401  qcrudyn(Y,P,T,Z,SML)..
1402                      ramp_c_up(Y,P,T,Z,SML)
1403                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1404                      =l=
1405                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1406                          ;
1407   
1408  qcrucap(Y,P,T,Z,SML)..
1409                      ramp_c_up(Y,P,T,Z,SML)
1410                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1411                      =l=
1412                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1413                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1414                          ;
1415   
1416  qcrddyn(Y,P,T,Z,SML)..
1417                      ramp_c_dn(Y,P,T,Z,SML)
1418                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1419                      =l=
1420                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1421                          ;
1422   
1423  qcrdcap(Y,P,T,Z,SML)..
1424                      ramp_c_dn(Y,P,T,Z,SML)
1425                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1426                      =l=
1427                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1428                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1429                          ;
1430   
1431  qcsumin(Y,P,T,Z,SML)..
1432                                          ramp_c_su(Y,P,T,Z,SML)
1433                                          =g=
1434                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1435                                                  ;
1436   
1437  qcsumax(Y,P,T,Z,SML)..
1438                                          ramp_c_su(Y,P,T,Z,SML)
1439                                          =l=
1440                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1441                                                  ;
1442   
1443  qcsdmin(Y,P,T,Z,SML)..
1444                                          ramp_c_sd(Y,P,T,Z,SML)
1445                                          =g=
1446                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1447                                                  ;
1448   
1449  qcsdmax(Y,P,T,Z,SML)..
1450                                          ramp_c_sd(Y,P,T,Z,SML)
1451                                          =l=
1452                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1453                                                  ;
1454   
1455  #--Reserve allocation constraints--#
1456   
1457  qcruad(Y,P,T,Z,SML)..
1458                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1459                      =l=
1460                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1461                          ;
1462   
1463  qcrumd(Y,P,T,Z,SML)..
1464                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1465                      =l=
1466                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1467                          ;
1468   
1469  qcrdfu(Y,P,T,Z,SML)..
1470                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1471                      =l=
1472                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1473                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1474   
1475  qcrdau(Y,P,T,Z,SML)..
1476                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1477                      =l=
1478                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1479                          ;
1480   
1481  qcrdmus(Y,P,T,Z,SML)..
1482                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1483                      =l=
1484                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1485                          ;
1486   
1487  qcrunsmin(Y,P,T,Z,RD,SML)..
1488                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1489                                          =g=
1490                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1491                                                  ;
1492   
1493  qcrunsmax(Y,P,T,Z,RD,SML)..
1494                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1495                                          =l=
1496                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1497                                                  ;
1498   
1499  qcrdsdmin(Y,P,T,Z,RU,SML)..
1500                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1501                                          =g=
1502                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1503                                                  ;
1504   
1505  qcrdsdmax(Y,P,T,Z,RU,SML)..
1506                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1507                                          =l=
1508                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1509                                                  ;
1510   
1511  #-------Mid-term storage-------------------------------------------------------#
1512   
1513  qcapdeqcapc(Y,Z,SM)..
1514                                          p_cap_d(Y,Z,SM)
1515                                          =e=
1516                                                  p_cap_c(Y,Z,SM)
1517                                                  ;
1518   
1519  #--Discharging logical constraints--#
1520   
1521  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1522                                          n_d(Y,P,T+1,Z,SM)
1523                                          =e=
1524                                                  n_d(Y,P,T,Z,SM)
1525                                                  + n_d_su(Y,P,T,Z,SM)
1526                                                  - n_d_sd(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1527                                                  ;
1528   
1529  qndmax(Y,P,T,Z,SM)..
1530                                          n_d(Y,P,T,Z,SM)
1531                                          =l=
1532                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1533                                                  ;
1534   
1535  qndsu(Y,P,T,Z,SM)..
1536                                          n_d_su(Y,P,T,Z,SM)
1537                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1538                                          =l=
1539                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1540                                                  - n_d(Y,P,T,Z,SM)
1541                                                  ;
1542   
1543  qndsd(Y,P,T,Z,SM)..
1544                                          n_d_sd(Y,P,T,Z,SM)
1545                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1546                                          =l=
1547                                                  n_d(Y,P,T,Z,SM)
1548                                                  ;
1549   
1550  #--Discharging constraints--#
1551   
1552  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1553                      p_d(Y,P,T+1,Z,SM)
1554                      =e=
1555                          p_d(Y,P,T,Z,SM)
1556                          + ramp_d_up(Y,P,T,Z,SM)
1557                          - ramp_d_dn(Y,P,T,Z,SM)
1558                          + ramp_d_su(Y,P,T,Z,SM)
1559                          - ramp_d_sd(Y,P,T,Z,SM)
1560                          ;
1561   
1562  qsmdmin(Y,P,T,Z,SM)..
1563                                          p_d(Y,P,T,Z,SM)
1564                                          =g=
1565                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1566                                                  ;
1567   
1568  qsmdmax(Y,P,T,Z,SM)..
1569                                          p_d(Y,P,T,Z,SM)
1570                                          =l=
1571                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1572                                                  ;
1573   
1574  #--Discharging ramping constraints--#
1575   
1576  qdrudyn(Y,P,T,Z,SM)..
1577                      ramp_d_up(Y,P,T,Z,SM)
1578                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1579                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1580                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1581                          ;
1582   
1583  qdrucap(Y,P,T,Z,SM)..
1584                      ramp_d_up(Y,P,T,Z,SM)
1585                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1586                      =l=
1587                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1588                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1589                          ;
1590   
1591  qdrddyn(Y,P,T,Z,SM)..
1592                      ramp_d_dn(Y,P,T,Z,SM)
1593                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1594                      =l=
1595                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1596                          ;
1597   
1598  qdrdcap(Y,P,T,Z,SM)..
1599                      ramp_d_dn(Y,P,T,Z,SM)
1600                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1601                      =l=
1602                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1603                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1604                          ;
1605   
1606  qdsumin(Y,P,T,Z,SM)..
1607                                          ramp_d_su(Y,P,T,Z,SM)
1608                                          =g=
1609                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1610                                                  ;
1611   
1612  qdsumax(Y,P,T,Z,SM)..
1613                                          ramp_d_su(Y,P,T,Z,SM)
1614                                          =l=
1615                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1616                                                  ;
1617   
1618  qdsdmin(Y,P,T,Z,SM)..
1619                                          ramp_d_sd(Y,P,T,Z,SM)
1620                                          =g=
1621                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1622                                                  ;
1623   
1624  qdsdmax(Y,P,T,Z,SM)..
1625                                          ramp_d_sd(Y,P,T,Z,SM)
1626                                          =l=
1627                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1628                                                  ;
1629   
1630  #--Reserve allocation constraints--#
1631   
1632  qdrufu(Y,P,T,Z,SM)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1633                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1634                      =l=
1635                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1636                          ;
1637   
1638  qdruau(Y,P,T,Z,SM)..
1639                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1640                      =l=
1641                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1642                          ;
1643   
1644  qdrumus(Y,P,T,Z,SM)..
1645                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1646                      =l=
1647                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1648                          ;
1649   
1650  qdrdad(Y,P,T,Z,SM)..
1651                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1652                      =l=
1653                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1654                          ;
1655   
1656  qdrdmd(Y,P,T,Z,SM)..
1657                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1658                      =l=
1659                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1660                          ;
1661   
1662  qdrunsmin(Y,P,T,Z,RU,SM)..
1663                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1664                                          =g=
1665                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1666                                                  ;
1667   
1668  qdrunsmax(Y,P,T,Z,RU,SM)..
1669                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1670                                          =l=
1671                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1672                                                  ;
1673   
1674  qdrdsdmin(Y,P,T,Z,RD,SM)..
1675                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1676                                          =g=
1677                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1678                                                  ;
1679   
1680  qdrdsdmax(Y,P,T,Z,RD,SM)..
1681                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1682                                          =l=
1683                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1684                                                  ;
1685   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1686  #-------Long-term storage------------------------------------------------------#
1687   
1688  #--Discharging reserve allocation--#
1689   
1690  qslressd(Y,P,T,Z,R,SL)..
1691                                          res_s_d(Y,P,T,Z,R,SL)
1692                                          =e=
1693                                                  0
1694                                                  ;
1695   
1696  #--Gas energy balance--#
1697   
1698  qgase(Y,P,C)..
1699                                          eg(Y,P++1,C)
1700                                          =e=
1701                                                  eg(Y,P,C)
1702                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1703                                                  ;
1704   
1705  qgasemax(Y,P,C)..
1706                                          eg(Y,P,C)
1707                                          =l=
1708                                                  E_LP
1709                                                  + eg_cap
1710                                                  ;
1711   
1712  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1713                                          eg_f(Y,P,T+1,C)
1714                                          =e=
1715                                                  eg_f(Y,P,T,C)
1716                                                  + pg_c(Y,P,T,C)
1717                                                  - pg_d(Y,P,T,C)
1718                                                  ;
1719   
1720  qgasefmax(Y,P,T,C)..
1721                                          eg_f(Y,P,T,C)
1722                                          =l=
1723                                                  E_LP
1724                                                  + eg_cap
1725                                                  ;
1726   
1727  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1728                                          eg_f(Y,P,T,C)
1729                                          =e=
1730                                                  eg(Y,P,C)
1731                                                  ;
1732   
1733  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1734                                          eg_l(Y,P,T+1,C)
1735                                          =e=
1736                                                  eg_l(Y,P,T,C)
1737                                                  + pg_c(Y,P,T,C)
1738                                                  - pg_d(Y,P,T,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1739                                                  ;
1740   
1741  qgaselmax(Y,P,T,C)..
1742                                          eg_l(Y,P,T,C)
1743                                          =l=
1744                                                  E_LP
1745                                                  + eg_cap
1746                                                  ;
1747   
1748  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1749                                          eg_l(Y,P,T,C)
1750                                          =e=
1751                                                  eg(Y,P,C)
1752                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1753                                                  ;
1754   
1755  #--Gas charging constraints--#
1756   
1757  qgasc(Y,P,T,C)..
1758                                          pg_c(Y,P,T,C)
1759                                          =e=
1760                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1761                                                  + pg_import(Y,P,T,C)
1762                                                  ;
1763   
1764  #--Gas discharging constraints--#
1765   
1766  qgasd(Y,P,T,C)..
1767                                          pg_d(Y,P,T,C)
1768                                          =e=
1769                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1770                                                  ;
1771   
1772  #--Gas usage--#
1773   
1774  qgasuse(Y,C)..
1775                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1776                                          =l=
1777                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1778                                                  ;
1779   
1780  qgasusegen(Y,P,T,Z,GCG)..
1781                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1782                                          =e=
1783                                                  pg_syn(Y,P,T,Z,GCG)
1784                                                  + pg_fos(Y,P,T,Z,GCG)
1785                                                  ;
1786   
1787  ################################################
1788  # DEMAND RESPONSE
1789  ################################################
1790   
1791  # always included in this manner
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1792   
1793  sum_demand(P,T,Z)..
1794                      demand_unit(P,T,Z) =e= DEM_NON_RES(P,T,Z) + demand_new_res(P,T,Z)
1795                      ;
1796   
1797  totdemand2(P,Z)..
1798                                          demand_tot(P,Z) =e= sum(T,demand_new_res(P,T,Z) + DEM_NON_RES(P,T,Z))
1799  #                                       demand_tot(P,Z) =e= sum(T,DEM_REF_RES(P,T,Z))
1800                                          ;
1801   
1802  refdemand(P,T,Z)..
1803                                          demand_ref(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + DEM_NON_RES(P,T,Z)
1804                                          ;
1805   
1806   
1807   
1808  ##################################
1809   
1810  # change used equation depending on with or withourt demand response
1811   
1812  demand(P,T,Z)..
1813                                          demand_new_res(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_OPTIMAL(P,T,Z)/PRICE_REF(P,H,Z))*(price_unit(P,H,Z)-PRICE_REF(P,H,Z)))
1814  #                                       demand_new_res(P,T,Z) =e= DEM_REF_RES(P,T,Z)
1815                                          ;
1816   
1817  price_clone(P,T,Z)..
1818                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1819  #                                       price_unit_clone(P,T,Z) =e= PRICE_REF(P,H,Z)
1820                                          ;
1821   
1822  totdemand(P,Z)..
1823                                          sum(T,DEM_OPTIMAL(P,T,Z)) =l= sum(T,demand_new_res(P,T,Z))
1824  #                                       sum(T,DEM_REF_RES(P,T,Z)+eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))) =l= sum(T,demand_new_res(P,T,Z))
1825                                          ;
1826   
1827  ##################################
1828   
1829  # reserve allocation
1830   
1831  qresdrup(Y,P,T,Z)..
1832                      sum(RU,res_DR(Y,P,T,Z,RU)) =l= (demand_new_res(P,T,Z) - DEM_RES_MIN(P,T,Z))*FACTOR_RES_DR
1833                      ;
1834   
1835  qresdrdo(Y,P,T,Z)..
1836                      sum(RD,res_DR(Y,P,T,Z,RD)) =l= (DEM_RES_MAX(P,T,Z) - demand_new_res(P,T,Z))*FACTOR_RES_DR
1837                      ;
1838   
1839  # residential consumption upper and lower limit
1840   
1841  demand_max(P,T,Z)..
1842                      demand_new_res(P,T,Z) =l= DEM_RES_MAX(P,T,Z)
1843                      ;
1844   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1845  demand_min(P,T,Z)..
1846                      demand_new_res(P,T,Z) =g= DEM_RES_MIN(P,T,Z)
1847                      ;
1848   
1849  # auxilliary
1850   
1851  demand_clone(P,H,Z)..
1852                                          demand_new_res_clone(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*DIAG(T,H))
1853                                          ;
1854   
1855   
1856  surplusdemand(P,T,Z)..
1857                                          surplus(P,T,Z) =e= eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))
1858                                          ;
1859   
1860  #price(P,H,Z)..
1861  #                                       (price_unit(P,H,Z) - PRICE_REF(P,H,Z))*sum(H,ELAST(T,H)*(DEM_REF_RES(P,T,Z)/PRICE_REF(P,H,Z))) =e= (demand_new_res(P,T,Z)-DEM_REF_RES(P,T,Z))
1862  #                                       ;
1863   
1864  shiftedaway(P,H,Z)..
1865                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1866                                          ;
1867   
1868  shiftedawaytotal(P,Z)..
1869                                          shiftaway_total(P,Z) =e= sum(H,shift_up(P,H,Z)-shift_down(P,H,Z))
1870                                          ;
1871   
1872  shiftedforward(P,H,Z)..
1873                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1874                                          ;
1875   
1876  shiftedforwardtotal(P,Z)..
1877  #                                       shiftforwards_total(P,Z) =e= sum(H,shiftforwards(P,H,Z))
1878                                          shiftforwards_total(P,Z) =e= sum(H,front_up(P,H,Z)-back_down(P,H,Z))
1879                                          ;
1880   
1881  shiftedbackward(P,H,Z)..
1882                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1883                                          ;
1884   
1885  shiftedbackwardtotal(P,Z)..
1886  #                                       shiftbackwards_total(P,Z) =e= sum(H,shiftbackwards(P,H,Z))
1887                                          shiftbackwards_total(P,Z) =e= sum(H,back_up(P,H,Z)-front_down(P,H,Z))
1888                                          ;
1889   
1890  shiftconstraint_frame_1(P,H,Z)..
1891                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1892                                          ;
1893   
1894  shiftconstraint_frame_2(P,H,Z)..
1895                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMAX(H,T)) =g= sum(T,demand_new_res(P,T,Z)*SHIFTMIN(H,T))
1896                                          ;
1897   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1898  shiftconstraint1(P,H,Z)..
1899                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1900                                          ;
1901   
1902  shiftconstraint2(P,H,Z)..
1903                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
1904                                          ;
1905   
1906  priceconstraint1(P,H,Z)..
1907                                          price_unit(P,H,Z) =l= PRICE_REF(P,H,Z)+PRICE_REF(P,H,Z)*LIMITPRICE
1908                                          ;
1909   
1910  priceconstraint2(P,H,Z)..
1911                                          price_unit(P,H,Z) =g= PRICE_REF(P,H,Z)-PRICE_REF(P,H,Z)*LIMITPRICE
1912                                          ;
1913   
1914  demlimitunder(P,T,Z)..
1915                                          DEM_OPTIMAL(P,T,Z) - LIMITDEM =l= demand_new_res(P,T,Z)
1916                                          ;
1917   
1918  demlimitupper(P,T,Z)..
1919                                          DEM_OPTIMAL(P,T,Z) + LIMITDEM =g= demand_new_res(P,T,Z)
1920                                          ;
1921   
1922   
1923  #priceconstraint3(P,Z)..
1924  #                                       sum(T,price_unit(P,T,Z))/card(T) =e= PRICE_REF(P,H,Z)
1925  #                                       ;
1926   
1927   
1928  qinnerframe(P,H,Z)..
1929                                          innerframe(P,H,Z) =e= sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T))
1930                                          ;
1931   
1932  qouterframe(P,H,Z)..
1933                                          outerframe(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1934                                          ;
1935   
1936  fixedcost(Z)..
1937                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1938                                          ;
1939   
1940  variablecost(P,Z)..
1941                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1942                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1943                                          ;
1944   
1945  cost(Z)..
1946                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
1947                                          ;
1948   
1949  ####################################
1950  # get downwards en upward numbers for front and back
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1951  ####################################
1952   
1953  front_d_1(P,H,Z)..
1954                                          front_down(P,H,Z) =l= shiftforwards(P,H,Z)
1955                                          ;
1956   
1957  front_d_2(P,H,Z)..
1958                                          front_down(P,H,Z) =l= 0
1959                                          ;
1960   
1961  front_u_1(P,H,Z)..
1962                                          front_up(P,H,Z) =g= shiftforwards(P,H,Z)
1963                                          ;
1964   
1965  front_u_2(P,H,Z)..
1966                                          front_up(P,H,Z) =g= 0
1967                                          ;
1968   
1969  back_d_1(P,H,Z)..
1970                                          back_down(P,H,Z) =l= shiftbackwards(P,H,Z)
1971                                          ;
1972   
1973  back_d_2(P,H,Z)..
1974                                          back_down(P,H,Z) =l= 0
1975                                          ;
1976   
1977  back_u_1(P,H,Z)..
1978                                          back_up(P,H,Z) =g= shiftbackwards(P,H,Z)
1979                                          ;
1980   
1981  back_u_2(P,H,Z)..
1982                                          back_up(P,H,Z) =g= 0
1983                                          ;
1984   
1985  shift_d_1(P,H,Z)..
1986                                          shift_down(P,H,Z) =l= shiftaway(P,H,Z)
1987                                          ;
1988   
1989  shift_d_2(P,H,Z)..
1990                                          shift_down(P,H,Z) =l= 0
1991                                          ;
1992   
1993  shift_u_1(P,H,Z)..
1994                                          shift_up(P,H,Z) =g= shiftaway(P,H,Z)
1995                                          ;
1996   
1997  shift_u_2(P,H,Z)..
1998                                          shift_up(P,H,Z) =g= 0
1999                                          ;
2000   
2001  # things that have to do with compensqtion mqtrix
2002  ###################################################
2003   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2004  shiftedfi(P,H,Z)..
2005                      shiftfi(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2006                      ;
2007   
2008  shiftedbi(P,H,Z)..
2009                      shiftbi(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2010                      ;
2011   
2012  shiftedfc(P,H,Z)..
2013                      shiftfc(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2014                      ;
2015   
2016  shiftedbc(P,H,Z)..
2017                      shiftbc(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2018                      ;
2019   
2020   
2021  MODEL GOA GOA model /
2022   
2023  #-------Objective function-----------------------------------------------------#
2024                  qobj
2025   
2026  #-------System constraints-----------------------------------------------------#
2027                  qbalance
2028   
2029                  qresprod
2030                  qco2lim
2031   
2032                  qresendomin
2033                  qresendomax
2034                  qres
2035   
2036                  #qgendisp
2037                  #qgendisppeak
2038   
2039                  qco2
2040                  qlcg
2041   
2042  #-------Generation technologies------------------------------------------------#
2043                  qpotcapmin
2044  #               qpotcapmax
2045  #               qpotgenmin
2046  #               qpotgenmax
2047   
2048  #--Conventional generation technologies--#
2049                  qresgcu
2050                  qresgcd
2051   
2052                  qn
2053                  qnmax
2054                  qnsu
2055                  qnsd
2056   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 41
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2057                  qgen
2058                  qgenmin
2059                  qgenmax
2060   
2061                  qrudyn
2062                  qrucap
2063                  qrddyn
2064                  qrdcap
2065                  qsumin
2066                  qsumax
2067                  qsdmin
2068                  qsdmax
2069   
2070                  qrufu
2071                  qruau
2072                  qrumus
2073                  qrdad
2074                  qrdmd
2075                  qrunsmin
2076                  qrunsmax
2077                  qrdsdmin
2078                  qrdsdmax
2079   
2080  #--Intermittent renewable generation technologies--#
2081                  qresgru
2082   
2083                  qgenr
2084   
2085                  qresgrdr
2086                  qresgrdg
2087   
2088  #-------Storage technologies---------------------------------------------------#
2089  #--General constraints--#
2090                  qress
2091                  qspotcapmin
2092                  qspotcapmax
2093   
2094                  qe
2095                  qemax
2096                  qef
2097                  qefmin
2098                  qefmax
2099                  qefstart
2100                  qel
2101                  qelmin
2102                  qelmax
2103                  qelstart
2104   
2105                  qdurmin
2106                  qdurmax
2107   
2108  #--Short-term storage--#
2109                  qssc
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 42
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2110                  qsscru
2111                  qsscrd
2112   
2113                  qssd
2114                  qssdru
2115                  qssdrd
2116   
2117  #--Mid and long-term storage--#
2118                  qresscu
2119                  qresscd
2120                  qressdu
2121                  qressdd
2122   
2123                  qnc
2124                  qncmax
2125                  qncsu
2126                  qncsd
2127   
2128                  qsmlc
2129                  qsmlcmin
2130                  qsmlcmax
2131   
2132                  qcrudyn
2133                  qcrucap
2134                  qcrddyn
2135                  qcrdcap
2136                  qcsumin
2137                  qcsumax
2138                  qcsdmin
2139                  qcsdmax
2140   
2141                  qcruad
2142                  qcrumd
2143                  qcrdfu
2144                  qcrdau
2145                  qcrdmus
2146                  qcrunsmin
2147                  qcrunsmax
2148                  qcrdsdmin
2149                  qcrdsdmax
2150   
2151  #--Mid-term storage--#
2152                  qcapdeqcapc
2153   
2154                  qnd
2155                  qndmax
2156                  qndsu
2157                  qndsd
2158   
2159                  qsmd
2160                  qsmdmin
2161                  qsmdmax
2162   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 43
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2163                  qdrudyn
2164                  qdrucap
2165                  qdrddyn
2166                  qdrdcap
2167                  qdsumin
2168                  qdsumax
2169                  qdsdmin
2170                  qdsdmax
2171   
2172                  qdrufu
2173                  qdruau
2174                  qdrumus
2175                  qdrdad
2176                  qdrdmd
2177                  qdrunsmin
2178                  qdrunsmax
2179                  qdrdsdmin
2180                  qdrdsdmax
2181   
2182  #--Long-term storage--#
2183                  qslressd
2184   
2185                  qgase
2186                  qgasemax
2187                  qgasef
2188                  qgasefmax
2189                  qgasefstart
2190                  qgasel
2191                  qgaselmax
2192                  qgaselstart
2193   
2194                  qgasc
2195   
2196                  qgasd
2197   
2198                  qgasuse
2199                  qgasusegen
2200   
2201  #-- Price-elasticity--#
2202   
2203          #always included
2204                  totdemand2
2205                  refdemand
2206                  sum_demand
2207   
2208                  #always included, change equation
2209                  demand
2210  #               price_clone
2211   
2212                  #reserve allocation of flex demand
2213                  qresdrup
2214                  qresdrdo
2215   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 44
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2216                  ###########
2217                  ## Only for demand resposne
2218                  ###########
2219   
2220                  #limits shiftaway
2221  #               shiftconstraint1
2222  #               shiftconstraint2
2223   
2224                  #limits demand difference
2225  #               demlimitunder
2226  #               demlimitupper
2227   
2228                  #keeps demand between boundaries
2229          demand_max
2230          demand_min
2231   
2232  #               price
2233  #               demand_clone
2234   
2235  #               surplusdemand
2236   
2237                  shiftedaway
2238  #               shiftedforward
2239  #               shiftedbackward
2240   
2241  #               shiftedawaytotal
2242  #               shiftedforwardtotal
2243  #               shiftedbackwardtotal
2244   
2245                  priceconstraint1
2246                  priceconstraint2
2247  #               priceconstraint3
2248   
2249          ##########
2250          # include when working with moving frames, and set in wout_program -> factor back to 1
2251  #               shiftconstraint_frame_1
2252  #               shiftconstraint_frame_2
2253  #               totdemand
2254   
2255  #               qinnerframe
2256  #               qouterframe
2257   
2258  #               revenue
2259  #               fixedcost
2260  #               variablecost
2261  #               cost
2262   
2263  #               front_d_1
2264  #               front_d_2
2265  #               front_u_1
2266  #               front_u_2
2267  #
2268  #               back_d_1
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 45
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2269  #               back_d_2
2270  #               back_u_1
2271  #               back_u_2
2272  #
2273  #               shift_u_1
2274  #               shift_u_2
2275  #               shift_d_1
2276  #               shift_d_2
2277  #
2278          shiftedbc
2279          shiftedfc
2280          shiftedbi
2281          shiftedfi
2282   
2283  /;
2284   
2285   
2286   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME taking OF TYPE PARAM
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 46
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.218 SECONDS      5 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/22/16 21:51:16 Page 47
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.032 SECONDS      8 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
Output     C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.lst
Save       C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
