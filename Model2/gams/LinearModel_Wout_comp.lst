GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(P,T,H)                            Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  COMPENSATE(P,H)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_NEW(P,T,H)        the new calculated elasticity matrix, taking into account the compensation factor
 337  DEM_REF_RES(P,T,Z)      amount of reference residential demand before DR
 338  DEM_NON_RES(P,T,Z)      amount of non residential demand
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 339  ELAST_COMP(P,T,H)       compensation PEM
 340  RATIO_H(P,H)            inbalance ratio
 341  LINEARPEM(T,H)          compensation PEM linear
 342  OWNELAST(T,H)           compensation PEM elast
 343   
 344  # data from DR model
 345  DEM_RES_MAX(P,T,Z)        max residential demand
 346  DEM_RES_MIN(P,T,Z)        min residential demand
 347  DEM_OPTIMAL(P,T,Z)        anchor point demand
 348  PRICE_REF(P,H,Z)          anchor point price
 349  DEM_RES_FP(P,T,Z)         prospected demand under flat price
 350   
 351  # factor of reserve allocation flexible damand
 352  FACTOR_RES_DR             factor that determines which part of the flexible band is used for flexibility
 353  ;
 354   
--- LOAD  G_DATA = 39:G_DATA
 355  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 356  $LOAD S_DATA
--- LOAD  RG = 41:RG
 357  $LOAD RG
--- LOAD  RSC = 42:RSC
 358  $LOAD RSC
--- LOAD  RSD = 43:RSD
 359  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 360  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 361  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 362  $LOAD REL_T
--- LOAD  W = 48:W
 363  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 364  $LOAD POL_TARGETS
 365  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 366  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 367  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 368  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 369  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 370  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 371  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 372  $LOAD SHIFTMIN
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/23/16 16:36:42 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  SHIFTMAX = 58:SHIFTMAX
 373  $LOAD SHIFTMAX
--- LOAD  COMPENSATE = 59:COMPENSATE
 374  $LOAD COMPENSATE
--- LOAD  DEM_REF_RES = 61:DEM_REF_RES
--- LOAD  DEM_NON_RES = 60:DEM_NON_RES
 375  $LOAD DEM_REF_RES DEM_NON_RES
--- LOAD  RATIO_H = 62:RATIO_H
 376  $LOAD RATIO_H
--- LOAD  LINEARPEM = 63:LINEARPEM
--- LOAD  OWNELAST = 64:OWNELAST
 377  $LOAD LINEARPEM OWNELAST
--- LOAD  DEM_OPTIMAL = 67:DEM_OPTIMAL
--- LOAD  DEM_RES_MIN = 66:DEM_RES_MIN
--- LOAD  DEM_RES_MAX = 65:DEM_RES_MAX
--- LOAD  DEM_RES_FP = 69:DEM_RES_FP
--- LOAD  PRICE_REF = 68:PRICE_REF
 378  $LOAD DEM_OPTIMAL DEM_RES_MIN DEM_RES_MAX DEM_RES_FP PRICE_REF
 379   
 380  #C_GAS = 25.6643460843943;
 381  C_GAS = 25.6643460843943*2;
 382  T_MARKET = 1;
 383  EGCAPEX = 2000000000000000000000000;
 384  E_LP = 7100000;
 385  P_REF = 55.5;
 386  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 387  LIMITPRICE = 1.5;
 388  LIMITDEM = 1500;
 389  LIMITSHIFT = 3000;
 390  LENGTH_P = card(T);
 391  FACTOR_RES_DR = 1;
 392   
 393  ############################
 394  ## CHOOSE STARTING DEMAND CURVE (Do not use!!!!!!!!)
 395  ###############
 396  #PRICE_REF(P,H,Z) = P_REF;
 397  #DEM_OPTIMAL(P,T,Z) = DEM_RES_FP(P,T,Z);
 398   
 399   
 400  ## flat compensation PEM
 401  ELAST_COMP(P,T,H) = (TRI_LOW(T,H)+TRI_UP(T,H))*RATIO_H(P,H);
 402  ## linear compensation PEM
 403  #ELAST_COMP(P,T,H) = (LINEARPEM(T,H))*RATIO_H(P,H);
 404  ## Elastic compensation PEM
 405  #ELAST_COMP(P,T,H) = (OWNELAST(T,H))*RATIO_H(P,H);
 406  ## Moving frames compensation PEM = 0
 407  #ELAST_COMP(P,T,H) = 0;
 408  ELAST_NEW(P,T,H) = ELAST(P,T,H)+ELAST_COMP(P,T,H);
 409   
 410  eff_factor_earlier = 0.0;
 411  eff_factor_later = 0.0;
 412   
 413  VARIABLES
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 414  obj                     Value of objective function
 415   
 416  #######################################################
 417   
 418  price_unit(P,H,Z)                               Residential price signal for the electricity
 419  price_unit_clone(P,T,Z)
 420   
 421  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 422  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 423  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 424  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 425  shiftaway(P,H,Z)                                Shift away from an hour
 426  shiftaway_total(P,Z)                    Shift away from a period
 427   
 428  shiftfi(P,H,Z)
 429  shiftbi(P,H,Z)
 430  shifta(P,H,Z)
 431  shiftfc(P,H,Z)
 432  shiftbc(P,H,Z)
 433   
 434  front_up(P,H,Z)
 435  front_down(P,H,Z)
 436  back_up(P,H,Z)
 437  back_down(P,H,Z)
 438  shift_up(P,H,Z)
 439  shift_down(P,H,Z)
 440  ;
 441   
 442  POSITIVE VARIABLES
 443  #######################################################
 444   
 445  demand_new_res(P,T,Z)           Residential demand after price signal applied
 446  demand_new_res_clone(P,H,Z)
 447  demand_unit(P,T,Z)                              demand of the electricity (sum residential & non-residential)
 448  demand_unit_clone(P,H,Z)
 449  demand_tot(P,Z)                                 total demand, based on demand_unit
 450  surplus(P,T,Z)
 451  demand_ref(P,T,Z)                               the reference demand with flat price
 452  innerframe(P,H,Z)
 453  outerframe(P,H,Z)
 454   
 455  totalrevenue(P,Z)                               the product of demand and price
 456  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 457  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 458  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 459   
 460  #######################################################
 461   
 462  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 463  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 464  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 465  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 466  eg_cap                                          Gas storage capacity
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 467   
 468  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 469  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 470   
 471  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 472  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 473  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 474  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 475  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 476  eg(Y,P,C)                                       Energy content of gas storage at period P
 477  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 478  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 479  pg_c(Y,P,T,C)                           Charging of gas storage
 480  pg_d(Y,P,T,C)                           Discharging of gas storage
 481   
 482  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 483  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 484  res_DR(Y,P,T,Z,R)             Reserve allocation of demand response for reserve category R
 485   
 486  load_shedding(Y,P,T,Z)          Load shedding
 487  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 488  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 489  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 490   
 491  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 492  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 493  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 494   
 495  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 496  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 497  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 498  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 499  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 500   
 501  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 502  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 503  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 504  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 505   
 506  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 507   
 508  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 509  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 510  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 511  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 512  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 513  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 514  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 515  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 516   
 517  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 518  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 519  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 520  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 521  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 522   
 523  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 524  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 525  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 526  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 527   
 528  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 529  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 530  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 531  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 532  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 533   
 534  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 535  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 536  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 537  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 538   
 539  pg_import(Y,P,T,C)                      Import of gas
 540  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 541  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 542   
 543  ;
 544   
 545  EQUATIONS
 546  #--Objective function--#
 547  qobj
 548   
 549  #--System constraints--#
 550  qbalance(Y,P,T,Z)
 551  qresprod(Y,C)
 552  qco2lim(Y,C)
 553  qresendomin(Y,P,T,C,R,GRI)
 554  qresendomax(Y,P,T,C,R,GRI)
 555  qres(Y,P,T,C,R)
 556  qgendisp(Y,P,T,C)
 557  qgendisppeak(Y,C)
 558  qco2(Y,C,G)
 559  qlcg(Y,C,G)
 560   
 561  #--Generation technologies--#
 562  qpotcapmin(Y,C,G)
 563  #qpotcapmax(Y,C,G)
 564  #qpotgenmin(Y,C,G)
 565  #qpotgenmax(Y,C,G)
 566   
 567  qresgcu(Y,P,T,Z,RU,GD)
 568  qresgcd(Y,P,T,Z,RD,GD)
 569  qn(Y,P,T,Z,GD)
 570  qnmax(Y,P,T,Z,GD)
 571  qnsu(Y,P,T,Z,GD)
 572  qnsd(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 573  qgen(Y,P,T,Z,GD)
 574  qgenmin(Y,P,T,Z,GD)
 575  qgenmax(Y,P,T,Z,GD)
 576  qrudyn(Y,P,T,Z,GD)
 577  qrucap(Y,P,T,Z,GD)
 578  qrddyn(Y,P,T,Z,GD)
 579  qrdcap(Y,P,T,Z,GD)
 580  qsumin(Y,P,T,Z,GD)
 581  qsumax(Y,P,T,Z,GD)
 582  qsdmin(Y,P,T,Z,GD)
 583  qsdmax(Y,P,T,Z,GD)
 584  qrufu(Y,P,T,Z,GD)
 585  qruau(Y,P,T,Z,GD)
 586  qrumus(Y,P,T,Z,GD)
 587  qrdad(Y,P,T,Z,GD)
 588  qrdmd(Y,P,T,Z,GD)
 589  qrunsmin(Y,P,T,Z,RU,GD)
 590  qrunsmax(Y,P,T,Z,RU,GD)
 591  qrdsdmin(Y,P,T,Z,RD,GD)
 592  qrdsdmax(Y,P,T,Z,RD,GD)
 593   
 594  qresgru(Y,P,T,Z,RU,GRI)
 595  qgenr(Y,P,T,Z,GRI)
 596  qresgrdr(Y,P,T,Z,GRI)
 597  qresgrdg(Y,P,T,Z,GRI)
 598   
 599  #--Storage technologies--#
 600  qress(Y,P,T,Z,R,S)
 601  qspotcapmin(Y,C,S)
 602  qspotcapmax(Y,C,S)
 603   
 604  qe(Y,P,Z,S)
 605  qemax(Y,P,Z,S)
 606  qef(Y,P,T,Z,S)
 607  qefmin(Y,P,T,Z,S)
 608  qefmax(Y,P,T,Z,S)
 609  qefstart(Y,P,T,Z,S)
 610  qel(Y,P,T,Z,S)
 611  qelmin(Y,P,T,Z,S)
 612  qelmax(Y,P,T,Z,S)
 613  qelstart(Y,P,T,Z,S)
 614  qdurmin(Y,Z,S)
 615  qdurmax(Y,Z,S)
 616   
 617  qssc(Y,P,T,Z,SS)
 618  qsscru(Y,P,T,Z,SS)
 619  qsscrd(Y,P,T,Z,SS)
 620  qssd(Y,P,T,Z,SS)
 621  qssdru(Y,P,T,Z,SS)
 622  qssdrd(Y,P,T,Z,SS)
 623   
 624  qresscu(Y,P,T,Z,RU,SML)
 625  qresscd(Y,P,T,Z,RD,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 626  qressdu(Y,P,T,Z,RU,SM)
 627  qressdd(Y,P,T,Z,RD,SM)
 628  qnc(Y,P,T,Z,SML)
 629  qncmax(Y,P,T,Z,SML)
 630  qncsu(Y,P,T,Z,SML)
 631  qncsd(Y,P,T,Z,SML)
 632  qsmlc(Y,P,T,Z,SML)
 633  qsmlcmin(Y,P,T,Z,SML)
 634  qsmlcmax(Y,P,T,Z,SML)
 635  qcrudyn(Y,P,T,Z,SML)
 636  qcrucap(Y,P,T,Z,SML)
 637  qcrddyn(Y,P,T,Z,SML)
 638  qcrdcap(Y,P,T,Z,SML)
 639  qcsumin(Y,P,T,Z,SML)
 640  qcsumax(Y,P,T,Z,SML)
 641  qcsdmin(Y,P,T,Z,SML)
 642  qcsdmax(Y,P,T,Z,SML)
 643  qcruad(Y,P,T,Z,SML)
 644  qcrumd(Y,P,T,Z,SML)
 645  qcrdfu(Y,P,T,Z,SML)
 646  qcrdau(Y,P,T,Z,SML)
 647  qcrdmus(Y,P,T,Z,SML)
 648  qcrunsmin(Y,P,T,Z,RD,SML)
 649  qcrunsmax(Y,P,T,Z,RD,SML)
 650  qcrdsdmin(Y,P,T,Z,RU,SML)
 651  qcrdsdmax(Y,P,T,Z,RU,SML)
 652   
 653  qcapdeqcapc(Y,Z,SM)
 654  qnd(Y,P,T,Z,SM)
 655  qndmax(Y,P,T,Z,SM)
 656  qndsu(Y,P,T,Z,SM)
 657  qndsd(Y,P,T,Z,SM)
 658  qsmd(Y,P,T,Z,SM)
 659  qsmdmin(Y,P,T,Z,SM)
 660  qsmdmax(Y,P,T,Z,SM)
 661  qdrudyn(Y,P,T,Z,SM)
 662  qdrucap(Y,P,T,Z,SM)
 663  qdrddyn(Y,P,T,Z,SM)
 664  qdrdcap(Y,P,T,Z,SM)
 665  qdsumin(Y,P,T,Z,SM)
 666  qdsumax(Y,P,T,Z,SM)
 667  qdsdmin(Y,P,T,Z,SM)
 668  qdsdmax(Y,P,T,Z,SM)
 669  qdrufu(Y,P,T,Z,SM)
 670  qdruau(Y,P,T,Z,SM)
 671  qdrumus(Y,P,T,Z,SM)
 672  qdrdad(Y,P,T,Z,SM)
 673  qdrdmd(Y,P,T,Z,SM)
 674  qdrunsmin(Y,P,T,Z,RU,SM)
 675  qdrunsmax(Y,P,T,Z,RU,SM)
 676  qdrdsdmin(Y,P,T,Z,RD,SM)
 677  qdrdsdmax(Y,P,T,Z,RD,SM)
 678   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 679  qslressd(Y,P,T,Z,R,SL)
 680  qgase(Y,P,C)
 681  qgasemax(Y,P,C)
 682  qgasef(Y,P,T,C)
 683  qgasefmax(Y,P,T,C)
 684  qgasefstart(Y,P,T,C)
 685  qgasel(Y,P,T,C)
 686  qgaselmax(Y,P,T,C)
 687  qgaselstart(Y,P,T,C)
 688  qgasc(Y,P,T,C)
 689  qgasd(Y,P,T,C)
 690  qgasuse(Y,C)
 691  qgasusegen(Y,P,T,Z,GCG)
 692   
 693  ###############################
 694  #price(P,H,Z)
 695  price_clone(P,T,Z)
 696  demand(P,T,Z)
 697  demand_clone(P,H,Z)
 698   
 699  #data DR model
 700  demand_max(P,T,Z)
 701  demand_min(P,T,Z)
 702   
 703  # reserve allocation
 704  qresdrup(Y,P,T,Z)
 705  qresdrdo(Y,P,T,Z)
 706   
 707  sum_demand(P,T,Z)
 708  totdemand(P,Z)
 709  surplusdemand(P,T,Z)
 710  totdemand2(P,Z)
 711  refdemand(P,T,Z)
 712  refdemand2(Z)
 713  priceconstraint1(P,H,Z)
 714  priceconstraint2(P,H,Z)
 715  priceconstraint3(P,Z)
 716  shiftconstraint_frame_1(P,H,Z)
 717  shiftconstraint_frame_2(P,H,Z)
 718  shiftconstraint1(P,H,Z)
 719  shiftconstraint2(P,H,Z)
 720  shiftedforward(P,H,Z)
 721  shiftedforwardtotal(P,Z)
 722  shiftedbackward(P,H,Z)
 723  shiftedbackwardtotal(P,Z)
 724  shiftedaway(P,H,Z)
 725  shiftedawaytotal(P,Z)
 726   
 727  shiftedfi(P,H,Z)
 728  shiftedbi(P,H,Z)
 729  shiftedfc(P,H,Z)
 730  shiftedbc(P,H,Z)
 731   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 732  front_d_1(P,H,Z)
 733  front_d_2(P,H,Z)
 734  front_u_1(P,H,Z)
 735  front_u_2(P,H,Z)
 736   
 737  back_d_1(P,H,Z)
 738  back_d_2(P,H,Z)
 739  back_u_1(P,H,Z)
 740  back_u_2(P,H,Z)
 741   
 742  shift_d_1(P,H,Z)
 743  shift_d_2(P,H,Z)
 744  shift_u_1(P,H,Z)
 745  shift_u_2(P,H,Z)
 746   
 747  qinnerframe(P,H,Z)
 748  qouterframe(P,H,Z)
 749   
 750  revenue(P,Z)
 751  fixedcost(Z)
 752  variablecost(P,Z)
 753  cost(Z)
 754   
 755  demlimitunder(P,T,Z)
 756  demlimitupper(P,T,Z)
 757  ;
 758   
 759  #-----######################---------------------------------------------------#
 760  #-----# Objective function #---------------------------------------------------#
 761  #-----######################---------------------------------------------------#
 762  qobj..              obj
 763                                          =e=
 764                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 765                                                  + sum((Y,Z,S),      (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 766  #                                                + sum((Y,Z,S),      (S_DATA(S,'C_P_D_INV')*1000)*p_cap_d(Y,Z,S))
 767  #                                                + sum((Y,Z,S),      (S_DATA(S,'C_E')*1000)*e_cap(Y,Z,S))
 768                                                  +
 769                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 770                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 771   
 772                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 773                                                  + sum((Y,P,T,Z,GRI),    W(P)*(0)*curt(Y,P,T,Z,GRI) + W(P)*(1000000)*curt_dummy(Y,P,T,Z,GRI))
 774                          + sum((Y,P,T,Z),                W(P)*(10000)*load_shedding(Y,P,T,Z))
 775                                                  )
 776                                                  *(168/card(T));
 777                                                  ;
 778   
 779   
 780   
 781   
 782  #-----######################---------------------------------------------------#
 783  #-----# System constraints #---------------------------------------------------#
 784  #-----######################---------------------------------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 785   
 786  #--System balance--#
 787   
 788  # balance with demand response
 789  qbalance(Y,P,T,Z)..
 790                                  sum(G, gen(Y,P,T,Z,G))
 791                                  + sum(SSM, p_d(Y,P,T,Z,SSM))
 792                                          =e=
 793                                                  demand_unit(P,T,Z)
 794                                                  - load_shedding(Y,P,T,Z)
 795                                                  + sum(S, p_c(Y,P,T,Z,S))
 796                                                  ;
 797   
 798  #balance without demand response
 799  #qbalance(Y,P,T,Z)..
 800  #                               sum(G, gen(Y,P,T,Z,G))
 801  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 802  #                                       =e=
 803  #                                               DEM_T(P,T,Z)
 804  #                                       #       - load_shedding(Y,P,T,Z)
 805  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 806  #                                               ;
 807  #DEM(Y,Z)*DEM_T(T,Z);
 808   
 809  #--Renewable target--#
 810   
 811  #qresprod(Y,C)..
 812  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 813  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 814  #                                       =l=
 815  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 816  #                                               ;
 817   
 818  qresprod(Y,C)..
 819                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 820                                          =g=
 821                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 822                                                  ;
 823   
 824  qco2lim(Y,C)..
 825  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 826  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 827                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 828                                          =l=
 829                                                  50000000*0.4
 830                                                  ;
 831   
 832  #--Reserve requirements--#
 833   
 834  qresendomin(Y,P,T,C,R,GRI)..
 835                                          q_endo(Y,P,T,C,R,GRI)
 836                                          =g=
 837                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 838                                                  ;
 839   
 840  qresendomax(Y,P,T,C,R,GRI)..
 841                                          q_endo(Y,P,T,C,R,GRI)
 842                                          =l=
 843                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 844                                                  ;
 845   
 846   
 847  qres(Y,P,T,C,R)..
 848                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 849                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 850                                          + sum(Z $ C_Z(C,Z), res_DR(Y,P,T,Z,R))
 851                                          =e=
 852                                                  R_EXO(C,R)
 853                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 854                                                  ;
 855   
 856  #--Dispatchable capacity--#
 857   
 858  #TODO: wich demand is needed here?
 859  qgendisp(Y,P,T,C)..
 860                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 861                                          =g=
 862                                                  sum(Z $ C_Z(C,Z), demand_unit(P,T,Z))*0.20
 863                                                  ;
 864   
 865  qgendisppeak(Y,C)..
 866                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 867                                          =g=
 868                                                  10000*1.20
 869                                                  ;
 870   
 871  #--Emissions--#
 872   
 873  qco2(Y,C,G)..
 874                                          co2(Y,C,G)
 875                                          =e=
 876                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 877                                                  ;
 878   
 879  qlcg(Y,C,G)..
 880                                          lcg(Y,C,G)
 881                                          =e=
 882                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 883                                                  ;
 884   
 885   
 886  #-----###########################----------------------------------------------#
 887  #-----# Generation technologies #----------------------------------------------#
 888  #-----###########################----------------------------------------------#
 889   
 890  ##--Installed generation capacities--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 891   
 892  qpotcapmin(Y,C,G)..
 893                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 894                                          =g=
 895                                                  G_DATA(G,'CAP_MIN')
 896                                                  ;
 897   
 898  #qpotcapmax(Y,C,G)..
 899  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 900  #                                       =g=
 901  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 902  #                                               ;
 903  #
 904  #qpotgenmin(Y,C,G)..
 905  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 906  #                                       =g=
 907  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 908  #                                               ;
 909  #
 910  #qpotgenmax(Y,Z,G)..
 911  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 912  #                                       =g=
 913  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 914  #                                               ;
 915   
 916  #-------Dispatchable generation technologies-----------------------------------#
 917   
 918  #--Reserve allocation--#
 919   
 920  qresgcu(Y,P,T,Z,RU,GD)..
 921                                          res_g(Y,P,T,Z,RU,GD)
 922                                          =e=
 923                                                  res_g_s(Y,P,T,Z,RU,GD)
 924                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 925                                                  ;
 926   
 927  qresgcd(Y,P,T,Z,RD,GD)..
 928                                          res_g(Y,P,T,Z,RD,GD)
 929                                          =e=
 930                                                  res_g_s(Y,P,T,Z,RD,GD)
 931                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 932                                                  ;
 933   
 934  #--Clustering logical constraints--#
 935   
 936  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 937                                          n(Y,P,T+1,Z,GD)
 938                                          =e=
 939                                                  n(Y,P,T,Z,GD)
 940                                                  + n_su(Y,P,T,Z,GD)
 941                                                  - n_sd(Y,P,T,Z,GD)
 942                                                  ;
 943   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 944  qnmax(Y,P,T,Z,GD)..
 945                                          n(Y,P,T,Z,GD)
 946                                          =l=
 947                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 948                                                  ;
 949   
 950  qnsu(Y,P,T,Z,GD)..
 951                                          n_su(Y,P,T,Z,GD)
 952                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 953                                          =l=
 954                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 955                                                  - n(Y,P,T,Z,GD)
 956                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 957                                                  ;
 958   
 959  qnsd(Y,P,T,Z,GD)..
 960                                          n_sd(Y,P,T,Z,GD)
 961                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 962                                          =l=
 963                                                  n(Y,P,T,Z,GD)
 964                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 965                                                  ;
 966   
 967  #--Generation constraints--#
 968   
 969  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 970                      gen(Y,P,T+1,Z,GD)
 971                      =e=
 972                          gen(Y,P,T,Z,GD)
 973                          + ramp_up(Y,P,T,Z,GD)
 974                          - ramp_dn(Y,P,T,Z,GD)
 975                          + ramp_su(Y,P,T,Z,GD)
 976                          - ramp_sd(Y,P,T,Z,GD)
 977                          ;
 978   
 979  qgenmin(Y,P,T,Z,GD)..
 980                                          gen(Y,P,T,Z,GD)
 981                                          =g=
 982                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 983                                                  ;
 984   
 985  qgenmax(Y,P,T,Z,GD)..
 986                                          gen(Y,P,T,Z,GD)
 987                                          =l=
 988                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 989                                                  ;
 990                                                  #*G_DATA(G,'PM')/100;
 991   
 992  #--Ramping constraints--#
 993   
 994  qrudyn(Y,P,T,Z,GD)..
 995                      ramp_up(Y,P,T,Z,GD)
 996                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 997                      =l=
 998                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 999                          ;
1000   
1001  qrucap(Y,P,T,Z,GD)..
1002                      ramp_up(Y,P,T,Z,GD)
1003                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1004                      =l=
1005                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
1006                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
1007                          ;
1008   
1009  qrddyn(Y,P,T,Z,GD)..
1010                      ramp_dn(Y,P,T,Z,GD)
1011                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1012                      =l=
1013                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1014                          ;
1015   
1016  qrdcap(Y,P,T,Z,GD)..
1017                      ramp_dn(Y,P,T,Z,GD)
1018                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1019                      =l=
1020                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
1021                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
1022                          ;
1023   
1024  qsumin(Y,P,T,Z,GD)..
1025                                          ramp_su(Y,P,T,Z,GD)
1026                                          =g=
1027                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1028                                                  ;
1029   
1030  qsumax(Y,P,T,Z,GD)..
1031                                          ramp_su(Y,P,T,Z,GD)
1032                                          =l=
1033                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1034                                                  ;
1035   
1036  qsdmin(Y,P,T,Z,GD)..
1037                                          ramp_sd(Y,P,T,Z,GD)
1038                                          =g=
1039                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1040                                                  ;
1041   
1042  qsdmax(Y,P,T,Z,GD)..
1043                                          ramp_sd(Y,P,T,Z,GD)
1044                                          =l=
1045                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1046                                                  ;
1047   
1048  #--Reserve allocation constraints--#
1049   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1050  qrufu(Y,P,T,Z,GD)..
1051                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
1052                      =l=
1053                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
1054                          ;
1055   
1056  qruau(Y,P,T,Z,GD)..
1057                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
1058                      =l=
1059                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1060                          ;
1061   
1062  qrumus(Y,P,T,Z,GD)..
1063                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1064                      =l=
1065                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1066                          ;
1067   
1068  qrdad(Y,P,T,Z,GD)..
1069                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
1070                      =l=
1071                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1072                          ;
1073   
1074  qrdmd(Y,P,T,Z,GD)..
1075                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1076                      =l=
1077                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1078                          ;
1079   
1080  qrunsmin(Y,P,T,Z,RU,GD)..
1081                                          res_g_ns(Y,P,T,Z,RU,GD)
1082                                          =g=
1083                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
1084                                                  ;
1085   
1086  qrunsmax(Y,P,T,Z,RU,GD)..
1087                                          res_g_ns(Y,P,T,Z,RU,GD)
1088                                          =l=
1089                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
1090                                                  ;
1091   
1092  qrdsdmin(Y,P,T,Z,RD,GD)..
1093                                          res_g_sd(Y,P,T,Z,RD,GD)
1094                                          =g=
1095                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1096                                                  ;
1097   
1098  qrdsdmax(Y,P,T,Z,RD,GD)..
1099                                          res_g_sd(Y,P,T,Z,RD,GD)
1100                                          =l=
1101                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1102                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1103   
1104  #-------Intermittent renewable generation technologies-------------------------#
1105   
1106  #--Reserve allocation--#
1107   
1108  qresgru(Y,P,T,Z,RU,GRI)..
1109                                          res_g(Y,P,T,Z,RU,GRI)
1110                                          =e=
1111                                                  0
1112                                                  ;
1113   
1114  #--Output and curtailment constraint--#
1115   
1116  qgenr(Y,P,T,Z,GRI)..
1117                      gen(Y,P,T,Z,GRI)
1118                      + curt(Y,P,T,Z,GRI)
1119                      + curt_dummy(Y,P,T,Z,GRI)
1120                      =e=
1121                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1122                          ;
1123   
1124  #--Reserve allocation constraints--#
1125   
1126  qresgrdr(Y,P,T,Z,GRI)..
1127                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1128                                          =l=
1129                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1130                                                  ;
1131   
1132  qresgrdg(Y,P,T,Z,GRI)..
1133                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1134                                          =l=
1135                                                  gen(Y,P,T,Z,GRI)
1136                                                  ;
1137   
1138  #-----########################-------------------------------------------------#
1139  #-----# Storage technologies #-------------------------------------------------#
1140  #-----########################-------------------------------------------------#
1141   
1142  #-------General constraints----------------------------------------------------#
1143   
1144  #--Reserve allocation--#
1145   
1146  qress(Y,P,T,Z,R,S)..
1147                                          res_s(Y,P,T,Z,R,S)
1148                                          =e=
1149                                                  res_s_c(Y,P,T,Z,R,S)
1150                                                  + res_s_d(Y,P,T,Z,R,S)
1151                                                  ;
1152   
1153  #--Installed capacities--#
1154   
1155  qspotcapmin(Y,C,S)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1156                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1157                                          =g=
1158                                                  S_DATA(S,'CAP_MIN')
1159                                                  ;
1160   
1161  qspotcapmax(Y,C,S)..
1162                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1163                                          =l=
1164                                                  S_DATA(S,'CAP_MAX')
1165                                                  ;
1166   
1167  #-------Short- and mid-term storage--------------------------------------------#
1168   
1169  #--Energy constraints--#
1170   
1171  qe(Y,P,Z,SSM)..
1172                                          e(Y,P++1,Z,SSM)
1173                                          =e=
1174                                                  e(Y,P,Z,SSM)
1175                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1176                                                  ;
1177   
1178  qemax(Y,P,Z,SSM)..
1179                                          e(Y,P,Z,SSM)
1180                                          =l=
1181                                                  e_cap(Y,Z,SSM)
1182                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1183                                                  ;
1184   
1185  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1186                                          e_f(Y,P,T,Z,SSM)
1187                                          =e=
1188                                                  e(Y,P,Z,SSM)
1189                                                  ;
1190   
1191  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1192                                          e_f(Y,P,T+1,Z,SSM)
1193                                          =e=
1194                                                  e_f(Y,P,T,Z,SSM)
1195                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1196                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1197                                                  ;
1198   
1199  qefmin(Y,P,T,Z,SSM)..
1200                                          e_f(Y,P,T,Z,SSM)
1201                                          =g=
1202                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1203                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1204                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1205                                                  ;
1206  qefmax(Y,P,T,Z,SSM)..
1207                                          e_f(Y,P,T,Z,SSM)
1208                                          =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1209                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1210                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1211                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1212                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1213                                                  ;
1214   
1215  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1216                                          e_l(Y,P,T,Z,SSM)
1217                                          =e=
1218                                                  e(Y,P,Z,SSM)
1219                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1220                                                  ;
1221   
1222  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1223                                          e_l(Y,P,T+1,Z,SSM)
1224                                          =e=
1225                                                  e_l(Y,P,T,Z,SSM)
1226                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1227                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1228                                                  ;
1229   
1230  qelmin(Y,P,T,Z,SSM)..
1231                                          e_l(Y,P,T,Z,SSM)
1232                                          =g=
1233                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1234                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1235                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1236                                                  ;
1237  qelmax(Y,P,T,Z,SSM)..
1238                                          e_l(Y,P,T,Z,SSM)
1239                                          =l=
1240                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1241                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1242                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1243                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1244                                                  ;
1245   
1246  #--Duration limits--#
1247   
1248  qdurmin(Y,Z,SSM)..
1249                                          e_cap(Y,Z,SSM)
1250                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1251                                          =g=
1252                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1253                                                  ;
1254   
1255  qdurmax(Y,Z,SSM)..
1256                                          e_cap(Y,Z,SSM)
1257                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1258                                          =l=
1259                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1260                                                  ;
1261   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1262  #-------Short-term storage-----------------------------------------------------#
1263   
1264  #--Charging constraints--#
1265   
1266  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1267                                          p_c(Y,P,T+1,Z,SS)
1268                                          =e=
1269                                                  p_c(Y,P,T,Z,SS)
1270                                                  + ramp_c_up(Y,P,T,Z,SS)
1271                          - ramp_c_dn(Y,P,T,Z,SS)
1272                          ;
1273   
1274  qsscru(Y,P,T,Z,SS)..
1275                      ramp_c_up(Y,P,T,Z,SS)
1276                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1277                      =l=
1278                          p_cap_c(Y,Z,SS)
1279                          - p_c(Y,P,T,Z,SS)
1280                          ;
1281   
1282  qsscrd(Y,P,T,Z,SS)..
1283                      ramp_c_dn(Y,P,T,Z,SS)
1284                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1285                      =l=
1286                          p_c(Y,P,T,Z,SS)
1287                          ;
1288   
1289  #--Discharging constraints--#
1290   
1291  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1292                          p_d(Y,P,T+1,Z,SS)
1293                          =e=
1294                                  p_d(Y,P,T,Z,SS)
1295                                  + ramp_d_up(Y,P,T,Z,SS)
1296                          - ramp_d_dn(Y,P,T,Z,SS)
1297                          ;
1298   
1299  qssdru(Y,P,T,Z,SS)..
1300                      ramp_d_up(Y,P,T,Z,SS)
1301                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1302                      =l=
1303                          p_cap_c(Y,Z,SS)
1304                          - p_d(Y,P,T,Z,SS)
1305                          ;
1306   
1307  qssdrd(Y,P,T,Z,SS)..
1308                      ramp_d_dn(Y,P,T,Z,SS)
1309                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1310                      =l=
1311                          p_d(Y,P,T,Z,SS)
1312                          ;
1313   
1314  #-------Mid and long-term storage----------------------------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1315   
1316  #--Reserve allocation--#
1317   
1318  qresscu(Y,P,T,Z,RU,SML)..
1319                                          res_s_c(Y,P,T,Z,RU,SML)
1320                                          =e=
1321                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1322                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1323                                                  ;
1324   
1325  qresscd(Y,P,T,Z,RD,SML)..
1326                                          res_s_c(Y,P,T,Z,RD,SML)
1327                                          =e=
1328                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1329                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1330                                                  ;
1331   
1332  qressdu(Y,P,T,Z,RU,SM)..
1333                                          res_s_d(Y,P,T,Z,RU,SM)
1334                                          =e=
1335                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1336                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1337                                                  ;
1338   
1339  qressdd(Y,P,T,Z,RD,SM)..
1340                                          res_s_d(Y,P,T,Z,RD,SM)
1341                                          =e=
1342                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1343                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1344                                                  ;
1345   
1346  #--Charging logical constraints--#
1347   
1348  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1349                                          n_c(Y,P,T+1,Z,SML)
1350                                          =e=
1351                                                  n_c(Y,P,T,Z,SML)
1352                                                  + n_c_su(Y,P,T,Z,SML)
1353                                                  - n_c_sd(Y,P,T,Z,SML)
1354                                                  ;
1355   
1356  qncmax(Y,P,T,Z,SML)..
1357                                          n_c(Y,P,T,Z,SML)
1358                                          =l=
1359                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1360                                                  ;
1361   
1362  qncsu(Y,P,T,Z,SML)..
1363                                          n_c_su(Y,P,T,Z,SML)
1364                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1365                                          =l=
1366                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1367                                                  - n_c(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1368                                                  ;
1369   
1370  qncsd(Y,P,T,Z,SML)..
1371                                          n_c_sd(Y,P,T,Z,SML)
1372                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1373                                          =l=
1374                                                  n_c(Y,P,T,Z,SML)
1375                                                  ;
1376   
1377  #--Charging constraints--#
1378   
1379  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1380                      p_c(Y,P,T+1,Z,SML)
1381                      =e=
1382                          p_c(Y,P,T,Z,SML)
1383                          + ramp_c_up(Y,P,T,Z,SML)
1384                          - ramp_c_dn(Y,P,T,Z,SML)
1385                          + ramp_c_su(Y,P,T,Z,SML)
1386                          - ramp_c_sd(Y,P,T,Z,SML)
1387                          ;
1388   
1389  qsmlcmin(Y,P,T,Z,SML)..
1390                                          p_c(Y,P,T,Z,SML)
1391                                          =g=
1392                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1393                                                  ;
1394   
1395  qsmlcmax(Y,P,T,Z,SML)..
1396                                          p_c(Y,P,T,Z,SML)
1397                                          =l=
1398                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1399                                                  ;
1400   
1401  #--Charging ramping constraints--#
1402   
1403  qcrudyn(Y,P,T,Z,SML)..
1404                      ramp_c_up(Y,P,T,Z,SML)
1405                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1406                      =l=
1407                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1408                          ;
1409   
1410  qcrucap(Y,P,T,Z,SML)..
1411                      ramp_c_up(Y,P,T,Z,SML)
1412                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1413                      =l=
1414                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1415                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1416                          ;
1417   
1418  qcrddyn(Y,P,T,Z,SML)..
1419                      ramp_c_dn(Y,P,T,Z,SML)
1420                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1421                      =l=
1422                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1423                          ;
1424   
1425  qcrdcap(Y,P,T,Z,SML)..
1426                      ramp_c_dn(Y,P,T,Z,SML)
1427                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1428                      =l=
1429                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1430                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1431                          ;
1432   
1433  qcsumin(Y,P,T,Z,SML)..
1434                                          ramp_c_su(Y,P,T,Z,SML)
1435                                          =g=
1436                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1437                                                  ;
1438   
1439  qcsumax(Y,P,T,Z,SML)..
1440                                          ramp_c_su(Y,P,T,Z,SML)
1441                                          =l=
1442                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1443                                                  ;
1444   
1445  qcsdmin(Y,P,T,Z,SML)..
1446                                          ramp_c_sd(Y,P,T,Z,SML)
1447                                          =g=
1448                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1449                                                  ;
1450   
1451  qcsdmax(Y,P,T,Z,SML)..
1452                                          ramp_c_sd(Y,P,T,Z,SML)
1453                                          =l=
1454                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1455                                                  ;
1456   
1457  #--Reserve allocation constraints--#
1458   
1459  qcruad(Y,P,T,Z,SML)..
1460                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1461                      =l=
1462                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1463                          ;
1464   
1465  qcrumd(Y,P,T,Z,SML)..
1466                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1467                      =l=
1468                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1469                          ;
1470   
1471  qcrdfu(Y,P,T,Z,SML)..
1472                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1473                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1474                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1475                          ;
1476   
1477  qcrdau(Y,P,T,Z,SML)..
1478                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1479                      =l=
1480                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1481                          ;
1482   
1483  qcrdmus(Y,P,T,Z,SML)..
1484                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1485                      =l=
1486                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1487                          ;
1488   
1489  qcrunsmin(Y,P,T,Z,RD,SML)..
1490                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1491                                          =g=
1492                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1493                                                  ;
1494   
1495  qcrunsmax(Y,P,T,Z,RD,SML)..
1496                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1497                                          =l=
1498                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1499                                                  ;
1500   
1501  qcrdsdmin(Y,P,T,Z,RU,SML)..
1502                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1503                                          =g=
1504                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1505                                                  ;
1506   
1507  qcrdsdmax(Y,P,T,Z,RU,SML)..
1508                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1509                                          =l=
1510                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1511                                                  ;
1512   
1513  #-------Mid-term storage-------------------------------------------------------#
1514   
1515  qcapdeqcapc(Y,Z,SM)..
1516                                          p_cap_d(Y,Z,SM)
1517                                          =e=
1518                                                  p_cap_c(Y,Z,SM)
1519                                                  ;
1520   
1521  #--Discharging logical constraints--#
1522   
1523  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1524                                          n_d(Y,P,T+1,Z,SM)
1525                                          =e=
1526                                                  n_d(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1527                                                  + n_d_su(Y,P,T,Z,SM)
1528                                                  - n_d_sd(Y,P,T,Z,SM)
1529                                                  ;
1530   
1531  qndmax(Y,P,T,Z,SM)..
1532                                          n_d(Y,P,T,Z,SM)
1533                                          =l=
1534                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1535                                                  ;
1536   
1537  qndsu(Y,P,T,Z,SM)..
1538                                          n_d_su(Y,P,T,Z,SM)
1539                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1540                                          =l=
1541                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1542                                                  - n_d(Y,P,T,Z,SM)
1543                                                  ;
1544   
1545  qndsd(Y,P,T,Z,SM)..
1546                                          n_d_sd(Y,P,T,Z,SM)
1547                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1548                                          =l=
1549                                                  n_d(Y,P,T,Z,SM)
1550                                                  ;
1551   
1552  #--Discharging constraints--#
1553   
1554  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1555                      p_d(Y,P,T+1,Z,SM)
1556                      =e=
1557                          p_d(Y,P,T,Z,SM)
1558                          + ramp_d_up(Y,P,T,Z,SM)
1559                          - ramp_d_dn(Y,P,T,Z,SM)
1560                          + ramp_d_su(Y,P,T,Z,SM)
1561                          - ramp_d_sd(Y,P,T,Z,SM)
1562                          ;
1563   
1564  qsmdmin(Y,P,T,Z,SM)..
1565                                          p_d(Y,P,T,Z,SM)
1566                                          =g=
1567                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1568                                                  ;
1569   
1570  qsmdmax(Y,P,T,Z,SM)..
1571                                          p_d(Y,P,T,Z,SM)
1572                                          =l=
1573                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1574                                                  ;
1575   
1576  #--Discharging ramping constraints--#
1577   
1578  qdrudyn(Y,P,T,Z,SM)..
1579                      ramp_d_up(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1580                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1581                      =l=
1582                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1583                          ;
1584   
1585  qdrucap(Y,P,T,Z,SM)..
1586                      ramp_d_up(Y,P,T,Z,SM)
1587                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1588                      =l=
1589                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1590                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1591                          ;
1592   
1593  qdrddyn(Y,P,T,Z,SM)..
1594                      ramp_d_dn(Y,P,T,Z,SM)
1595                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1596                      =l=
1597                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1598                          ;
1599   
1600  qdrdcap(Y,P,T,Z,SM)..
1601                      ramp_d_dn(Y,P,T,Z,SM)
1602                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1603                      =l=
1604                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1605                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1606                          ;
1607   
1608  qdsumin(Y,P,T,Z,SM)..
1609                                          ramp_d_su(Y,P,T,Z,SM)
1610                                          =g=
1611                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1612                                                  ;
1613   
1614  qdsumax(Y,P,T,Z,SM)..
1615                                          ramp_d_su(Y,P,T,Z,SM)
1616                                          =l=
1617                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1618                                                  ;
1619   
1620  qdsdmin(Y,P,T,Z,SM)..
1621                                          ramp_d_sd(Y,P,T,Z,SM)
1622                                          =g=
1623                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1624                                                  ;
1625   
1626  qdsdmax(Y,P,T,Z,SM)..
1627                                          ramp_d_sd(Y,P,T,Z,SM)
1628                                          =l=
1629                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1630                                                  ;
1631   
1632  #--Reserve allocation constraints--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1633   
1634  qdrufu(Y,P,T,Z,SM)..
1635                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1636                      =l=
1637                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1638                          ;
1639   
1640  qdruau(Y,P,T,Z,SM)..
1641                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1642                      =l=
1643                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1644                          ;
1645   
1646  qdrumus(Y,P,T,Z,SM)..
1647                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1648                      =l=
1649                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1650                          ;
1651   
1652  qdrdad(Y,P,T,Z,SM)..
1653                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1654                      =l=
1655                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1656                          ;
1657   
1658  qdrdmd(Y,P,T,Z,SM)..
1659                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1660                      =l=
1661                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1662                          ;
1663   
1664  qdrunsmin(Y,P,T,Z,RU,SM)..
1665                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1666                                          =g=
1667                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1668                                                  ;
1669   
1670  qdrunsmax(Y,P,T,Z,RU,SM)..
1671                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1672                                          =l=
1673                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1674                                                  ;
1675   
1676  qdrdsdmin(Y,P,T,Z,RD,SM)..
1677                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1678                                          =g=
1679                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1680                                                  ;
1681   
1682  qdrdsdmax(Y,P,T,Z,RD,SM)..
1683                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1684                                          =l=
1685                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1686                                                  ;
1687   
1688  #-------Long-term storage------------------------------------------------------#
1689   
1690  #--Discharging reserve allocation--#
1691   
1692  qslressd(Y,P,T,Z,R,SL)..
1693                                          res_s_d(Y,P,T,Z,R,SL)
1694                                          =e=
1695                                                  0
1696                                                  ;
1697   
1698  #--Gas energy balance--#
1699   
1700  qgase(Y,P,C)..
1701                                          eg(Y,P++1,C)
1702                                          =e=
1703                                                  eg(Y,P,C)
1704                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1705                                                  ;
1706   
1707  qgasemax(Y,P,C)..
1708                                          eg(Y,P,C)
1709                                          =l=
1710                                                  E_LP
1711                                                  + eg_cap
1712                                                  ;
1713   
1714  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1715                                          eg_f(Y,P,T+1,C)
1716                                          =e=
1717                                                  eg_f(Y,P,T,C)
1718                                                  + pg_c(Y,P,T,C)
1719                                                  - pg_d(Y,P,T,C)
1720                                                  ;
1721   
1722  qgasefmax(Y,P,T,C)..
1723                                          eg_f(Y,P,T,C)
1724                                          =l=
1725                                                  E_LP
1726                                                  + eg_cap
1727                                                  ;
1728   
1729  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1730                                          eg_f(Y,P,T,C)
1731                                          =e=
1732                                                  eg(Y,P,C)
1733                                                  ;
1734   
1735  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1736                                          eg_l(Y,P,T+1,C)
1737                                          =e=
1738                                                  eg_l(Y,P,T,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1739                                                  + pg_c(Y,P,T,C)
1740                                                  - pg_d(Y,P,T,C)
1741                                                  ;
1742   
1743  qgaselmax(Y,P,T,C)..
1744                                          eg_l(Y,P,T,C)
1745                                          =l=
1746                                                  E_LP
1747                                                  + eg_cap
1748                                                  ;
1749   
1750  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1751                                          eg_l(Y,P,T,C)
1752                                          =e=
1753                                                  eg(Y,P,C)
1754                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1755                                                  ;
1756   
1757  #--Gas charging constraints--#
1758   
1759  qgasc(Y,P,T,C)..
1760                                          pg_c(Y,P,T,C)
1761                                          =e=
1762                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1763                                                  + pg_import(Y,P,T,C)
1764                                                  ;
1765   
1766  #--Gas discharging constraints--#
1767   
1768  qgasd(Y,P,T,C)..
1769                                          pg_d(Y,P,T,C)
1770                                          =e=
1771                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1772                                                  ;
1773   
1774  #--Gas usage--#
1775   
1776  qgasuse(Y,C)..
1777                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1778                                          =l=
1779                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1780                                                  ;
1781   
1782  qgasusegen(Y,P,T,Z,GCG)..
1783                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1784                                          =e=
1785                                                  pg_syn(Y,P,T,Z,GCG)
1786                                                  + pg_fos(Y,P,T,Z,GCG)
1787                                                  ;
1788   
1789  ################################################
1790  # DEMAND RESPONSE
1791  ################################################
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1792   
1793  # always included in this manner
1794   
1795  sum_demand(P,T,Z)..
1796                      demand_unit(P,T,Z) =e= DEM_NON_RES(P,T,Z) + demand_new_res(P,T,Z)
1797                      ;
1798   
1799  totdemand2(P,Z)..
1800                                          demand_tot(P,Z) =e= sum(T,demand_new_res(P,T,Z) + DEM_NON_RES(P,T,Z))
1801  #                                       demand_tot(P,Z) =e= sum(T,DEM_REF_RES(P,T,Z))
1802                                          ;
1803   
1804  refdemand(P,T,Z)..
1805                                          demand_ref(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + DEM_NON_RES(P,T,Z)
1806                                          ;
1807   
1808   
1809   
1810  ##################################
1811   
1812  # change used equation depending on with or withourt demand response
1813   
1814  demand(P,T,Z)..
1815                                          demand_new_res(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_OPTIMAL(P,T,Z)/PRICE_REF(P,H,Z))*(price_unit(P,H,Z)-PRICE_REF(P,H,Z)))
1816  #                                       demand_new_res(P,T,Z) =e= DEM_REF_RES(P,T,Z)
1817                                          ;
1818   
1819  price_clone(P,T,Z)..
1820                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1821  #                                       price_unit_clone(P,T,Z) =e= PRICE_REF(P,H,Z)
1822                                          ;
1823   
1824  totdemand(P,Z)..
1825                                          sum(T,DEM_OPTIMAL(P,T,Z)) =l= sum(T,demand_new_res(P,T,Z))
1826  #                                       sum(T,DEM_REF_RES(P,T,Z)+eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))) =l= sum(T,demand_new_res(P,T,Z))
1827                                          ;
1828   
1829  ##################################
1830   
1831  # reserve allocation
1832   
1833  qresdrup(Y,P,T,Z)..
1834                      sum(RU,res_DR(Y,P,T,Z,RU)) =l= (demand_new_res(P,T,Z) - DEM_RES_MIN(P,T,Z))*FACTOR_RES_DR
1835                      ;
1836   
1837  qresdrdo(Y,P,T,Z)..
1838                      sum(RD,res_DR(Y,P,T,Z,RD)) =l= (DEM_RES_MAX(P,T,Z) - demand_new_res(P,T,Z))*FACTOR_RES_DR
1839                      ;
1840   
1841  # residential consumption upper and lower limit
1842   
1843  demand_max(P,T,Z)..
1844                      demand_new_res(P,T,Z) =l= DEM_RES_MAX(P,T,Z)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1845                      ;
1846   
1847  demand_min(P,T,Z)..
1848                      demand_new_res(P,T,Z) =g= DEM_RES_MIN(P,T,Z)
1849                      ;
1850   
1851  # auxilliary
1852   
1853  demand_clone(P,H,Z)..
1854                                          demand_new_res_clone(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*DIAG(T,H))
1855                                          ;
1856   
1857   
1858  surplusdemand(P,T,Z)..
1859                                          surplus(P,T,Z) =e= eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))
1860                                          ;
1861   
1862  #price(P,H,Z)..
1863  #                                       (price_unit(P,H,Z) - PRICE_REF(P,H,Z))*sum(H,ELAST(T,H)*(DEM_REF_RES(P,T,Z)/PRICE_REF(P,H,Z))) =e= (demand_new_res(P,T,Z)-DEM_REF_RES(P,T,Z))
1864  #                                       ;
1865   
1866  shiftedaway(P,H,Z)..
1867                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1868                                          ;
1869   
1870  shiftedawaytotal(P,Z)..
1871                                          shiftaway_total(P,Z) =e= sum(H,shift_up(P,H,Z)-shift_down(P,H,Z))
1872                                          ;
1873   
1874  shiftedforward(P,H,Z)..
1875                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1876                                          ;
1877   
1878  shiftedforwardtotal(P,Z)..
1879  #                                       shiftforwards_total(P,Z) =e= sum(H,shiftforwards(P,H,Z))
1880                                          shiftforwards_total(P,Z) =e= sum(H,front_up(P,H,Z)-back_down(P,H,Z))
1881                                          ;
1882   
1883  shiftedbackward(P,H,Z)..
1884                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1885                                          ;
1886   
1887  shiftedbackwardtotal(P,Z)..
1888  #                                       shiftbackwards_total(P,Z) =e= sum(H,shiftbackwards(P,H,Z))
1889                                          shiftbackwards_total(P,Z) =e= sum(H,back_up(P,H,Z)-front_down(P,H,Z))
1890                                          ;
1891   
1892  shiftconstraint_frame_1(P,H,Z)..
1893                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1894                                          ;
1895   
1896  shiftconstraint_frame_2(P,H,Z)..
1897                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMAX(H,T)) =g= sum(T,demand_new_res(P,T,Z)*SHIFTMIN(H,T))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1898                                          ;
1899   
1900  shiftconstraint1(P,H,Z)..
1901                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1902                                          ;
1903   
1904  shiftconstraint2(P,H,Z)..
1905                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
1906                                          ;
1907   
1908  priceconstraint1(P,H,Z)..
1909                                          price_unit(P,H,Z) =l= PRICE_REF(P,H,Z)+PRICE_REF(P,H,Z)*LIMITPRICE
1910                                          ;
1911   
1912  priceconstraint2(P,H,Z)..
1913                                          price_unit(P,H,Z) =g= PRICE_REF(P,H,Z)-PRICE_REF(P,H,Z)*LIMITPRICE
1914                                          ;
1915   
1916  demlimitunder(P,T,Z)..
1917                                          DEM_OPTIMAL(P,T,Z) - LIMITDEM =l= demand_new_res(P,T,Z)
1918                                          ;
1919   
1920  demlimitupper(P,T,Z)..
1921                                          DEM_OPTIMAL(P,T,Z) + LIMITDEM =g= demand_new_res(P,T,Z)
1922                                          ;
1923   
1924   
1925  #priceconstraint3(P,Z)..
1926  #                                       sum(T,price_unit(P,T,Z))/card(T) =e= PRICE_REF(P,H,Z)
1927  #                                       ;
1928   
1929   
1930  qinnerframe(P,H,Z)..
1931                                          innerframe(P,H,Z) =e= sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T))
1932                                          ;
1933   
1934  qouterframe(P,H,Z)..
1935                                          outerframe(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1936                                          ;
1937   
1938  fixedcost(Z)..
1939                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1940                                          ;
1941   
1942  variablecost(P,Z)..
1943                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1944                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1945                                          ;
1946   
1947  cost(Z)..
1948                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
1949                                          ;
1950   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1951  ####################################
1952  # get downwards en upward numbers for front and back
1953  ####################################
1954   
1955  front_d_1(P,H,Z)..
1956                                          front_down(P,H,Z) =l= shiftforwards(P,H,Z)
1957                                          ;
1958   
1959  front_d_2(P,H,Z)..
1960                                          front_down(P,H,Z) =l= 0
1961                                          ;
1962   
1963  front_u_1(P,H,Z)..
1964                                          front_up(P,H,Z) =g= shiftforwards(P,H,Z)
1965                                          ;
1966   
1967  front_u_2(P,H,Z)..
1968                                          front_up(P,H,Z) =g= 0
1969                                          ;
1970   
1971  back_d_1(P,H,Z)..
1972                                          back_down(P,H,Z) =l= shiftbackwards(P,H,Z)
1973                                          ;
1974   
1975  back_d_2(P,H,Z)..
1976                                          back_down(P,H,Z) =l= 0
1977                                          ;
1978   
1979  back_u_1(P,H,Z)..
1980                                          back_up(P,H,Z) =g= shiftbackwards(P,H,Z)
1981                                          ;
1982   
1983  back_u_2(P,H,Z)..
1984                                          back_up(P,H,Z) =g= 0
1985                                          ;
1986   
1987  shift_d_1(P,H,Z)..
1988                                          shift_down(P,H,Z) =l= shiftaway(P,H,Z)
1989                                          ;
1990   
1991  shift_d_2(P,H,Z)..
1992                                          shift_down(P,H,Z) =l= 0
1993                                          ;
1994   
1995  shift_u_1(P,H,Z)..
1996                                          shift_up(P,H,Z) =g= shiftaway(P,H,Z)
1997                                          ;
1998   
1999  shift_u_2(P,H,Z)..
2000                                          shift_up(P,H,Z) =g= 0
2001                                          ;
2002   
2003  # things that have to do with compensqtion mqtrix
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2004  ###################################################
2005   
2006  shiftedfi(P,H,Z)..
2007                      shiftfi(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2008                      ;
2009   
2010  shiftedbi(P,H,Z)..
2011                      shiftbi(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2012                      ;
2013   
2014  shiftedfc(P,H,Z)..
2015                      shiftfc(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2016                      ;
2017   
2018  shiftedbc(P,H,Z)..
2019                      shiftbc(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2020                      ;
2021   
2022   
2023  MODEL GOA GOA model /
2024   
2025  #-------Objective function-----------------------------------------------------#
2026                  qobj
2027   
2028  #-------System constraints-----------------------------------------------------#
2029                  qbalance
2030   
2031                  qresprod
2032                  qco2lim
2033   
2034                  qresendomin
2035                  qresendomax
2036                  qres
2037   
2038                  #qgendisp
2039                  #qgendisppeak
2040   
2041                  qco2
2042                  qlcg
2043   
2044  #-------Generation technologies------------------------------------------------#
2045                  qpotcapmin
2046  #               qpotcapmax
2047  #               qpotgenmin
2048  #               qpotgenmax
2049   
2050  #--Conventional generation technologies--#
2051                  qresgcu
2052                  qresgcd
2053   
2054                  qn
2055                  qnmax
2056                  qnsu
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 41
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2057                  qnsd
2058   
2059                  qgen
2060                  qgenmin
2061                  qgenmax
2062   
2063                  qrudyn
2064                  qrucap
2065                  qrddyn
2066                  qrdcap
2067                  qsumin
2068                  qsumax
2069                  qsdmin
2070                  qsdmax
2071   
2072                  qrufu
2073                  qruau
2074                  qrumus
2075                  qrdad
2076                  qrdmd
2077                  qrunsmin
2078                  qrunsmax
2079                  qrdsdmin
2080                  qrdsdmax
2081   
2082  #--Intermittent renewable generation technologies--#
2083                  qresgru
2084   
2085                  qgenr
2086   
2087                  qresgrdr
2088                  qresgrdg
2089   
2090  #-------Storage technologies---------------------------------------------------#
2091  #--General constraints--#
2092                  qress
2093                  qspotcapmin
2094                  qspotcapmax
2095   
2096                  qe
2097                  qemax
2098                  qef
2099                  qefmin
2100                  qefmax
2101                  qefstart
2102                  qel
2103                  qelmin
2104                  qelmax
2105                  qelstart
2106   
2107                  qdurmin
2108                  qdurmax
2109   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 42
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2110  #--Short-term storage--#
2111                  qssc
2112                  qsscru
2113                  qsscrd
2114   
2115                  qssd
2116                  qssdru
2117                  qssdrd
2118   
2119  #--Mid and long-term storage--#
2120                  qresscu
2121                  qresscd
2122                  qressdu
2123                  qressdd
2124   
2125                  qnc
2126                  qncmax
2127                  qncsu
2128                  qncsd
2129   
2130                  qsmlc
2131                  qsmlcmin
2132                  qsmlcmax
2133   
2134                  qcrudyn
2135                  qcrucap
2136                  qcrddyn
2137                  qcrdcap
2138                  qcsumin
2139                  qcsumax
2140                  qcsdmin
2141                  qcsdmax
2142   
2143                  qcruad
2144                  qcrumd
2145                  qcrdfu
2146                  qcrdau
2147                  qcrdmus
2148                  qcrunsmin
2149                  qcrunsmax
2150                  qcrdsdmin
2151                  qcrdsdmax
2152   
2153  #--Mid-term storage--#
2154                  qcapdeqcapc
2155   
2156                  qnd
2157                  qndmax
2158                  qndsu
2159                  qndsd
2160   
2161                  qsmd
2162                  qsmdmin
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 43
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2163                  qsmdmax
2164   
2165                  qdrudyn
2166                  qdrucap
2167                  qdrddyn
2168                  qdrdcap
2169                  qdsumin
2170                  qdsumax
2171                  qdsdmin
2172                  qdsdmax
2173   
2174                  qdrufu
2175                  qdruau
2176                  qdrumus
2177                  qdrdad
2178                  qdrdmd
2179                  qdrunsmin
2180                  qdrunsmax
2181                  qdrdsdmin
2182                  qdrdsdmax
2183   
2184  #--Long-term storage--#
2185                  qslressd
2186   
2187                  qgase
2188                  qgasemax
2189                  qgasef
2190                  qgasefmax
2191                  qgasefstart
2192                  qgasel
2193                  qgaselmax
2194                  qgaselstart
2195   
2196                  qgasc
2197   
2198                  qgasd
2199   
2200                  qgasuse
2201                  qgasusegen
2202   
2203  #-- Price-elasticity--#
2204   
2205          #always included
2206                  totdemand2
2207                  refdemand
2208                  sum_demand
2209   
2210                  #always included, change equation
2211                  demand
2212  #               price_clone
2213   
2214                  #reserve allocation of flex demand
2215                  qresdrup
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 44
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2216                  qresdrdo
2217   
2218                  ###########
2219                  ## Only for demand resposne
2220                  ###########
2221   
2222                  #limits shiftaway
2223  #               shiftconstraint1
2224  #               shiftconstraint2
2225   
2226                  #limits demand difference
2227  #               demlimitunder
2228  #               demlimitupper
2229   
2230                  #keeps demand between boundaries
2231          demand_max
2232          demand_min
2233   
2234  #               price
2235  #               demand_clone
2236   
2237  #               surplusdemand
2238   
2239                  shiftedaway
2240  #               shiftedforward
2241  #               shiftedbackward
2242   
2243  #               shiftedawaytotal
2244  #               shiftedforwardtotal
2245  #               shiftedbackwardtotal
2246   
2247                  priceconstraint1
2248                  priceconstraint2
2249  #               priceconstraint3
2250   
2251          ##########
2252          # include when working with moving frames, and set in wout_program -> factor back to 1
2253  #               shiftconstraint_frame_1
2254  #               shiftconstraint_frame_2
2255  #               totdemand
2256   
2257  #               qinnerframe
2258  #               qouterframe
2259   
2260  #               revenue
2261  #               fixedcost
2262  #               variablecost
2263  #               cost
2264   
2265  #               front_d_1
2266  #               front_d_2
2267  #               front_u_1
2268  #               front_u_2
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 45
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2269  #
2270  #               back_d_1
2271  #               back_d_2
2272  #               back_u_1
2273  #               back_u_2
2274  #
2275  #               shift_u_1
2276  #               shift_u_2
2277  #               shift_d_1
2278  #               shift_d_2
2279  #
2280          shiftedbc
2281          shiftedfc
2282          shiftedbi
2283          shiftedfi
2284   
2285  /;
2286   
2287   
2288   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME taking OF TYPE PARAM
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 46
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.109 SECONDS      5 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/23/16 16:36:42 Page 47
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.016 SECONDS      8 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
Output     C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.lst
Save       C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
