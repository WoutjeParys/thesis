GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(P,T,H)                            Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  COMPENSATE(P,H)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_NEW(P,T,H)        the new calculated elasticity matrix, taking into account the compensation factor
 337  DEM_REF_RES(P,T,Z)      amount of reference residential demand before DR
 338  DEM_NON_RES(P,T,Z)      amount of non residential demand
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 339  ELAST_COMP(P,T,H)       compensation PEM
 340  RATIO_H(P,H)            inbalance ratio
 341  LINEARPEM(T,H)          compensation PEM linear
 342  OWNELAST(T,H)           compensation PEM elast
 343   
 344  # data from DR model
 345  DEM_RES_MAX(P,T,Z)        max residential demand
 346  DEM_RES_MIN(P,T,Z)        min residential demand
 347  DEM_OPTIMAL(P,T,Z)        anchor point demand
 348  PRICE_REF(P,H,Z)          anchor point price
 349  DEM_RES_FP(P,T,Z)         prospected demand under flat price
 350   
 351  # factor of reserve allocation flexible damand
 352  FACTOR_RES_DR             factor that determines which part of the flexible band is used for flexibility
 353  ;
 354   
--- LOAD  G_DATA = 39:G_DATA
 355  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 356  $LOAD S_DATA
--- LOAD  RG = 41:RG
 357  $LOAD RG
--- LOAD  RSC = 42:RSC
 358  $LOAD RSC
--- LOAD  RSD = 43:RSD
 359  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 360  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 361  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 362  $LOAD REL_T
--- LOAD  W = 48:W
 363  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 364  $LOAD POL_TARGETS
 365  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 366  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 367  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 368  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 369  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 370  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 371  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 372  $LOAD SHIFTMIN
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/26/16 01:50:33 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  SHIFTMAX = 58:SHIFTMAX
 373  $LOAD SHIFTMAX
--- LOAD  COMPENSATE = 59:COMPENSATE
 374  $LOAD COMPENSATE
--- LOAD  DEM_REF_RES = 61:DEM_REF_RES
--- LOAD  DEM_NON_RES = 60:DEM_NON_RES
 375  $LOAD DEM_REF_RES DEM_NON_RES
--- LOAD  RATIO_H = 62:RATIO_H
 376  $LOAD RATIO_H
--- LOAD  LINEARPEM = 63:LINEARPEM
--- LOAD  OWNELAST = 64:OWNELAST
 377  $LOAD LINEARPEM OWNELAST
--- LOAD  DEM_OPTIMAL = 67:DEM_OPTIMAL
--- LOAD  DEM_RES_MIN = 66:DEM_RES_MIN
--- LOAD  DEM_RES_MAX = 65:DEM_RES_MAX
--- LOAD  DEM_RES_FP = 69:DEM_RES_FP
--- LOAD  PRICE_REF = 68:PRICE_REF
 378  $LOAD DEM_OPTIMAL DEM_RES_MIN DEM_RES_MAX DEM_RES_FP PRICE_REF
 379   
 380   
 381  #C_GAS = 25.6643460843943;
 382  C_GAS = 25.6643460843943*2;
 383  T_MARKET = 1;
 384  EGCAPEX = 2000000000000000000000000;
 385  E_LP = 7100000;
 386  P_REF = 55.5;
 387  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 388  LIMITPRICE = 1.5;
 389  LIMITDEM = 1500;
 390  LIMITSHIFT = 3000;
 391  LENGTH_P = card(T);
 392  FACTOR_RES_DR = 1;
 393   
 394  ############################
 395  ## CHOOSE STARTING DEMAND CURVE (Do not use!!!!!!!!)
 396  ###############
 397  #PRICE_REF(P,H,Z) = P_REF;
 398  #DEM_OPTIMAL(P,T,Z) = DEM_RES_FP(P,T,Z);
 399   
 400  RATIO_H(P,H) = (-sum((T,Z),DIAG(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))-sum((T,Z),(TRI_UP(T,H)+TRI_LOW(T,H))*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))) /
 401                  (sum((T,Z),(TRI_LOW(T,H)+TRI_UP(T,H))*DEM_OPTIMAL(P,T,Z)));
 402  ## flat compensation PEM
 403  ELAST_COMP(P,T,H) = (TRI_LOW(T,H)+TRI_UP(T,H))*RATIO_H(P,H);
 404  ## linear compensation PEM
 405  #ELAST_COMP(P,T,H) = (LINEARPEM(T,H))*RATIO_H(P,H);
 406  ## Elastic compensation PEM
 407  #ELAST_COMP(P,T,H) = (OWNELAST(T,H))*RATIO_H(P,H);
 408  ## Moving frames compensation PEM = 0
 409  #ELAST_COMP(P,T,H) = 0;
 410  ELAST_NEW(P,T,H) = ELAST(P,T,H)+ELAST_COMP(P,T,H);
 411   
 412  eff_factor_earlier = 0.0;
 413  eff_factor_later = 0.0;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 414   
 415  VARIABLES
 416  obj                     Value of objective function
 417   
 418  #######################################################
 419   
 420  price_unit(P,H,Z)                               Residential price signal for the electricity
 421  price_unit_clone(P,T,Z)
 422   
 423  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 424  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 425  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 426  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 427  shiftaway(P,H,Z)                                Shift away from an hour
 428  shiftaway_total(P,Z)                    Shift away from a period
 429   
 430  shiftfi(P,H,Z)
 431  shiftbi(P,H,Z)
 432  shifta(P,H,Z)
 433  shiftfc(P,H,Z)
 434  shiftbc(P,H,Z)
 435   
 436  front_up(P,H,Z)
 437  front_down(P,H,Z)
 438  back_up(P,H,Z)
 439  back_down(P,H,Z)
 440  shift_up(P,H,Z)
 441  shift_down(P,H,Z)
 442  ;
 443   
 444  POSITIVE VARIABLES
 445  #######################################################
 446   
 447  demand_new_res(P,T,Z)           Residential demand after price signal applied
 448  demand_new_res_clone(P,H,Z)
 449  demand_unit(P,T,Z)                              demand of the electricity (sum residential & non-residential)
 450  demand_unit_clone(P,H,Z)
 451  demand_tot(P,Z)                                 total demand, based on demand_unit
 452  surplus(P,T,Z)
 453  demand_ref(P,T,Z)                               the reference demand with flat price
 454  innerframe(P,H,Z)
 455  outerframe(P,H,Z)
 456   
 457  totalrevenue(P,Z)                               the product of demand and price
 458  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 459  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 460  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 461   
 462  #######################################################
 463   
 464  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 465  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 466  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 467  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 468  eg_cap                                          Gas storage capacity
 469   
 470  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 471  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 472   
 473  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 474  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 475  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 476  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 477  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 478  eg(Y,P,C)                                       Energy content of gas storage at period P
 479  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 480  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 481  pg_c(Y,P,T,C)                           Charging of gas storage
 482  pg_d(Y,P,T,C)                           Discharging of gas storage
 483   
 484  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 485  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 486  res_DR(Y,P,T,Z,R)             Reserve allocation of demand response for reserve category R
 487   
 488  load_shedding(Y,P,T,Z)          Load shedding
 489  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 490  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 491  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 492   
 493  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 494  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 495  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 496   
 497  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 498  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 499  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 500  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 501  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 502   
 503  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 504  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 505  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 506  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 507   
 508  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 509   
 510  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 511  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 512  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 513  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 514  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 515  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 516  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 517  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 518   
 519  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 520  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 521  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 522  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 523  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 524   
 525  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 526  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 527  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 528  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 529   
 530  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 531  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 532  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 533  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 534  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 535   
 536  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 537  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 538  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 539  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 540   
 541  pg_import(Y,P,T,C)                      Import of gas
 542  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 543  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 544   
 545  ;
 546   
 547  EQUATIONS
 548  #--Objective function--#
 549  qobj
 550   
 551  #--System constraints--#
 552  qbalance(Y,P,T,Z)
 553  qresprod(Y,C)
 554  qco2lim(Y,C)
 555  qresendomin(Y,P,T,C,R,GRI)
 556  qresendomax(Y,P,T,C,R,GRI)
 557  qres(Y,P,T,C,R)
 558  qgendisp(Y,P,T,C)
 559  qgendisppeak(Y,C)
 560  qco2(Y,C,G)
 561  qlcg(Y,C,G)
 562   
 563  #--Generation technologies--#
 564  qpotcapmin(Y,C,G)
 565  #qpotcapmax(Y,C,G)
 566  #qpotgenmin(Y,C,G)
 567  #qpotgenmax(Y,C,G)
 568   
 569  qresgcu(Y,P,T,Z,RU,GD)
 570  qresgcd(Y,P,T,Z,RD,GD)
 571  qn(Y,P,T,Z,GD)
 572  qnmax(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 573  qnsu(Y,P,T,Z,GD)
 574  qnsd(Y,P,T,Z,GD)
 575  qgen(Y,P,T,Z,GD)
 576  qgenmin(Y,P,T,Z,GD)
 577  qgenmax(Y,P,T,Z,GD)
 578  qrudyn(Y,P,T,Z,GD)
 579  qrucap(Y,P,T,Z,GD)
 580  qrddyn(Y,P,T,Z,GD)
 581  qrdcap(Y,P,T,Z,GD)
 582  qsumin(Y,P,T,Z,GD)
 583  qsumax(Y,P,T,Z,GD)
 584  qsdmin(Y,P,T,Z,GD)
 585  qsdmax(Y,P,T,Z,GD)
 586  qrufu(Y,P,T,Z,GD)
 587  qruau(Y,P,T,Z,GD)
 588  qrumus(Y,P,T,Z,GD)
 589  qrdad(Y,P,T,Z,GD)
 590  qrdmd(Y,P,T,Z,GD)
 591  qrunsmin(Y,P,T,Z,RU,GD)
 592  qrunsmax(Y,P,T,Z,RU,GD)
 593  qrdsdmin(Y,P,T,Z,RD,GD)
 594  qrdsdmax(Y,P,T,Z,RD,GD)
 595   
 596  qresgru(Y,P,T,Z,RU,GRI)
 597  qgenr(Y,P,T,Z,GRI)
 598  qresgrdr(Y,P,T,Z,GRI)
 599  qresgrdg(Y,P,T,Z,GRI)
 600   
 601  #--Storage technologies--#
 602  qress(Y,P,T,Z,R,S)
 603  qspotcapmin(Y,C,S)
 604  qspotcapmax(Y,C,S)
 605   
 606  qe(Y,P,Z,S)
 607  qemax(Y,P,Z,S)
 608  qef(Y,P,T,Z,S)
 609  qefmin(Y,P,T,Z,S)
 610  qefmax(Y,P,T,Z,S)
 611  qefstart(Y,P,T,Z,S)
 612  qel(Y,P,T,Z,S)
 613  qelmin(Y,P,T,Z,S)
 614  qelmax(Y,P,T,Z,S)
 615  qelstart(Y,P,T,Z,S)
 616  qdurmin(Y,Z,S)
 617  qdurmax(Y,Z,S)
 618   
 619  qssc(Y,P,T,Z,SS)
 620  qsscru(Y,P,T,Z,SS)
 621  qsscrd(Y,P,T,Z,SS)
 622  qssd(Y,P,T,Z,SS)
 623  qssdru(Y,P,T,Z,SS)
 624  qssdrd(Y,P,T,Z,SS)
 625   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 626  qresscu(Y,P,T,Z,RU,SML)
 627  qresscd(Y,P,T,Z,RD,SML)
 628  qressdu(Y,P,T,Z,RU,SM)
 629  qressdd(Y,P,T,Z,RD,SM)
 630  qnc(Y,P,T,Z,SML)
 631  qncmax(Y,P,T,Z,SML)
 632  qncsu(Y,P,T,Z,SML)
 633  qncsd(Y,P,T,Z,SML)
 634  qsmlc(Y,P,T,Z,SML)
 635  qsmlcmin(Y,P,T,Z,SML)
 636  qsmlcmax(Y,P,T,Z,SML)
 637  qcrudyn(Y,P,T,Z,SML)
 638  qcrucap(Y,P,T,Z,SML)
 639  qcrddyn(Y,P,T,Z,SML)
 640  qcrdcap(Y,P,T,Z,SML)
 641  qcsumin(Y,P,T,Z,SML)
 642  qcsumax(Y,P,T,Z,SML)
 643  qcsdmin(Y,P,T,Z,SML)
 644  qcsdmax(Y,P,T,Z,SML)
 645  qcruad(Y,P,T,Z,SML)
 646  qcrumd(Y,P,T,Z,SML)
 647  qcrdfu(Y,P,T,Z,SML)
 648  qcrdau(Y,P,T,Z,SML)
 649  qcrdmus(Y,P,T,Z,SML)
 650  qcrunsmin(Y,P,T,Z,RD,SML)
 651  qcrunsmax(Y,P,T,Z,RD,SML)
 652  qcrdsdmin(Y,P,T,Z,RU,SML)
 653  qcrdsdmax(Y,P,T,Z,RU,SML)
 654   
 655  qcapdeqcapc(Y,Z,SM)
 656  qnd(Y,P,T,Z,SM)
 657  qndmax(Y,P,T,Z,SM)
 658  qndsu(Y,P,T,Z,SM)
 659  qndsd(Y,P,T,Z,SM)
 660  qsmd(Y,P,T,Z,SM)
 661  qsmdmin(Y,P,T,Z,SM)
 662  qsmdmax(Y,P,T,Z,SM)
 663  qdrudyn(Y,P,T,Z,SM)
 664  qdrucap(Y,P,T,Z,SM)
 665  qdrddyn(Y,P,T,Z,SM)
 666  qdrdcap(Y,P,T,Z,SM)
 667  qdsumin(Y,P,T,Z,SM)
 668  qdsumax(Y,P,T,Z,SM)
 669  qdsdmin(Y,P,T,Z,SM)
 670  qdsdmax(Y,P,T,Z,SM)
 671  qdrufu(Y,P,T,Z,SM)
 672  qdruau(Y,P,T,Z,SM)
 673  qdrumus(Y,P,T,Z,SM)
 674  qdrdad(Y,P,T,Z,SM)
 675  qdrdmd(Y,P,T,Z,SM)
 676  qdrunsmin(Y,P,T,Z,RU,SM)
 677  qdrunsmax(Y,P,T,Z,RU,SM)
 678  qdrdsdmin(Y,P,T,Z,RD,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 679  qdrdsdmax(Y,P,T,Z,RD,SM)
 680   
 681  qslressd(Y,P,T,Z,R,SL)
 682  qgase(Y,P,C)
 683  qgasemax(Y,P,C)
 684  qgasef(Y,P,T,C)
 685  qgasefmax(Y,P,T,C)
 686  qgasefstart(Y,P,T,C)
 687  qgasel(Y,P,T,C)
 688  qgaselmax(Y,P,T,C)
 689  qgaselstart(Y,P,T,C)
 690  qgasc(Y,P,T,C)
 691  qgasd(Y,P,T,C)
 692  qgasuse(Y,C)
 693  qgasusegen(Y,P,T,Z,GCG)
 694   
 695  ###############################
 696  #price(P,H,Z)
 697  price_clone(P,T,Z)
 698  demand(P,T,Z)
 699  demand_clone(P,H,Z)
 700   
 701  #data DR model
 702  demand_max(P,T,Z)
 703  demand_min(P,T,Z)
 704   
 705  # reserve allocation
 706  qresdrup(Y,P,T,Z)
 707  qresdrdo(Y,P,T,Z)
 708   
 709  sum_demand(P,T,Z)
 710  totdemand(P,Z)
 711  surplusdemand(P,T,Z)
 712  totdemand2(P,Z)
 713  refdemand(P,T,Z)
 714  refdemand2(Z)
 715  priceconstraint1(P,H,Z)
 716  priceconstraint2(P,H,Z)
 717  priceconstraint3(P,Z)
 718  shiftconstraint_frame_1(P,H,Z)
 719  shiftconstraint_frame_2(P,H,Z)
 720  shiftconstraint1(P,H,Z)
 721  shiftconstraint2(P,H,Z)
 722  shiftedforward(P,H,Z)
 723  shiftedforwardtotal(P,Z)
 724  shiftedbackward(P,H,Z)
 725  shiftedbackwardtotal(P,Z)
 726  shiftedaway(P,H,Z)
 727  shiftedawaytotal(P,Z)
 728   
 729  shiftedfi(P,H,Z)
 730  shiftedbi(P,H,Z)
 731  shiftedfc(P,H,Z)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 732  shiftedbc(P,H,Z)
 733   
 734  front_d_1(P,H,Z)
 735  front_d_2(P,H,Z)
 736  front_u_1(P,H,Z)
 737  front_u_2(P,H,Z)
 738   
 739  back_d_1(P,H,Z)
 740  back_d_2(P,H,Z)
 741  back_u_1(P,H,Z)
 742  back_u_2(P,H,Z)
 743   
 744  shift_d_1(P,H,Z)
 745  shift_d_2(P,H,Z)
 746  shift_u_1(P,H,Z)
 747  shift_u_2(P,H,Z)
 748   
 749  qinnerframe(P,H,Z)
 750  qouterframe(P,H,Z)
 751   
 752  revenue(P,Z)
 753  fixedcost(Z)
 754  variablecost(P,Z)
 755  cost(Z)
 756   
 757  demlimitunder(P,T,Z)
 758  demlimitupper(P,T,Z)
 759  ;
 760   
 761  #-----######################---------------------------------------------------#
 762  #-----# Objective function #---------------------------------------------------#
 763  #-----######################---------------------------------------------------#
 764  qobj..              obj
 765                                          =e=
 766                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 767                                                  + sum((Y,Z,S),      (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 768  #                                                + sum((Y,Z,S),      (S_DATA(S,'C_P_D_INV')*1000)*p_cap_d(Y,Z,S))
 769  #                                                + sum((Y,Z,S),      (S_DATA(S,'C_E')*1000)*e_cap(Y,Z,S))
 770                                                  +
 771                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 772                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 773   
 774                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 775                                                  + sum((Y,P,T,Z,GRI),    W(P)*(0)*curt(Y,P,T,Z,GRI) + W(P)*(1000000)*curt_dummy(Y,P,T,Z,GRI))
 776                          + sum((Y,P,T,Z),                W(P)*(10000)*load_shedding(Y,P,T,Z))
 777                                                  )
 778                                                  *(168/card(T));
 779                                                  ;
 780   
 781   
 782   
 783   
 784  #-----######################---------------------------------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 785  #-----# System constraints #---------------------------------------------------#
 786  #-----######################---------------------------------------------------#
 787   
 788  #--System balance--#
 789   
 790  # balance with demand response
 791  qbalance(Y,P,T,Z)..
 792                                  sum(G, gen(Y,P,T,Z,G))
 793                                  + sum(SSM, p_d(Y,P,T,Z,SSM))
 794                                          =e=
 795                                                  demand_unit(P,T,Z)
 796                                                  - load_shedding(Y,P,T,Z)
 797                                                  + sum(S, p_c(Y,P,T,Z,S))
 798                                                  ;
 799   
 800  #balance without demand response
 801  #qbalance(Y,P,T,Z)..
 802  #                               sum(G, gen(Y,P,T,Z,G))
 803  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 804  #                                       =e=
 805  #                                               DEM_T(P,T,Z)
 806  #                                       #       - load_shedding(Y,P,T,Z)
 807  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 808  #                                               ;
 809  #DEM(Y,Z)*DEM_T(T,Z);
 810   
 811  #--Renewable target--#
 812   
 813  #qresprod(Y,C)..
 814  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 815  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 816  #                                       =l=
 817  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 818  #                                               ;
 819   
 820  qresprod(Y,C)..
 821                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 822                                          =g=
 823                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 824                                                  ;
 825   
 826  qco2lim(Y,C)..
 827  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 828  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 829                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 830                                          =l=
 831                                                  50000000*0.4
 832                                                  ;
 833   
 834  #--Reserve requirements--#
 835   
 836  qresendomin(Y,P,T,C,R,GRI)..
 837                                          q_endo(Y,P,T,C,R,GRI)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 838                                          =g=
 839                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 840                                                  ;
 841   
 842  qresendomax(Y,P,T,C,R,GRI)..
 843                                          q_endo(Y,P,T,C,R,GRI)
 844                                          =l=
 845                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 846                                                  ;
 847   
 848   
 849  qres(Y,P,T,C,R)..
 850                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 851                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 852                                          + sum(Z $ C_Z(C,Z), res_DR(Y,P,T,Z,R))
 853                                          =e=
 854                                                  R_EXO(C,R)
 855                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 856                                                  ;
 857   
 858  #--Dispatchable capacity--#
 859   
 860  #TODO: wich demand is needed here?
 861  qgendisp(Y,P,T,C)..
 862                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 863                                          =g=
 864                                                  sum(Z $ C_Z(C,Z), demand_unit(P,T,Z))*0.20
 865                                                  ;
 866   
 867  qgendisppeak(Y,C)..
 868                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 869                                          =g=
 870                                                  10000*1.20
 871                                                  ;
 872   
 873  #--Emissions--#
 874   
 875  qco2(Y,C,G)..
 876                                          co2(Y,C,G)
 877                                          =e=
 878                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 879                                                  ;
 880   
 881  qlcg(Y,C,G)..
 882                                          lcg(Y,C,G)
 883                                          =e=
 884                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 885                                                  ;
 886   
 887   
 888  #-----###########################----------------------------------------------#
 889  #-----# Generation technologies #----------------------------------------------#
 890  #-----###########################----------------------------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 891   
 892  ##--Installed generation capacities--#
 893   
 894  qpotcapmin(Y,C,G)..
 895                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 896                                          =g=
 897                                                  G_DATA(G,'CAP_MIN')
 898                                                  ;
 899   
 900  #qpotcapmax(Y,C,G)..
 901  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 902  #                                       =g=
 903  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 904  #                                               ;
 905  #
 906  #qpotgenmin(Y,C,G)..
 907  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 908  #                                       =g=
 909  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 910  #                                               ;
 911  #
 912  #qpotgenmax(Y,Z,G)..
 913  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 914  #                                       =g=
 915  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 916  #                                               ;
 917   
 918  #-------Dispatchable generation technologies-----------------------------------#
 919   
 920  #--Reserve allocation--#
 921   
 922  qresgcu(Y,P,T,Z,RU,GD)..
 923                                          res_g(Y,P,T,Z,RU,GD)
 924                                          =e=
 925                                                  res_g_s(Y,P,T,Z,RU,GD)
 926                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 927                                                  ;
 928   
 929  qresgcd(Y,P,T,Z,RD,GD)..
 930                                          res_g(Y,P,T,Z,RD,GD)
 931                                          =e=
 932                                                  res_g_s(Y,P,T,Z,RD,GD)
 933                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 934                                                  ;
 935   
 936  #--Clustering logical constraints--#
 937   
 938  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 939                                          n(Y,P,T+1,Z,GD)
 940                                          =e=
 941                                                  n(Y,P,T,Z,GD)
 942                                                  + n_su(Y,P,T,Z,GD)
 943                                                  - n_sd(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 944                                                  ;
 945   
 946  qnmax(Y,P,T,Z,GD)..
 947                                          n(Y,P,T,Z,GD)
 948                                          =l=
 949                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 950                                                  ;
 951   
 952  qnsu(Y,P,T,Z,GD)..
 953                                          n_su(Y,P,T,Z,GD)
 954                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 955                                          =l=
 956                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 957                                                  - n(Y,P,T,Z,GD)
 958                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 959                                                  ;
 960   
 961  qnsd(Y,P,T,Z,GD)..
 962                                          n_sd(Y,P,T,Z,GD)
 963                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 964                                          =l=
 965                                                  n(Y,P,T,Z,GD)
 966                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 967                                                  ;
 968   
 969  #--Generation constraints--#
 970   
 971  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 972                      gen(Y,P,T+1,Z,GD)
 973                      =e=
 974                          gen(Y,P,T,Z,GD)
 975                          + ramp_up(Y,P,T,Z,GD)
 976                          - ramp_dn(Y,P,T,Z,GD)
 977                          + ramp_su(Y,P,T,Z,GD)
 978                          - ramp_sd(Y,P,T,Z,GD)
 979                          ;
 980   
 981  qgenmin(Y,P,T,Z,GD)..
 982                                          gen(Y,P,T,Z,GD)
 983                                          =g=
 984                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 985                                                  ;
 986   
 987  qgenmax(Y,P,T,Z,GD)..
 988                                          gen(Y,P,T,Z,GD)
 989                                          =l=
 990                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 991                                                  ;
 992                                                  #*G_DATA(G,'PM')/100;
 993   
 994  #--Ramping constraints--#
 995   
 996  qrudyn(Y,P,T,Z,GD)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 997                      ramp_up(Y,P,T,Z,GD)
 998                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 999                      =l=
1000                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1001                          ;
1002   
1003  qrucap(Y,P,T,Z,GD)..
1004                      ramp_up(Y,P,T,Z,GD)
1005                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1006                      =l=
1007                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
1008                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
1009                          ;
1010   
1011  qrddyn(Y,P,T,Z,GD)..
1012                      ramp_dn(Y,P,T,Z,GD)
1013                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1014                      =l=
1015                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1016                          ;
1017   
1018  qrdcap(Y,P,T,Z,GD)..
1019                      ramp_dn(Y,P,T,Z,GD)
1020                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1021                      =l=
1022                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
1023                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
1024                          ;
1025   
1026  qsumin(Y,P,T,Z,GD)..
1027                                          ramp_su(Y,P,T,Z,GD)
1028                                          =g=
1029                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1030                                                  ;
1031   
1032  qsumax(Y,P,T,Z,GD)..
1033                                          ramp_su(Y,P,T,Z,GD)
1034                                          =l=
1035                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1036                                                  ;
1037   
1038  qsdmin(Y,P,T,Z,GD)..
1039                                          ramp_sd(Y,P,T,Z,GD)
1040                                          =g=
1041                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1042                                                  ;
1043   
1044  qsdmax(Y,P,T,Z,GD)..
1045                                          ramp_sd(Y,P,T,Z,GD)
1046                                          =l=
1047                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1048                                                  ;
1049   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1050  #--Reserve allocation constraints--#
1051   
1052  qrufu(Y,P,T,Z,GD)..
1053                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
1054                      =l=
1055                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
1056                          ;
1057   
1058  qruau(Y,P,T,Z,GD)..
1059                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
1060                      =l=
1061                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1062                          ;
1063   
1064  qrumus(Y,P,T,Z,GD)..
1065                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1066                      =l=
1067                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1068                          ;
1069   
1070  qrdad(Y,P,T,Z,GD)..
1071                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
1072                      =l=
1073                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1074                          ;
1075   
1076  qrdmd(Y,P,T,Z,GD)..
1077                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1078                      =l=
1079                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1080                          ;
1081   
1082  qrunsmin(Y,P,T,Z,RU,GD)..
1083                                          res_g_ns(Y,P,T,Z,RU,GD)
1084                                          =g=
1085                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
1086                                                  ;
1087   
1088  qrunsmax(Y,P,T,Z,RU,GD)..
1089                                          res_g_ns(Y,P,T,Z,RU,GD)
1090                                          =l=
1091                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
1092                                                  ;
1093   
1094  qrdsdmin(Y,P,T,Z,RD,GD)..
1095                                          res_g_sd(Y,P,T,Z,RD,GD)
1096                                          =g=
1097                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1098                                                  ;
1099   
1100  qrdsdmax(Y,P,T,Z,RD,GD)..
1101                                          res_g_sd(Y,P,T,Z,RD,GD)
1102                                          =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1103                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1104                                                  ;
1105   
1106  #-------Intermittent renewable generation technologies-------------------------#
1107   
1108  #--Reserve allocation--#
1109   
1110  qresgru(Y,P,T,Z,RU,GRI)..
1111                                          res_g(Y,P,T,Z,RU,GRI)
1112                                          =e=
1113                                                  0
1114                                                  ;
1115   
1116  #--Output and curtailment constraint--#
1117   
1118  qgenr(Y,P,T,Z,GRI)..
1119                      gen(Y,P,T,Z,GRI)
1120                      + curt(Y,P,T,Z,GRI)
1121                      + curt_dummy(Y,P,T,Z,GRI)
1122                      =e=
1123                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1124                          ;
1125   
1126  #--Reserve allocation constraints--#
1127   
1128  qresgrdr(Y,P,T,Z,GRI)..
1129                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1130                                          =l=
1131                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1132                                                  ;
1133   
1134  qresgrdg(Y,P,T,Z,GRI)..
1135                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1136                                          =l=
1137                                                  gen(Y,P,T,Z,GRI)
1138                                                  ;
1139   
1140  #-----########################-------------------------------------------------#
1141  #-----# Storage technologies #-------------------------------------------------#
1142  #-----########################-------------------------------------------------#
1143   
1144  #-------General constraints----------------------------------------------------#
1145   
1146  #--Reserve allocation--#
1147   
1148  qress(Y,P,T,Z,R,S)..
1149                                          res_s(Y,P,T,Z,R,S)
1150                                          =e=
1151                                                  res_s_c(Y,P,T,Z,R,S)
1152                                                  + res_s_d(Y,P,T,Z,R,S)
1153                                                  ;
1154   
1155  #--Installed capacities--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1156   
1157  qspotcapmin(Y,C,S)..
1158                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1159                                          =g=
1160                                                  S_DATA(S,'CAP_MIN')
1161                                                  ;
1162   
1163  qspotcapmax(Y,C,S)..
1164                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1165                                          =l=
1166                                                  S_DATA(S,'CAP_MAX')
1167                                                  ;
1168   
1169  #-------Short- and mid-term storage--------------------------------------------#
1170   
1171  #--Energy constraints--#
1172   
1173  qe(Y,P,Z,SSM)..
1174                                          e(Y,P++1,Z,SSM)
1175                                          =e=
1176                                                  e(Y,P,Z,SSM)
1177                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1178                                                  ;
1179   
1180  qemax(Y,P,Z,SSM)..
1181                                          e(Y,P,Z,SSM)
1182                                          =l=
1183                                                  e_cap(Y,Z,SSM)
1184                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1185                                                  ;
1186   
1187  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1188                                          e_f(Y,P,T,Z,SSM)
1189                                          =e=
1190                                                  e(Y,P,Z,SSM)
1191                                                  ;
1192   
1193  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1194                                          e_f(Y,P,T+1,Z,SSM)
1195                                          =e=
1196                                                  e_f(Y,P,T,Z,SSM)
1197                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1198                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1199                                                  ;
1200   
1201  qefmin(Y,P,T,Z,SSM)..
1202                                          e_f(Y,P,T,Z,SSM)
1203                                          =g=
1204                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1205                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1206                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1207                                                  ;
1208  qefmax(Y,P,T,Z,SSM)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1209                                          e_f(Y,P,T,Z,SSM)
1210                                          =l=
1211                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1212                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1213                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1214                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1215                                                  ;
1216   
1217  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1218                                          e_l(Y,P,T,Z,SSM)
1219                                          =e=
1220                                                  e(Y,P,Z,SSM)
1221                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1222                                                  ;
1223   
1224  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1225                                          e_l(Y,P,T+1,Z,SSM)
1226                                          =e=
1227                                                  e_l(Y,P,T,Z,SSM)
1228                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1229                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1230                                                  ;
1231   
1232  qelmin(Y,P,T,Z,SSM)..
1233                                          e_l(Y,P,T,Z,SSM)
1234                                          =g=
1235                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1236                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1237                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1238                                                  ;
1239  qelmax(Y,P,T,Z,SSM)..
1240                                          e_l(Y,P,T,Z,SSM)
1241                                          =l=
1242                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1243                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1244                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1245                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1246                                                  ;
1247   
1248  #--Duration limits--#
1249   
1250  qdurmin(Y,Z,SSM)..
1251                                          e_cap(Y,Z,SSM)
1252                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1253                                          =g=
1254                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1255                                                  ;
1256   
1257  qdurmax(Y,Z,SSM)..
1258                                          e_cap(Y,Z,SSM)
1259                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1260                                          =l=
1261                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1262                                                  ;
1263   
1264  #-------Short-term storage-----------------------------------------------------#
1265   
1266  #--Charging constraints--#
1267   
1268  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1269                                          p_c(Y,P,T+1,Z,SS)
1270                                          =e=
1271                                                  p_c(Y,P,T,Z,SS)
1272                                                  + ramp_c_up(Y,P,T,Z,SS)
1273                          - ramp_c_dn(Y,P,T,Z,SS)
1274                          ;
1275   
1276  qsscru(Y,P,T,Z,SS)..
1277                      ramp_c_up(Y,P,T,Z,SS)
1278                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1279                      =l=
1280                          p_cap_c(Y,Z,SS)
1281                          - p_c(Y,P,T,Z,SS)
1282                          ;
1283   
1284  qsscrd(Y,P,T,Z,SS)..
1285                      ramp_c_dn(Y,P,T,Z,SS)
1286                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1287                      =l=
1288                          p_c(Y,P,T,Z,SS)
1289                          ;
1290   
1291  #--Discharging constraints--#
1292   
1293  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1294                          p_d(Y,P,T+1,Z,SS)
1295                          =e=
1296                                  p_d(Y,P,T,Z,SS)
1297                                  + ramp_d_up(Y,P,T,Z,SS)
1298                          - ramp_d_dn(Y,P,T,Z,SS)
1299                          ;
1300   
1301  qssdru(Y,P,T,Z,SS)..
1302                      ramp_d_up(Y,P,T,Z,SS)
1303                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1304                      =l=
1305                          p_cap_c(Y,Z,SS)
1306                          - p_d(Y,P,T,Z,SS)
1307                          ;
1308   
1309  qssdrd(Y,P,T,Z,SS)..
1310                      ramp_d_dn(Y,P,T,Z,SS)
1311                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1312                      =l=
1313                          p_d(Y,P,T,Z,SS)
1314                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1315   
1316  #-------Mid and long-term storage----------------------------------------------#
1317   
1318  #--Reserve allocation--#
1319   
1320  qresscu(Y,P,T,Z,RU,SML)..
1321                                          res_s_c(Y,P,T,Z,RU,SML)
1322                                          =e=
1323                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1324                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1325                                                  ;
1326   
1327  qresscd(Y,P,T,Z,RD,SML)..
1328                                          res_s_c(Y,P,T,Z,RD,SML)
1329                                          =e=
1330                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1331                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1332                                                  ;
1333   
1334  qressdu(Y,P,T,Z,RU,SM)..
1335                                          res_s_d(Y,P,T,Z,RU,SM)
1336                                          =e=
1337                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1338                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1339                                                  ;
1340   
1341  qressdd(Y,P,T,Z,RD,SM)..
1342                                          res_s_d(Y,P,T,Z,RD,SM)
1343                                          =e=
1344                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1345                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1346                                                  ;
1347   
1348  #--Charging logical constraints--#
1349   
1350  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1351                                          n_c(Y,P,T+1,Z,SML)
1352                                          =e=
1353                                                  n_c(Y,P,T,Z,SML)
1354                                                  + n_c_su(Y,P,T,Z,SML)
1355                                                  - n_c_sd(Y,P,T,Z,SML)
1356                                                  ;
1357   
1358  qncmax(Y,P,T,Z,SML)..
1359                                          n_c(Y,P,T,Z,SML)
1360                                          =l=
1361                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1362                                                  ;
1363   
1364  qncsu(Y,P,T,Z,SML)..
1365                                          n_c_su(Y,P,T,Z,SML)
1366                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1367                                          =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1368                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1369                                                  - n_c(Y,P,T,Z,SML)
1370                                                  ;
1371   
1372  qncsd(Y,P,T,Z,SML)..
1373                                          n_c_sd(Y,P,T,Z,SML)
1374                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1375                                          =l=
1376                                                  n_c(Y,P,T,Z,SML)
1377                                                  ;
1378   
1379  #--Charging constraints--#
1380   
1381  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1382                      p_c(Y,P,T+1,Z,SML)
1383                      =e=
1384                          p_c(Y,P,T,Z,SML)
1385                          + ramp_c_up(Y,P,T,Z,SML)
1386                          - ramp_c_dn(Y,P,T,Z,SML)
1387                          + ramp_c_su(Y,P,T,Z,SML)
1388                          - ramp_c_sd(Y,P,T,Z,SML)
1389                          ;
1390   
1391  qsmlcmin(Y,P,T,Z,SML)..
1392                                          p_c(Y,P,T,Z,SML)
1393                                          =g=
1394                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1395                                                  ;
1396   
1397  qsmlcmax(Y,P,T,Z,SML)..
1398                                          p_c(Y,P,T,Z,SML)
1399                                          =l=
1400                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1401                                                  ;
1402   
1403  #--Charging ramping constraints--#
1404   
1405  qcrudyn(Y,P,T,Z,SML)..
1406                      ramp_c_up(Y,P,T,Z,SML)
1407                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1408                      =l=
1409                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1410                          ;
1411   
1412  qcrucap(Y,P,T,Z,SML)..
1413                      ramp_c_up(Y,P,T,Z,SML)
1414                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1415                      =l=
1416                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1417                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1418                          ;
1419   
1420  qcrddyn(Y,P,T,Z,SML)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1421                      ramp_c_dn(Y,P,T,Z,SML)
1422                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1423                      =l=
1424                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1425                          ;
1426   
1427  qcrdcap(Y,P,T,Z,SML)..
1428                      ramp_c_dn(Y,P,T,Z,SML)
1429                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1430                      =l=
1431                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1432                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1433                          ;
1434   
1435  qcsumin(Y,P,T,Z,SML)..
1436                                          ramp_c_su(Y,P,T,Z,SML)
1437                                          =g=
1438                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1439                                                  ;
1440   
1441  qcsumax(Y,P,T,Z,SML)..
1442                                          ramp_c_su(Y,P,T,Z,SML)
1443                                          =l=
1444                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1445                                                  ;
1446   
1447  qcsdmin(Y,P,T,Z,SML)..
1448                                          ramp_c_sd(Y,P,T,Z,SML)
1449                                          =g=
1450                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1451                                                  ;
1452   
1453  qcsdmax(Y,P,T,Z,SML)..
1454                                          ramp_c_sd(Y,P,T,Z,SML)
1455                                          =l=
1456                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1457                                                  ;
1458   
1459  #--Reserve allocation constraints--#
1460   
1461  qcruad(Y,P,T,Z,SML)..
1462                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1463                      =l=
1464                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1465                          ;
1466   
1467  qcrumd(Y,P,T,Z,SML)..
1468                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1469                      =l=
1470                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1471                          ;
1472   
1473  qcrdfu(Y,P,T,Z,SML)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1474                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1475                      =l=
1476                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1477                          ;
1478   
1479  qcrdau(Y,P,T,Z,SML)..
1480                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1481                      =l=
1482                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1483                          ;
1484   
1485  qcrdmus(Y,P,T,Z,SML)..
1486                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1487                      =l=
1488                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1489                          ;
1490   
1491  qcrunsmin(Y,P,T,Z,RD,SML)..
1492                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1493                                          =g=
1494                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1495                                                  ;
1496   
1497  qcrunsmax(Y,P,T,Z,RD,SML)..
1498                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1499                                          =l=
1500                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1501                                                  ;
1502   
1503  qcrdsdmin(Y,P,T,Z,RU,SML)..
1504                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1505                                          =g=
1506                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1507                                                  ;
1508   
1509  qcrdsdmax(Y,P,T,Z,RU,SML)..
1510                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1511                                          =l=
1512                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1513                                                  ;
1514   
1515  #-------Mid-term storage-------------------------------------------------------#
1516   
1517  qcapdeqcapc(Y,Z,SM)..
1518                                          p_cap_d(Y,Z,SM)
1519                                          =e=
1520                                                  p_cap_c(Y,Z,SM)
1521                                                  ;
1522   
1523  #--Discharging logical constraints--#
1524   
1525  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1526                                          n_d(Y,P,T+1,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1527                                          =e=
1528                                                  n_d(Y,P,T,Z,SM)
1529                                                  + n_d_su(Y,P,T,Z,SM)
1530                                                  - n_d_sd(Y,P,T,Z,SM)
1531                                                  ;
1532   
1533  qndmax(Y,P,T,Z,SM)..
1534                                          n_d(Y,P,T,Z,SM)
1535                                          =l=
1536                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1537                                                  ;
1538   
1539  qndsu(Y,P,T,Z,SM)..
1540                                          n_d_su(Y,P,T,Z,SM)
1541                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1542                                          =l=
1543                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1544                                                  - n_d(Y,P,T,Z,SM)
1545                                                  ;
1546   
1547  qndsd(Y,P,T,Z,SM)..
1548                                          n_d_sd(Y,P,T,Z,SM)
1549                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1550                                          =l=
1551                                                  n_d(Y,P,T,Z,SM)
1552                                                  ;
1553   
1554  #--Discharging constraints--#
1555   
1556  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1557                      p_d(Y,P,T+1,Z,SM)
1558                      =e=
1559                          p_d(Y,P,T,Z,SM)
1560                          + ramp_d_up(Y,P,T,Z,SM)
1561                          - ramp_d_dn(Y,P,T,Z,SM)
1562                          + ramp_d_su(Y,P,T,Z,SM)
1563                          - ramp_d_sd(Y,P,T,Z,SM)
1564                          ;
1565   
1566  qsmdmin(Y,P,T,Z,SM)..
1567                                          p_d(Y,P,T,Z,SM)
1568                                          =g=
1569                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1570                                                  ;
1571   
1572  qsmdmax(Y,P,T,Z,SM)..
1573                                          p_d(Y,P,T,Z,SM)
1574                                          =l=
1575                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1576                                                  ;
1577   
1578  #--Discharging ramping constraints--#
1579   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1580  qdrudyn(Y,P,T,Z,SM)..
1581                      ramp_d_up(Y,P,T,Z,SM)
1582                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1583                      =l=
1584                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1585                          ;
1586   
1587  qdrucap(Y,P,T,Z,SM)..
1588                      ramp_d_up(Y,P,T,Z,SM)
1589                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1590                      =l=
1591                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1592                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1593                          ;
1594   
1595  qdrddyn(Y,P,T,Z,SM)..
1596                      ramp_d_dn(Y,P,T,Z,SM)
1597                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1598                      =l=
1599                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1600                          ;
1601   
1602  qdrdcap(Y,P,T,Z,SM)..
1603                      ramp_d_dn(Y,P,T,Z,SM)
1604                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1605                      =l=
1606                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1607                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1608                          ;
1609   
1610  qdsumin(Y,P,T,Z,SM)..
1611                                          ramp_d_su(Y,P,T,Z,SM)
1612                                          =g=
1613                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1614                                                  ;
1615   
1616  qdsumax(Y,P,T,Z,SM)..
1617                                          ramp_d_su(Y,P,T,Z,SM)
1618                                          =l=
1619                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1620                                                  ;
1621   
1622  qdsdmin(Y,P,T,Z,SM)..
1623                                          ramp_d_sd(Y,P,T,Z,SM)
1624                                          =g=
1625                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1626                                                  ;
1627   
1628  qdsdmax(Y,P,T,Z,SM)..
1629                                          ramp_d_sd(Y,P,T,Z,SM)
1630                                          =l=
1631                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1632                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1633   
1634  #--Reserve allocation constraints--#
1635   
1636  qdrufu(Y,P,T,Z,SM)..
1637                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1638                      =l=
1639                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1640                          ;
1641   
1642  qdruau(Y,P,T,Z,SM)..
1643                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1644                      =l=
1645                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1646                          ;
1647   
1648  qdrumus(Y,P,T,Z,SM)..
1649                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1650                      =l=
1651                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1652                          ;
1653   
1654  qdrdad(Y,P,T,Z,SM)..
1655                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1656                      =l=
1657                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1658                          ;
1659   
1660  qdrdmd(Y,P,T,Z,SM)..
1661                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1662                      =l=
1663                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1664                          ;
1665   
1666  qdrunsmin(Y,P,T,Z,RU,SM)..
1667                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1668                                          =g=
1669                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1670                                                  ;
1671   
1672  qdrunsmax(Y,P,T,Z,RU,SM)..
1673                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1674                                          =l=
1675                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1676                                                  ;
1677   
1678  qdrdsdmin(Y,P,T,Z,RD,SM)..
1679                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1680                                          =g=
1681                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1682                                                  ;
1683   
1684  qdrdsdmax(Y,P,T,Z,RD,SM)..
1685                                          res_s_d_sd(Y,P,T,Z,RD,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1686                                          =l=
1687                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1688                                                  ;
1689   
1690  #-------Long-term storage------------------------------------------------------#
1691   
1692  #--Discharging reserve allocation--#
1693   
1694  qslressd(Y,P,T,Z,R,SL)..
1695                                          res_s_d(Y,P,T,Z,R,SL)
1696                                          =e=
1697                                                  0
1698                                                  ;
1699   
1700  #--Gas energy balance--#
1701   
1702  qgase(Y,P,C)..
1703                                          eg(Y,P++1,C)
1704                                          =e=
1705                                                  eg(Y,P,C)
1706                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1707                                                  ;
1708   
1709  qgasemax(Y,P,C)..
1710                                          eg(Y,P,C)
1711                                          =l=
1712                                                  E_LP
1713                                                  + eg_cap
1714                                                  ;
1715   
1716  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1717                                          eg_f(Y,P,T+1,C)
1718                                          =e=
1719                                                  eg_f(Y,P,T,C)
1720                                                  + pg_c(Y,P,T,C)
1721                                                  - pg_d(Y,P,T,C)
1722                                                  ;
1723   
1724  qgasefmax(Y,P,T,C)..
1725                                          eg_f(Y,P,T,C)
1726                                          =l=
1727                                                  E_LP
1728                                                  + eg_cap
1729                                                  ;
1730   
1731  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1732                                          eg_f(Y,P,T,C)
1733                                          =e=
1734                                                  eg(Y,P,C)
1735                                                  ;
1736   
1737  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1738                                          eg_l(Y,P,T+1,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1739                                          =e=
1740                                                  eg_l(Y,P,T,C)
1741                                                  + pg_c(Y,P,T,C)
1742                                                  - pg_d(Y,P,T,C)
1743                                                  ;
1744   
1745  qgaselmax(Y,P,T,C)..
1746                                          eg_l(Y,P,T,C)
1747                                          =l=
1748                                                  E_LP
1749                                                  + eg_cap
1750                                                  ;
1751   
1752  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1753                                          eg_l(Y,P,T,C)
1754                                          =e=
1755                                                  eg(Y,P,C)
1756                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1757                                                  ;
1758   
1759  #--Gas charging constraints--#
1760   
1761  qgasc(Y,P,T,C)..
1762                                          pg_c(Y,P,T,C)
1763                                          =e=
1764                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1765                                                  + pg_import(Y,P,T,C)
1766                                                  ;
1767   
1768  #--Gas discharging constraints--#
1769   
1770  qgasd(Y,P,T,C)..
1771                                          pg_d(Y,P,T,C)
1772                                          =e=
1773                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1774                                                  ;
1775   
1776  #--Gas usage--#
1777   
1778  qgasuse(Y,C)..
1779                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1780                                          =l=
1781                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1782                                                  ;
1783   
1784  qgasusegen(Y,P,T,Z,GCG)..
1785                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1786                                          =e=
1787                                                  pg_syn(Y,P,T,Z,GCG)
1788                                                  + pg_fos(Y,P,T,Z,GCG)
1789                                                  ;
1790   
1791  ################################################
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1792  # DEMAND RESPONSE
1793  ################################################
1794   
1795  # always included in this manner
1796   
1797  sum_demand(P,T,Z)..
1798                      demand_unit(P,T,Z) =e= DEM_NON_RES(P,T,Z) + demand_new_res(P,T,Z)
1799                      ;
1800   
1801  totdemand2(P,Z)..
1802                                          demand_tot(P,Z) =e= sum(T,demand_new_res(P,T,Z) + DEM_NON_RES(P,T,Z))
1803  #                                       demand_tot(P,Z) =e= sum(T,DEM_REF_RES(P,T,Z))
1804                                          ;
1805   
1806  refdemand(P,T,Z)..
1807                                          demand_ref(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + DEM_NON_RES(P,T,Z)
1808                                          ;
1809   
1810   
1811   
1812  ##################################
1813   
1814  # change used equation depending on with or withourt demand response
1815   
1816  demand(P,T,Z)..
1817                                          demand_new_res(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_OPTIMAL(P,T,Z)/PRICE_REF(P,H,Z))*(price_unit(P,H,Z)-PRICE_REF(P,H,Z)))
1818  #                                       demand_new_res(P,T,Z) =e= DEM_REF_RES(P,T,Z)
1819                                          ;
1820   
1821  price_clone(P,T,Z)..
1822                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1823  #                                       price_unit_clone(P,T,Z) =e= PRICE_REF(P,H,Z)
1824                                          ;
1825   
1826  totdemand(P,Z)..
1827                                          sum(T,DEM_OPTIMAL(P,T,Z)) =l= sum(T,demand_new_res(P,T,Z))
1828  #                                       sum(T,DEM_REF_RES(P,T,Z)+eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))) =l= sum(T,demand_new_res(P,T,Z))
1829                                          ;
1830   
1831  ##################################
1832   
1833  # reserve allocation
1834   
1835  qresdrup(Y,P,T,Z)..
1836                      sum(RU,res_DR(Y,P,T,Z,RU)) =l= (demand_new_res(P,T,Z) - DEM_RES_MIN(P,T,Z))*FACTOR_RES_DR
1837                      ;
1838   
1839  qresdrdo(Y,P,T,Z)..
1840                      sum(RD,res_DR(Y,P,T,Z,RD)) =l= (DEM_RES_MAX(P,T,Z) - demand_new_res(P,T,Z))*FACTOR_RES_DR
1841                      ;
1842   
1843  # residential consumption upper and lower limit
1844   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1845  demand_max(P,T,Z)..
1846                      demand_new_res(P,T,Z) =l= DEM_RES_MAX(P,T,Z)
1847                      ;
1848   
1849  demand_min(P,T,Z)..
1850                      demand_new_res(P,T,Z) =g= DEM_RES_MIN(P,T,Z)
1851                      ;
1852   
1853  # auxilliary
1854   
1855  demand_clone(P,H,Z)..
1856                                          demand_new_res_clone(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*DIAG(T,H))
1857                                          ;
1858   
1859   
1860  surplusdemand(P,T,Z)..
1861                                          surplus(P,T,Z) =e= eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))
1862                                          ;
1863   
1864  #price(P,H,Z)..
1865  #                                       (price_unit(P,H,Z) - PRICE_REF(P,H,Z))*sum(H,ELAST(T,H)*(DEM_REF_RES(P,T,Z)/PRICE_REF(P,H,Z))) =e= (demand_new_res(P,T,Z)-DEM_REF_RES(P,T,Z))
1866  #                                       ;
1867   
1868  shiftedaway(P,H,Z)..
1869                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1870                                          ;
1871   
1872  shiftedawaytotal(P,Z)..
1873                                          shiftaway_total(P,Z) =e= sum(H,shift_up(P,H,Z)-shift_down(P,H,Z))
1874                                          ;
1875   
1876  shiftedforward(P,H,Z)..
1877                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1878                                          ;
1879   
1880  shiftedforwardtotal(P,Z)..
1881  #                                       shiftforwards_total(P,Z) =e= sum(H,shiftforwards(P,H,Z))
1882                                          shiftforwards_total(P,Z) =e= sum(H,front_up(P,H,Z)-back_down(P,H,Z))
1883                                          ;
1884   
1885  shiftedbackward(P,H,Z)..
1886                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1887                                          ;
1888   
1889  shiftedbackwardtotal(P,Z)..
1890  #                                       shiftbackwards_total(P,Z) =e= sum(H,shiftbackwards(P,H,Z))
1891                                          shiftbackwards_total(P,Z) =e= sum(H,back_up(P,H,Z)-front_down(P,H,Z))
1892                                          ;
1893   
1894  shiftconstraint_frame_1(P,H,Z)..
1895                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1896                                          ;
1897   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1898  shiftconstraint_frame_2(P,H,Z)..
1899                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMAX(H,T)) =g= sum(T,demand_new_res(P,T,Z)*SHIFTMIN(H,T))
1900                                          ;
1901   
1902  shiftconstraint1(P,H,Z)..
1903                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1904                                          ;
1905   
1906  shiftconstraint2(P,H,Z)..
1907                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
1908                                          ;
1909   
1910  priceconstraint1(P,H,Z)..
1911                                          price_unit(P,H,Z) =l= PRICE_REF(P,H,Z)+PRICE_REF(P,H,Z)*LIMITPRICE
1912                                          ;
1913   
1914  priceconstraint2(P,H,Z)..
1915                                          price_unit(P,H,Z) =g= PRICE_REF(P,H,Z)-PRICE_REF(P,H,Z)*LIMITPRICE
1916                                          ;
1917   
1918  demlimitunder(P,T,Z)..
1919                                          DEM_OPTIMAL(P,T,Z) - LIMITDEM =l= demand_new_res(P,T,Z)
1920                                          ;
1921   
1922  demlimitupper(P,T,Z)..
1923                                          DEM_OPTIMAL(P,T,Z) + LIMITDEM =g= demand_new_res(P,T,Z)
1924                                          ;
1925   
1926   
1927  #priceconstraint3(P,Z)..
1928  #                                       sum(T,price_unit(P,T,Z))/card(T) =e= PRICE_REF(P,H,Z)
1929  #                                       ;
1930   
1931   
1932  qinnerframe(P,H,Z)..
1933                                          innerframe(P,H,Z) =e= sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T))
1934                                          ;
1935   
1936  qouterframe(P,H,Z)..
1937                                          outerframe(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1938                                          ;
1939   
1940  fixedcost(Z)..
1941                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1942                                          ;
1943   
1944  variablecost(P,Z)..
1945                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1946                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1947                                          ;
1948   
1949  cost(Z)..
1950                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1951                                          ;
1952   
1953  ####################################
1954  # get downwards en upward numbers for front and back
1955  ####################################
1956   
1957  front_d_1(P,H,Z)..
1958                                          front_down(P,H,Z) =l= shiftforwards(P,H,Z)
1959                                          ;
1960   
1961  front_d_2(P,H,Z)..
1962                                          front_down(P,H,Z) =l= 0
1963                                          ;
1964   
1965  front_u_1(P,H,Z)..
1966                                          front_up(P,H,Z) =g= shiftforwards(P,H,Z)
1967                                          ;
1968   
1969  front_u_2(P,H,Z)..
1970                                          front_up(P,H,Z) =g= 0
1971                                          ;
1972   
1973  back_d_1(P,H,Z)..
1974                                          back_down(P,H,Z) =l= shiftbackwards(P,H,Z)
1975                                          ;
1976   
1977  back_d_2(P,H,Z)..
1978                                          back_down(P,H,Z) =l= 0
1979                                          ;
1980   
1981  back_u_1(P,H,Z)..
1982                                          back_up(P,H,Z) =g= shiftbackwards(P,H,Z)
1983                                          ;
1984   
1985  back_u_2(P,H,Z)..
1986                                          back_up(P,H,Z) =g= 0
1987                                          ;
1988   
1989  shift_d_1(P,H,Z)..
1990                                          shift_down(P,H,Z) =l= shiftaway(P,H,Z)
1991                                          ;
1992   
1993  shift_d_2(P,H,Z)..
1994                                          shift_down(P,H,Z) =l= 0
1995                                          ;
1996   
1997  shift_u_1(P,H,Z)..
1998                                          shift_up(P,H,Z) =g= shiftaway(P,H,Z)
1999                                          ;
2000   
2001  shift_u_2(P,H,Z)..
2002                                          shift_up(P,H,Z) =g= 0
2003                                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2004   
2005  # things that have to do with compensqtion mqtrix
2006  ###################################################
2007   
2008  shiftedfi(P,H,Z)..
2009                      shiftfi(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2010                      ;
2011   
2012  shiftedbi(P,H,Z)..
2013                      shiftbi(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2014                      ;
2015   
2016  shiftedfc(P,H,Z)..
2017                      shiftfc(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2018                      ;
2019   
2020  shiftedbc(P,H,Z)..
2021                      shiftbc(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2022                      ;
2023   
2024   
2025  MODEL GOA GOA model /
2026   
2027  #-------Objective function-----------------------------------------------------#
2028                  qobj
2029   
2030  #-------System constraints-----------------------------------------------------#
2031                  qbalance
2032   
2033                  qresprod
2034                  qco2lim
2035   
2036                  qresendomin
2037                  qresendomax
2038                  qres
2039   
2040                  #qgendisp
2041                  #qgendisppeak
2042   
2043                  qco2
2044                  qlcg
2045   
2046  #-------Generation technologies------------------------------------------------#
2047                  qpotcapmin
2048  #               qpotcapmax
2049  #               qpotgenmin
2050  #               qpotgenmax
2051   
2052  #--Conventional generation technologies--#
2053                  qresgcu
2054                  qresgcd
2055   
2056                  qn
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 41
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2057                  qnmax
2058                  qnsu
2059                  qnsd
2060   
2061                  qgen
2062                  qgenmin
2063                  qgenmax
2064   
2065                  qrudyn
2066                  qrucap
2067                  qrddyn
2068                  qrdcap
2069                  qsumin
2070                  qsumax
2071                  qsdmin
2072                  qsdmax
2073   
2074                  qrufu
2075                  qruau
2076                  qrumus
2077                  qrdad
2078                  qrdmd
2079                  qrunsmin
2080                  qrunsmax
2081                  qrdsdmin
2082                  qrdsdmax
2083   
2084  #--Intermittent renewable generation technologies--#
2085                  qresgru
2086   
2087                  qgenr
2088   
2089                  qresgrdr
2090                  qresgrdg
2091   
2092  #-------Storage technologies---------------------------------------------------#
2093  #--General constraints--#
2094                  qress
2095                  qspotcapmin
2096                  qspotcapmax
2097   
2098                  qe
2099                  qemax
2100                  qef
2101                  qefmin
2102                  qefmax
2103                  qefstart
2104                  qel
2105                  qelmin
2106                  qelmax
2107                  qelstart
2108   
2109                  qdurmin
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 42
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2110                  qdurmax
2111   
2112  #--Short-term storage--#
2113                  qssc
2114                  qsscru
2115                  qsscrd
2116   
2117                  qssd
2118                  qssdru
2119                  qssdrd
2120   
2121  #--Mid and long-term storage--#
2122                  qresscu
2123                  qresscd
2124                  qressdu
2125                  qressdd
2126   
2127                  qnc
2128                  qncmax
2129                  qncsu
2130                  qncsd
2131   
2132                  qsmlc
2133                  qsmlcmin
2134                  qsmlcmax
2135   
2136                  qcrudyn
2137                  qcrucap
2138                  qcrddyn
2139                  qcrdcap
2140                  qcsumin
2141                  qcsumax
2142                  qcsdmin
2143                  qcsdmax
2144   
2145                  qcruad
2146                  qcrumd
2147                  qcrdfu
2148                  qcrdau
2149                  qcrdmus
2150                  qcrunsmin
2151                  qcrunsmax
2152                  qcrdsdmin
2153                  qcrdsdmax
2154   
2155  #--Mid-term storage--#
2156                  qcapdeqcapc
2157   
2158                  qnd
2159                  qndmax
2160                  qndsu
2161                  qndsd
2162   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 43
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2163                  qsmd
2164                  qsmdmin
2165                  qsmdmax
2166   
2167                  qdrudyn
2168                  qdrucap
2169                  qdrddyn
2170                  qdrdcap
2171                  qdsumin
2172                  qdsumax
2173                  qdsdmin
2174                  qdsdmax
2175   
2176                  qdrufu
2177                  qdruau
2178                  qdrumus
2179                  qdrdad
2180                  qdrdmd
2181                  qdrunsmin
2182                  qdrunsmax
2183                  qdrdsdmin
2184                  qdrdsdmax
2185   
2186  #--Long-term storage--#
2187                  qslressd
2188   
2189                  qgase
2190                  qgasemax
2191                  qgasef
2192                  qgasefmax
2193                  qgasefstart
2194                  qgasel
2195                  qgaselmax
2196                  qgaselstart
2197   
2198                  qgasc
2199   
2200                  qgasd
2201   
2202                  qgasuse
2203                  qgasusegen
2204   
2205  #-- Price-elasticity--#
2206   
2207          #always included
2208                  totdemand2
2209                  refdemand
2210                  sum_demand
2211   
2212                  #always included, change equation
2213                  demand
2214  #               price_clone
2215   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 44
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2216                  #reserve allocation of flex demand
2217                  qresdrup
2218                  qresdrdo
2219   
2220                  ###########
2221                  ## Only for demand resposne
2222                  ###########
2223   
2224                  #limits shiftaway
2225  #               shiftconstraint1
2226  #               shiftconstraint2
2227   
2228                  #limits demand difference
2229  #               demlimitunder
2230  #               demlimitupper
2231   
2232                  #keeps demand between boundaries
2233          demand_max
2234          demand_min
2235   
2236  #               price
2237  #               demand_clone
2238   
2239  #               surplusdemand
2240   
2241                  shiftedaway
2242  #               shiftedforward
2243  #               shiftedbackward
2244   
2245  #               shiftedawaytotal
2246  #               shiftedforwardtotal
2247  #               shiftedbackwardtotal
2248   
2249                  priceconstraint1
2250                  priceconstraint2
2251  #               priceconstraint3
2252   
2253          ##########
2254          # include when working with moving frames, and set in wout_program -> factor back to 1
2255  #               shiftconstraint_frame_1
2256  #               shiftconstraint_frame_2
2257  #               totdemand
2258   
2259  #               qinnerframe
2260  #               qouterframe
2261   
2262  #               revenue
2263  #               fixedcost
2264  #               variablecost
2265  #               cost
2266   
2267  #               front_d_1
2268  #               front_d_2
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 45
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2269  #               front_u_1
2270  #               front_u_2
2271  #
2272  #               back_d_1
2273  #               back_d_2
2274  #               back_u_1
2275  #               back_u_2
2276  #
2277  #               shift_u_1
2278  #               shift_u_2
2279  #               shift_d_1
2280  #               shift_d_2
2281  #
2282  #        shiftedbc
2283  #        shiftedfc
2284  #        shiftedbi
2285  #        shiftedfi
2286   
2287  /;
2288   
2289   
2290   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME taking OF TYPE PARAM
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 46
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.031 SECONDS      5 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/26/16 01:50:33 Page 47
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.062 SECONDS      8 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
Output     C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.lst
Save       C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
