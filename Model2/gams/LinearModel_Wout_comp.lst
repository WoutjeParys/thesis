GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(P,T,H)                            Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  #COMPENSATE(P,H)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_NEW(P,T,H)        the new calculated elasticity matrix, taking into account the compensation factor
 337  DEM_REF_RES(P,T,Z)      amount of reference residential demand before DR
 338  DEM_NON_RES(P,T,Z)      amount of non residential demand
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 339  ELAST_COMP(P,T,H)       compensation PEM
 340  RATIO_H(P,H)            inbalance ratio
 341  LINEARPEM(T,H)          compensation PEM linear
 342  OWNELAST(T,H)           compensation PEM elast
 343   
 344  # data from DR model
 345  DEM_RES_MAX(P,T,Z)        max residential demand
 346  DEM_RES_MIN(P,T,Z)        min residential demand
 347  DEM_OPTIMAL(P,T,Z)        anchor point demand
 348  PRICE_REF(P,H,Z)          anchor point price
 349  DEM_RES_FP(P,T,Z)         prospected demand under flat price
 350   
 351  # factor of reserve allocation flexible damand
 352  FACTOR_RES_DR             factor that determines which part of the flexible band is used for flexibility
 353   
 354  DR_CAP_PRICE          a fictive price for mobilised DR capacity
 355  DR_EN_PRICE           a fictive price for mobilised DR energy
 356  ;
 357   
--- LOAD  G_DATA = 39:G_DATA
 358  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 359  $LOAD S_DATA
--- LOAD  RG = 41:RG
 360  $LOAD RG
--- LOAD  RSC = 42:RSC
 361  $LOAD RSC
--- LOAD  RSD = 43:RSD
 362  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 363  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 364  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 365  $LOAD REL_T
--- LOAD  W = 48:W
 366  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 367  $LOAD POL_TARGETS
 368  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 369  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 370  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 371  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 372  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 373  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 06/21/16 17:21:51 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 374  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 375  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 58:SHIFTMAX
 376  $LOAD SHIFTMAX
 377  #$LOAD COMPENSATE
--- LOAD  DEM_REF_RES = 60:DEM_REF_RES
--- LOAD  DEM_NON_RES = 59:DEM_NON_RES
 378  $LOAD DEM_REF_RES DEM_NON_RES
--- LOAD  RATIO_H = 61:RATIO_H
 379  $LOAD RATIO_H
--- LOAD  LINEARPEM = 62:LINEARPEM
--- LOAD  OWNELAST = 63:OWNELAST
 380  $LOAD LINEARPEM OWNELAST
--- LOAD  DEM_OPTIMAL = 66:DEM_OPTIMAL
--- LOAD  DEM_RES_MIN = 65:DEM_RES_MIN
--- LOAD  DEM_RES_MAX = 64:DEM_RES_MAX
--- LOAD  DEM_RES_FP = 68:DEM_RES_FP
--- LOAD  PRICE_REF = 67:PRICE_REF
 381  $LOAD DEM_OPTIMAL DEM_RES_MIN DEM_RES_MAX DEM_RES_FP PRICE_REF
 382   
 383   
 384  #C_GAS = 25.6643460843943;
 385  C_GAS = 25.6643460843943*2;
 386  T_MARKET = 1;
 387  EGCAPEX = 2000000000000000000000000;
 388  E_LP = 7100000;
 389  P_REF = 55.5;
 390  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 391  LIMITPRICE = 1.5;
 392  LIMITDEM = 1500;
 393  LIMITSHIFT = 3000;
 394  LENGTH_P = card(T);
 395  FACTOR_RES_DR = 1;
 396   
 397  DR_CAP_PRICE = 0;
 398  DR_EN_PRICE = 0;
 399   
 400  ############################
 401  ## CHOOSE STARTING DEMAND CURVE (Do not use!!!!!!!!)
 402  ###############
 403  #PRICE_REF(P,H,Z) = P_REF;
 404  #DEM_OPTIMAL(P,T,Z) = DEM_RES_FP(P,T,Z);
 405   
 406   
 407  ## flat compensation PEM
 408  #RATIO_H(P,H) = (-sum((T,Z),DIAG(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))-sum((T,Z),(TRI_UP(T,H)+TRI_LOW(T,H))*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))) /
 409  #                (sum((T,Z),(TRI_LOW(T,H)+TRI_UP(T,H))*DEM_OPTIMAL(P,T,Z)));
 410  #ELAST_COMP(P,T,H) = (TRI_LOW(T,H)+TRI_UP(T,H))*RATIO_H(P,H);
 411  ## linear compensation PEM
 412  #ELAST_COMP(P,T,H) = (LINEARPEM(T,H))*RATIO_H(P,H);
 413  ## Elastic compensation PEM
 414  RATIO_H(P,H) = (-sum((T,Z),DIAG(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))-sum((T,Z),(TRI_UP(T,H)+TRI_LOW(T,H))*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))) /
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 415                  (sum((T,Z),(TRI_LOW(T,H)+TRI_UP(T,H))*OWNELAST(T,H)*DEM_OPTIMAL(P,T,Z)));
 416  ELAST_COMP(P,T,H) = (OWNELAST(T,H))*RATIO_H(P,H);
 417  ## Moving frames compensation PEM = 0
 418  #ELAST_COMP(P,T,H) = 0;
 419  ELAST_NEW(P,T,H) = ELAST(P,T,H)+ELAST_COMP(P,T,H);
 420   
 421  eff_factor_earlier = 0.0;
 422  eff_factor_later = 0.0;
 423   
 424  VARIABLES
 425  obj                     Value of objective function
 426   
 427  #######################################################
 428   
 429  price_unit(P,H,Z)                               Residential price signal for the electricity
 430  price_unit_clone(P,T,Z)
 431   
 432  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 433  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 434  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 435  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 436  shiftaway(P,H,Z)                                Shift away from an hour
 437  shiftaway_total(P,Z)                    Shift away from a period
 438   
 439  shiftfi(P,H,Z)
 440  shiftbi(P,H,Z)
 441  shifta(P,H,Z)
 442  shiftfc(P,H,Z)
 443  shiftbc(P,H,Z)
 444   
 445  front_up(P,H,Z)
 446  front_down(P,H,Z)
 447  back_up(P,H,Z)
 448  back_down(P,H,Z)
 449  shift_up(P,H,Z)
 450  shift_down(P,H,Z)
 451   
 452  genDR(P,T,Z)
 453  capDR(Z)
 454  costgDR(Z)
 455  costcDR(Z)
 456  ;
 457   
 458  POSITIVE VARIABLES
 459  #######################################################
 460   
 461  demand_new_res(P,T,Z)           Residential demand after price signal applied
 462  demand_new_res_clone(P,H,Z)
 463  demand_unit(P,T,Z)                              demand of the electricity (sum residential & non-residential)
 464  demand_unit_clone(P,H,Z)
 465  demand_tot(P,Z)                                 total demand, based on demand_unit
 466  surplus(P,T,Z)
 467  demand_ref(P,T,Z)                               the reference demand with flat price
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 468  innerframe(P,H,Z)
 469  outerframe(P,H,Z)
 470   
 471  totalrevenue(P,Z)                               the product of demand and price
 472  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 473  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 474  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 475   
 476  #######################################################
 477   
 478  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 479  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 480  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 481  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 482  eg_cap                                          Gas storage capacity
 483   
 484  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 485  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 486   
 487  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 488  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 489  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 490  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 491  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 492  eg(Y,P,C)                                       Energy content of gas storage at period P
 493  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 494  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 495  pg_c(Y,P,T,C)                           Charging of gas storage
 496  pg_d(Y,P,T,C)                           Discharging of gas storage
 497   
 498  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 499  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 500  res_DR(Y,P,T,Z,R)             Reserve allocation of demand response for reserve category R
 501   
 502  load_shedding(Y,P,T,Z)          Load shedding
 503  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 504  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 505  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 506   
 507  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 508  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 509  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 510   
 511  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 512  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 513  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 514  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 515  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 516   
 517  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 518  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 519  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 520  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 521   
 522  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 523   
 524  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 525  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 526  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 527  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 528  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 529  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 530  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 531  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 532   
 533  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 534  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 535  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 536  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 537  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 538   
 539  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 540  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 541  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 542  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 543   
 544  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 545  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 546  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 547  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 548  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 549   
 550  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 551  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 552  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 553  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 554   
 555  pg_import(Y,P,T,C)                      Import of gas
 556  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 557  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 558   
 559  ;
 560   
 561  EQUATIONS
 562  #--Objective function--#
 563  qobj
 564   
 565  #--System constraints--#
 566  qbalance(Y,P,T,Z)
 567  qresprod(Y,C)
 568  qco2lim(Y,C)
 569  qresendomin(Y,P,T,C,R,GRI)
 570  qresendomax(Y,P,T,C,R,GRI)
 571  qres(Y,P,T,C,R)
 572  qgendisp(Y,P,T,C)
 573  qgendisppeak(Y,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 574  qco2(Y,C,G)
 575  qlcg(Y,C,G)
 576   
 577  #--Generation technologies--#
 578  qpotcapmin(Y,C,G)
 579  #qpotcapmax(Y,C,G)
 580  #qpotgenmin(Y,C,G)
 581  #qpotgenmax(Y,C,G)
 582   
 583  qresgcu(Y,P,T,Z,RU,GD)
 584  qresgcd(Y,P,T,Z,RD,GD)
 585  qn(Y,P,T,Z,GD)
 586  qnmax(Y,P,T,Z,GD)
 587  qnsu(Y,P,T,Z,GD)
 588  qnsd(Y,P,T,Z,GD)
 589  qgen(Y,P,T,Z,GD)
 590  qgenmin(Y,P,T,Z,GD)
 591  qgenmax(Y,P,T,Z,GD)
 592  qrudyn(Y,P,T,Z,GD)
 593  qrucap(Y,P,T,Z,GD)
 594  qrddyn(Y,P,T,Z,GD)
 595  qrdcap(Y,P,T,Z,GD)
 596  qsumin(Y,P,T,Z,GD)
 597  qsumax(Y,P,T,Z,GD)
 598  qsdmin(Y,P,T,Z,GD)
 599  qsdmax(Y,P,T,Z,GD)
 600  qrufu(Y,P,T,Z,GD)
 601  qruau(Y,P,T,Z,GD)
 602  qrumus(Y,P,T,Z,GD)
 603  qrdad(Y,P,T,Z,GD)
 604  qrdmd(Y,P,T,Z,GD)
 605  qrunsmin(Y,P,T,Z,RU,GD)
 606  qrunsmax(Y,P,T,Z,RU,GD)
 607  qrdsdmin(Y,P,T,Z,RD,GD)
 608  qrdsdmax(Y,P,T,Z,RD,GD)
 609   
 610  qresgru(Y,P,T,Z,RU,GRI)
 611  qgenr(Y,P,T,Z,GRI)
 612  qresgrdr(Y,P,T,Z,GRI)
 613  qresgrdg(Y,P,T,Z,GRI)
 614   
 615  #--Storage technologies--#
 616  qress(Y,P,T,Z,R,S)
 617  qspotcapmin(Y,C,S)
 618  qspotcapmax(Y,C,S)
 619   
 620  qe(Y,P,Z,S)
 621  qemax(Y,P,Z,S)
 622  qef(Y,P,T,Z,S)
 623  qefmin(Y,P,T,Z,S)
 624  qefmax(Y,P,T,Z,S)
 625  qefstart(Y,P,T,Z,S)
 626  qel(Y,P,T,Z,S)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 627  qelmin(Y,P,T,Z,S)
 628  qelmax(Y,P,T,Z,S)
 629  qelstart(Y,P,T,Z,S)
 630  qdurmin(Y,Z,S)
 631  qdurmax(Y,Z,S)
 632   
 633  qssc(Y,P,T,Z,SS)
 634  qsscru(Y,P,T,Z,SS)
 635  qsscrd(Y,P,T,Z,SS)
 636  qssd(Y,P,T,Z,SS)
 637  qssdru(Y,P,T,Z,SS)
 638  qssdrd(Y,P,T,Z,SS)
 639   
 640  qresscu(Y,P,T,Z,RU,SML)
 641  qresscd(Y,P,T,Z,RD,SML)
 642  qressdu(Y,P,T,Z,RU,SM)
 643  qressdd(Y,P,T,Z,RD,SM)
 644  qnc(Y,P,T,Z,SML)
 645  qncmax(Y,P,T,Z,SML)
 646  qncsu(Y,P,T,Z,SML)
 647  qncsd(Y,P,T,Z,SML)
 648  qsmlc(Y,P,T,Z,SML)
 649  qsmlcmin(Y,P,T,Z,SML)
 650  qsmlcmax(Y,P,T,Z,SML)
 651  qcrudyn(Y,P,T,Z,SML)
 652  qcrucap(Y,P,T,Z,SML)
 653  qcrddyn(Y,P,T,Z,SML)
 654  qcrdcap(Y,P,T,Z,SML)
 655  qcsumin(Y,P,T,Z,SML)
 656  qcsumax(Y,P,T,Z,SML)
 657  qcsdmin(Y,P,T,Z,SML)
 658  qcsdmax(Y,P,T,Z,SML)
 659  qcruad(Y,P,T,Z,SML)
 660  qcrumd(Y,P,T,Z,SML)
 661  qcrdfu(Y,P,T,Z,SML)
 662  qcrdau(Y,P,T,Z,SML)
 663  qcrdmus(Y,P,T,Z,SML)
 664  qcrunsmin(Y,P,T,Z,RD,SML)
 665  qcrunsmax(Y,P,T,Z,RD,SML)
 666  qcrdsdmin(Y,P,T,Z,RU,SML)
 667  qcrdsdmax(Y,P,T,Z,RU,SML)
 668   
 669  qcapdeqcapc(Y,Z,SM)
 670  qnd(Y,P,T,Z,SM)
 671  qndmax(Y,P,T,Z,SM)
 672  qndsu(Y,P,T,Z,SM)
 673  qndsd(Y,P,T,Z,SM)
 674  qsmd(Y,P,T,Z,SM)
 675  qsmdmin(Y,P,T,Z,SM)
 676  qsmdmax(Y,P,T,Z,SM)
 677  qdrudyn(Y,P,T,Z,SM)
 678  qdrucap(Y,P,T,Z,SM)
 679  qdrddyn(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 680  qdrdcap(Y,P,T,Z,SM)
 681  qdsumin(Y,P,T,Z,SM)
 682  qdsumax(Y,P,T,Z,SM)
 683  qdsdmin(Y,P,T,Z,SM)
 684  qdsdmax(Y,P,T,Z,SM)
 685  qdrufu(Y,P,T,Z,SM)
 686  qdruau(Y,P,T,Z,SM)
 687  qdrumus(Y,P,T,Z,SM)
 688  qdrdad(Y,P,T,Z,SM)
 689  qdrdmd(Y,P,T,Z,SM)
 690  qdrunsmin(Y,P,T,Z,RU,SM)
 691  qdrunsmax(Y,P,T,Z,RU,SM)
 692  qdrdsdmin(Y,P,T,Z,RD,SM)
 693  qdrdsdmax(Y,P,T,Z,RD,SM)
 694   
 695  qslressd(Y,P,T,Z,R,SL)
 696  qgase(Y,P,C)
 697  qgasemax(Y,P,C)
 698  qgasef(Y,P,T,C)
 699  qgasefmax(Y,P,T,C)
 700  qgasefstart(Y,P,T,C)
 701  qgasel(Y,P,T,C)
 702  qgaselmax(Y,P,T,C)
 703  qgaselstart(Y,P,T,C)
 704  qgasc(Y,P,T,C)
 705  qgasd(Y,P,T,C)
 706  qgasuse(Y,C)
 707  qgasusegen(Y,P,T,Z,GCG)
 708   
 709  ###############################
 710  #price(P,H,Z)
 711  price_clone(P,T,Z)
 712  demand(P,T,Z)
 713  demand_clone(P,H,Z)
 714   
 715  #data DR model
 716  demand_max(P,T,Z)
 717  demand_min(P,T,Z)
 718   
 719  # reserve allocation
 720  qresdrup(Y,P,T,Z)
 721  qresdrdo(Y,P,T,Z)
 722   
 723  # cost of DR
 724  gdr(P,T,Z)
 725  gdr2(P,T,Z)
 726  cdr(P,T,Z)
 727  cgdr(Z)
 728  ccdr(Z)
 729   
 730  sum_demand(P,T,Z)
 731  totdemand(P,Z)
 732  surplusdemand(P,T,Z)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 733  totdemand2(P,Z)
 734  refdemand(P,T,Z)
 735  refdemand2(Z)
 736  priceconstraint1(P,H,Z)
 737  priceconstraint2(P,H,Z)
 738  priceconstraint3(P,Z)
 739  shiftconstraint_frame_1(P,H,Z)
 740  shiftconstraint_frame_2(P,H,Z)
 741  shiftconstraint1(P,H,Z)
 742  shiftconstraint2(P,H,Z)
 743  shiftedforward(P,H,Z)
 744  shiftedforwardtotal(P,Z)
 745  shiftedbackward(P,H,Z)
 746  shiftedbackwardtotal(P,Z)
 747  shiftedaway(P,H,Z)
 748  shiftedawaytotal(P,Z)
 749   
 750  shiftedfi(P,H,Z)
 751  shiftedbi(P,H,Z)
 752  shiftedfc(P,H,Z)
 753  shiftedbc(P,H,Z)
 754   
 755  front_d_1(P,H,Z)
 756  front_d_2(P,H,Z)
 757  front_u_1(P,H,Z)
 758  front_u_2(P,H,Z)
 759   
 760  back_d_1(P,H,Z)
 761  back_d_2(P,H,Z)
 762  back_u_1(P,H,Z)
 763  back_u_2(P,H,Z)
 764   
 765  shift_d_1(P,H,Z)
 766  shift_d_2(P,H,Z)
 767  shift_u_1(P,H,Z)
 768  shift_u_2(P,H,Z)
 769   
 770  qinnerframe(P,H,Z)
 771  qouterframe(P,H,Z)
 772   
 773  revenue(P,Z)
 774  fixedcost(Z)
 775  variablecost(P,Z)
 776  cost(Z)
 777   
 778  demlimitunder(P,T,Z)
 779  demlimitupper(P,T,Z)
 780  ;
 781   
 782  #-----######################---------------------------------------------------#
 783  #-----# Objective function #---------------------------------------------------#
 784  #-----######################---------------------------------------------------#
 785  qobj..              obj
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 786                                          =e=
 787                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 788                                                  + sum((Y,Z,S),          (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 789                                                  + sum(Z,                DR_CAP_PRICE*1000*capDR(Z))
 790  #                                                + sum((Y,Z,S),         (S_DATA(S,'C_P_D_INV')*1000)*p_cap_d(Y,Z,S))
 791  #                                                + sum((Y,Z,S),         (S_DATA(S,'C_E')*1000)*e_cap(Y,Z,S))
 792                                                  +
 793                                                  (sum((Y,P,T,Z,G),       W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 794                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 795   
 796                                                  #+ sum((Y,P,T,Z,S),     W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 797                                                  + sum((Y,P,T,Z,GRI),    W(P)*(0)*curt(Y,P,T,Z,GRI) + W(P)*(1000000)*curt_dummy(Y,P,T,Z,GRI))
 798                                                  + sum((Y,P,T,Z),        W(P)*(10000)*load_shedding(Y,P,T,Z))
 799                                                  + sum((P,T,Z),          W(P)*genDR(P,T,Z)*DR_EN_PRICE)
 800                                                  )
 801                                                  *(168/card(T));
 802                                                  ;
 803   
 804   
 805   
 806   
 807  #-----######################---------------------------------------------------#
 808  #-----# System constraints #---------------------------------------------------#
 809  #-----######################---------------------------------------------------#
 810   
 811  #--System balance--#
 812   
 813  # balance with demand response
 814  qbalance(Y,P,T,Z)..
 815                                  sum(G, gen(Y,P,T,Z,G))
 816                                  + sum(SSM, p_d(Y,P,T,Z,SSM))
 817                                          =e=
 818                                                  demand_unit(P,T,Z)
 819                                                  - load_shedding(Y,P,T,Z)
 820                                                  + sum(S, p_c(Y,P,T,Z,S))
 821                                                  ;
 822   
 823  #balance without demand response
 824  #qbalance(Y,P,T,Z)..
 825  #                               sum(G, gen(Y,P,T,Z,G))
 826  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 827  #                                       =e=
 828  #                                               DEM_T(P,T,Z)
 829  #                                       #       - load_shedding(Y,P,T,Z)
 830  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 831  #                                               ;
 832  #DEM(Y,Z)*DEM_T(T,Z);
 833   
 834  #--Renewable target--#
 835   
 836  #qresprod(Y,C)..
 837  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 838  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 839  #                                       =l=
 840  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 841  #                                               ;
 842   
 843  qresprod(Y,C)..
 844                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 845                                          =g=
 846                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 847                                                  ;
 848   
 849  qco2lim(Y,C)..
 850  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 851  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 852                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 853                                          =l=
 854                                                  50000000*0.4
 855                                                  ;
 856   
 857  #--Reserve requirements--#
 858   
 859  qresendomin(Y,P,T,C,R,GRI)..
 860                                          q_endo(Y,P,T,C,R,GRI)
 861                                          =g=
 862                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 863                                                  ;
 864   
 865  qresendomax(Y,P,T,C,R,GRI)..
 866                                          q_endo(Y,P,T,C,R,GRI)
 867                                          =l=
 868                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 869                                                  ;
 870   
 871   
 872  qres(Y,P,T,C,R)..
 873                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 874                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 875                                          + sum(Z $ C_Z(C,Z), res_DR(Y,P,T,Z,R))
 876                                          =e=
 877                                                  R_EXO(C,R)
 878                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 879                                                  ;
 880   
 881  #--Dispatchable capacity--#
 882   
 883  #TODO: wich demand is needed here?
 884  qgendisp(Y,P,T,C)..
 885                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 886                                          =g=
 887                                                  sum(Z $ C_Z(C,Z), demand_unit(P,T,Z))*0.20
 888                                                  ;
 889   
 890  qgendisppeak(Y,C)..
 891                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 892                                          =g=
 893                                                  10000*1.20
 894                                                  ;
 895   
 896  #--Emissions--#
 897   
 898  qco2(Y,C,G)..
 899                                          co2(Y,C,G)
 900                                          =e=
 901                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 902                                                  ;
 903   
 904  qlcg(Y,C,G)..
 905                                          lcg(Y,C,G)
 906                                          =e=
 907                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 908                                                  ;
 909   
 910   
 911  #-----###########################----------------------------------------------#
 912  #-----# Generation technologies #----------------------------------------------#
 913  #-----###########################----------------------------------------------#
 914   
 915  ##--Installed generation capacities--#
 916   
 917  qpotcapmin(Y,C,G)..
 918                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 919                                          =g=
 920                                                  G_DATA(G,'CAP_MIN')
 921                                                  ;
 922   
 923  #qpotcapmax(Y,C,G)..
 924  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 925  #                                       =g=
 926  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 927  #                                               ;
 928  #
 929  #qpotgenmin(Y,C,G)..
 930  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 931  #                                       =g=
 932  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 933  #                                               ;
 934  #
 935  #qpotgenmax(Y,Z,G)..
 936  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 937  #                                       =g=
 938  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 939  #                                               ;
 940   
 941  #-------Dispatchable generation technologies-----------------------------------#
 942   
 943  #--Reserve allocation--#
 944   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 945  qresgcu(Y,P,T,Z,RU,GD)..
 946                                          res_g(Y,P,T,Z,RU,GD)
 947                                          =e=
 948                                                  res_g_s(Y,P,T,Z,RU,GD)
 949                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 950                                                  ;
 951   
 952  qresgcd(Y,P,T,Z,RD,GD)..
 953                                          res_g(Y,P,T,Z,RD,GD)
 954                                          =e=
 955                                                  res_g_s(Y,P,T,Z,RD,GD)
 956                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 957                                                  ;
 958   
 959  #--Clustering logical constraints--#
 960   
 961  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 962                                          n(Y,P,T+1,Z,GD)
 963                                          =e=
 964                                                  n(Y,P,T,Z,GD)
 965                                                  + n_su(Y,P,T,Z,GD)
 966                                                  - n_sd(Y,P,T,Z,GD)
 967                                                  ;
 968   
 969  qnmax(Y,P,T,Z,GD)..
 970                                          n(Y,P,T,Z,GD)
 971                                          =l=
 972                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 973                                                  ;
 974   
 975  qnsu(Y,P,T,Z,GD)..
 976                                          n_su(Y,P,T,Z,GD)
 977                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 978                                          =l=
 979                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 980                                                  - n(Y,P,T,Z,GD)
 981                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 982                                                  ;
 983   
 984  qnsd(Y,P,T,Z,GD)..
 985                                          n_sd(Y,P,T,Z,GD)
 986                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 987                                          =l=
 988                                                  n(Y,P,T,Z,GD)
 989                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 990                                                  ;
 991   
 992  #--Generation constraints--#
 993   
 994  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 995                      gen(Y,P,T+1,Z,GD)
 996                      =e=
 997                          gen(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 998                          + ramp_up(Y,P,T,Z,GD)
 999                          - ramp_dn(Y,P,T,Z,GD)
1000                          + ramp_su(Y,P,T,Z,GD)
1001                          - ramp_sd(Y,P,T,Z,GD)
1002                          ;
1003   
1004  qgenmin(Y,P,T,Z,GD)..
1005                                          gen(Y,P,T,Z,GD)
1006                                          =g=
1007                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1008                                                  ;
1009   
1010  qgenmax(Y,P,T,Z,GD)..
1011                                          gen(Y,P,T,Z,GD)
1012                                          =l=
1013                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
1014                                                  ;
1015                                                  #*G_DATA(G,'PM')/100;
1016   
1017  #--Ramping constraints--#
1018   
1019  qrudyn(Y,P,T,Z,GD)..
1020                      ramp_up(Y,P,T,Z,GD)
1021                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1022                      =l=
1023                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1024                          ;
1025   
1026  qrucap(Y,P,T,Z,GD)..
1027                      ramp_up(Y,P,T,Z,GD)
1028                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1029                      =l=
1030                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
1031                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
1032                          ;
1033   
1034  qrddyn(Y,P,T,Z,GD)..
1035                      ramp_dn(Y,P,T,Z,GD)
1036                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1037                      =l=
1038                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1039                          ;
1040   
1041  qrdcap(Y,P,T,Z,GD)..
1042                      ramp_dn(Y,P,T,Z,GD)
1043                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1044                      =l=
1045                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
1046                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
1047                          ;
1048   
1049  qsumin(Y,P,T,Z,GD)..
1050                                          ramp_su(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1051                                          =g=
1052                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1053                                                  ;
1054   
1055  qsumax(Y,P,T,Z,GD)..
1056                                          ramp_su(Y,P,T,Z,GD)
1057                                          =l=
1058                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1059                                                  ;
1060   
1061  qsdmin(Y,P,T,Z,GD)..
1062                                          ramp_sd(Y,P,T,Z,GD)
1063                                          =g=
1064                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1065                                                  ;
1066   
1067  qsdmax(Y,P,T,Z,GD)..
1068                                          ramp_sd(Y,P,T,Z,GD)
1069                                          =l=
1070                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1071                                                  ;
1072   
1073  #--Reserve allocation constraints--#
1074   
1075  qrufu(Y,P,T,Z,GD)..
1076                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
1077                      =l=
1078                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
1079                          ;
1080   
1081  qruau(Y,P,T,Z,GD)..
1082                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
1083                      =l=
1084                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1085                          ;
1086   
1087  qrumus(Y,P,T,Z,GD)..
1088                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1089                      =l=
1090                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1091                          ;
1092   
1093  qrdad(Y,P,T,Z,GD)..
1094                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
1095                      =l=
1096                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1097                          ;
1098   
1099  qrdmd(Y,P,T,Z,GD)..
1100                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1101                      =l=
1102                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1103                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1104   
1105  qrunsmin(Y,P,T,Z,RU,GD)..
1106                                          res_g_ns(Y,P,T,Z,RU,GD)
1107                                          =g=
1108                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
1109                                                  ;
1110   
1111  qrunsmax(Y,P,T,Z,RU,GD)..
1112                                          res_g_ns(Y,P,T,Z,RU,GD)
1113                                          =l=
1114                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
1115                                                  ;
1116   
1117  qrdsdmin(Y,P,T,Z,RD,GD)..
1118                                          res_g_sd(Y,P,T,Z,RD,GD)
1119                                          =g=
1120                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1121                                                  ;
1122   
1123  qrdsdmax(Y,P,T,Z,RD,GD)..
1124                                          res_g_sd(Y,P,T,Z,RD,GD)
1125                                          =l=
1126                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1127                                                  ;
1128   
1129  #-------Intermittent renewable generation technologies-------------------------#
1130   
1131  #--Reserve allocation--#
1132   
1133  qresgru(Y,P,T,Z,RU,GRI)..
1134                                          res_g(Y,P,T,Z,RU,GRI)
1135                                          =e=
1136                                                  0
1137                                                  ;
1138   
1139  #--Output and curtailment constraint--#
1140   
1141  qgenr(Y,P,T,Z,GRI)..
1142                      gen(Y,P,T,Z,GRI)
1143                      + curt(Y,P,T,Z,GRI)
1144                      + curt_dummy(Y,P,T,Z,GRI)
1145                      =e=
1146                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1147                          ;
1148   
1149  #--Reserve allocation constraints--#
1150   
1151  qresgrdr(Y,P,T,Z,GRI)..
1152                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1153                                          =l=
1154                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1155                                                  ;
1156   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1157  qresgrdg(Y,P,T,Z,GRI)..
1158                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1159                                          =l=
1160                                                  gen(Y,P,T,Z,GRI)
1161                                                  ;
1162   
1163  #-----########################-------------------------------------------------#
1164  #-----# Storage technologies #-------------------------------------------------#
1165  #-----########################-------------------------------------------------#
1166   
1167  #-------General constraints----------------------------------------------------#
1168   
1169  #--Reserve allocation--#
1170   
1171  qress(Y,P,T,Z,R,S)..
1172                                          res_s(Y,P,T,Z,R,S)
1173                                          =e=
1174                                                  res_s_c(Y,P,T,Z,R,S)
1175                                                  + res_s_d(Y,P,T,Z,R,S)
1176                                                  ;
1177   
1178  #--Installed capacities--#
1179   
1180  qspotcapmin(Y,C,S)..
1181                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1182                                          =g=
1183                                                  S_DATA(S,'CAP_MIN')
1184                                                  ;
1185   
1186  qspotcapmax(Y,C,S)..
1187                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1188                                          =l=
1189                                                  S_DATA(S,'CAP_MAX')
1190                                                  ;
1191   
1192  #-------Short- and mid-term storage--------------------------------------------#
1193   
1194  #--Energy constraints--#
1195   
1196  qe(Y,P,Z,SSM)..
1197                                          e(Y,P++1,Z,SSM)
1198                                          =e=
1199                                                  e(Y,P,Z,SSM)
1200                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1201                                                  ;
1202   
1203  qemax(Y,P,Z,SSM)..
1204                                          e(Y,P,Z,SSM)
1205                                          =l=
1206                                                  e_cap(Y,Z,SSM)
1207                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1208                                                  ;
1209   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1210  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1211                                          e_f(Y,P,T,Z,SSM)
1212                                          =e=
1213                                                  e(Y,P,Z,SSM)
1214                                                  ;
1215   
1216  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1217                                          e_f(Y,P,T+1,Z,SSM)
1218                                          =e=
1219                                                  e_f(Y,P,T,Z,SSM)
1220                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1221                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1222                                                  ;
1223   
1224  qefmin(Y,P,T,Z,SSM)..
1225                                          e_f(Y,P,T,Z,SSM)
1226                                          =g=
1227                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1228                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1229                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1230                                                  ;
1231  qefmax(Y,P,T,Z,SSM)..
1232                                          e_f(Y,P,T,Z,SSM)
1233                                          =l=
1234                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1235                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1236                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1237                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1238                                                  ;
1239   
1240  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1241                                          e_l(Y,P,T,Z,SSM)
1242                                          =e=
1243                                                  e(Y,P,Z,SSM)
1244                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1245                                                  ;
1246   
1247  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1248                                          e_l(Y,P,T+1,Z,SSM)
1249                                          =e=
1250                                                  e_l(Y,P,T,Z,SSM)
1251                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1252                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1253                                                  ;
1254   
1255  qelmin(Y,P,T,Z,SSM)..
1256                                          e_l(Y,P,T,Z,SSM)
1257                                          =g=
1258                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1259                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1260                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1261                                                  ;
1262  qelmax(Y,P,T,Z,SSM)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1263                                          e_l(Y,P,T,Z,SSM)
1264                                          =l=
1265                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1266                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1267                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1268                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1269                                                  ;
1270   
1271  #--Duration limits--#
1272   
1273  qdurmin(Y,Z,SSM)..
1274                                          e_cap(Y,Z,SSM)
1275                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1276                                          =g=
1277                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1278                                                  ;
1279   
1280  qdurmax(Y,Z,SSM)..
1281                                          e_cap(Y,Z,SSM)
1282                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1283                                          =l=
1284                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1285                                                  ;
1286   
1287  #-------Short-term storage-----------------------------------------------------#
1288   
1289  #--Charging constraints--#
1290   
1291  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1292                                          p_c(Y,P,T+1,Z,SS)
1293                                          =e=
1294                                                  p_c(Y,P,T,Z,SS)
1295                                                  + ramp_c_up(Y,P,T,Z,SS)
1296                          - ramp_c_dn(Y,P,T,Z,SS)
1297                          ;
1298   
1299  qsscru(Y,P,T,Z,SS)..
1300                      ramp_c_up(Y,P,T,Z,SS)
1301                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1302                      =l=
1303                          p_cap_c(Y,Z,SS)
1304                          - p_c(Y,P,T,Z,SS)
1305                          ;
1306   
1307  qsscrd(Y,P,T,Z,SS)..
1308                      ramp_c_dn(Y,P,T,Z,SS)
1309                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1310                      =l=
1311                          p_c(Y,P,T,Z,SS)
1312                          ;
1313   
1314  #--Discharging constraints--#
1315   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1316  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1317                          p_d(Y,P,T+1,Z,SS)
1318                          =e=
1319                                  p_d(Y,P,T,Z,SS)
1320                                  + ramp_d_up(Y,P,T,Z,SS)
1321                          - ramp_d_dn(Y,P,T,Z,SS)
1322                          ;
1323   
1324  qssdru(Y,P,T,Z,SS)..
1325                      ramp_d_up(Y,P,T,Z,SS)
1326                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1327                      =l=
1328                          p_cap_c(Y,Z,SS)
1329                          - p_d(Y,P,T,Z,SS)
1330                          ;
1331   
1332  qssdrd(Y,P,T,Z,SS)..
1333                      ramp_d_dn(Y,P,T,Z,SS)
1334                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1335                      =l=
1336                          p_d(Y,P,T,Z,SS)
1337                          ;
1338   
1339  #-------Mid and long-term storage----------------------------------------------#
1340   
1341  #--Reserve allocation--#
1342   
1343  qresscu(Y,P,T,Z,RU,SML)..
1344                                          res_s_c(Y,P,T,Z,RU,SML)
1345                                          =e=
1346                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1347                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1348                                                  ;
1349   
1350  qresscd(Y,P,T,Z,RD,SML)..
1351                                          res_s_c(Y,P,T,Z,RD,SML)
1352                                          =e=
1353                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1354                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1355                                                  ;
1356   
1357  qressdu(Y,P,T,Z,RU,SM)..
1358                                          res_s_d(Y,P,T,Z,RU,SM)
1359                                          =e=
1360                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1361                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1362                                                  ;
1363   
1364  qressdd(Y,P,T,Z,RD,SM)..
1365                                          res_s_d(Y,P,T,Z,RD,SM)
1366                                          =e=
1367                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1368                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1369                                                  ;
1370   
1371  #--Charging logical constraints--#
1372   
1373  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1374                                          n_c(Y,P,T+1,Z,SML)
1375                                          =e=
1376                                                  n_c(Y,P,T,Z,SML)
1377                                                  + n_c_su(Y,P,T,Z,SML)
1378                                                  - n_c_sd(Y,P,T,Z,SML)
1379                                                  ;
1380   
1381  qncmax(Y,P,T,Z,SML)..
1382                                          n_c(Y,P,T,Z,SML)
1383                                          =l=
1384                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1385                                                  ;
1386   
1387  qncsu(Y,P,T,Z,SML)..
1388                                          n_c_su(Y,P,T,Z,SML)
1389                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1390                                          =l=
1391                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1392                                                  - n_c(Y,P,T,Z,SML)
1393                                                  ;
1394   
1395  qncsd(Y,P,T,Z,SML)..
1396                                          n_c_sd(Y,P,T,Z,SML)
1397                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1398                                          =l=
1399                                                  n_c(Y,P,T,Z,SML)
1400                                                  ;
1401   
1402  #--Charging constraints--#
1403   
1404  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1405                      p_c(Y,P,T+1,Z,SML)
1406                      =e=
1407                          p_c(Y,P,T,Z,SML)
1408                          + ramp_c_up(Y,P,T,Z,SML)
1409                          - ramp_c_dn(Y,P,T,Z,SML)
1410                          + ramp_c_su(Y,P,T,Z,SML)
1411                          - ramp_c_sd(Y,P,T,Z,SML)
1412                          ;
1413   
1414  qsmlcmin(Y,P,T,Z,SML)..
1415                                          p_c(Y,P,T,Z,SML)
1416                                          =g=
1417                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1418                                                  ;
1419   
1420  qsmlcmax(Y,P,T,Z,SML)..
1421                                          p_c(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1422                                          =l=
1423                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1424                                                  ;
1425   
1426  #--Charging ramping constraints--#
1427   
1428  qcrudyn(Y,P,T,Z,SML)..
1429                      ramp_c_up(Y,P,T,Z,SML)
1430                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1431                      =l=
1432                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1433                          ;
1434   
1435  qcrucap(Y,P,T,Z,SML)..
1436                      ramp_c_up(Y,P,T,Z,SML)
1437                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1438                      =l=
1439                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1440                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1441                          ;
1442   
1443  qcrddyn(Y,P,T,Z,SML)..
1444                      ramp_c_dn(Y,P,T,Z,SML)
1445                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1446                      =l=
1447                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1448                          ;
1449   
1450  qcrdcap(Y,P,T,Z,SML)..
1451                      ramp_c_dn(Y,P,T,Z,SML)
1452                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1453                      =l=
1454                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1455                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1456                          ;
1457   
1458  qcsumin(Y,P,T,Z,SML)..
1459                                          ramp_c_su(Y,P,T,Z,SML)
1460                                          =g=
1461                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1462                                                  ;
1463   
1464  qcsumax(Y,P,T,Z,SML)..
1465                                          ramp_c_su(Y,P,T,Z,SML)
1466                                          =l=
1467                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1468                                                  ;
1469   
1470  qcsdmin(Y,P,T,Z,SML)..
1471                                          ramp_c_sd(Y,P,T,Z,SML)
1472                                          =g=
1473                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1474                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1475   
1476  qcsdmax(Y,P,T,Z,SML)..
1477                                          ramp_c_sd(Y,P,T,Z,SML)
1478                                          =l=
1479                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1480                                                  ;
1481   
1482  #--Reserve allocation constraints--#
1483   
1484  qcruad(Y,P,T,Z,SML)..
1485                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1486                      =l=
1487                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1488                          ;
1489   
1490  qcrumd(Y,P,T,Z,SML)..
1491                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1492                      =l=
1493                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1494                          ;
1495   
1496  qcrdfu(Y,P,T,Z,SML)..
1497                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1498                      =l=
1499                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1500                          ;
1501   
1502  qcrdau(Y,P,T,Z,SML)..
1503                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1504                      =l=
1505                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1506                          ;
1507   
1508  qcrdmus(Y,P,T,Z,SML)..
1509                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1510                      =l=
1511                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1512                          ;
1513   
1514  qcrunsmin(Y,P,T,Z,RD,SML)..
1515                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1516                                          =g=
1517                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1518                                                  ;
1519   
1520  qcrunsmax(Y,P,T,Z,RD,SML)..
1521                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1522                                          =l=
1523                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1524                                                  ;
1525   
1526  qcrdsdmin(Y,P,T,Z,RU,SML)..
1527                                          res_s_c_sd(Y,P,T,Z,RU,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1528                                          =g=
1529                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1530                                                  ;
1531   
1532  qcrdsdmax(Y,P,T,Z,RU,SML)..
1533                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1534                                          =l=
1535                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1536                                                  ;
1537   
1538  #-------Mid-term storage-------------------------------------------------------#
1539   
1540  qcapdeqcapc(Y,Z,SM)..
1541                                          p_cap_d(Y,Z,SM)
1542                                          =e=
1543                                                  p_cap_c(Y,Z,SM)
1544                                                  ;
1545   
1546  #--Discharging logical constraints--#
1547   
1548  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1549                                          n_d(Y,P,T+1,Z,SM)
1550                                          =e=
1551                                                  n_d(Y,P,T,Z,SM)
1552                                                  + n_d_su(Y,P,T,Z,SM)
1553                                                  - n_d_sd(Y,P,T,Z,SM)
1554                                                  ;
1555   
1556  qndmax(Y,P,T,Z,SM)..
1557                                          n_d(Y,P,T,Z,SM)
1558                                          =l=
1559                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1560                                                  ;
1561   
1562  qndsu(Y,P,T,Z,SM)..
1563                                          n_d_su(Y,P,T,Z,SM)
1564                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1565                                          =l=
1566                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1567                                                  - n_d(Y,P,T,Z,SM)
1568                                                  ;
1569   
1570  qndsd(Y,P,T,Z,SM)..
1571                                          n_d_sd(Y,P,T,Z,SM)
1572                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1573                                          =l=
1574                                                  n_d(Y,P,T,Z,SM)
1575                                                  ;
1576   
1577  #--Discharging constraints--#
1578   
1579  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1580                      p_d(Y,P,T+1,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1581                      =e=
1582                          p_d(Y,P,T,Z,SM)
1583                          + ramp_d_up(Y,P,T,Z,SM)
1584                          - ramp_d_dn(Y,P,T,Z,SM)
1585                          + ramp_d_su(Y,P,T,Z,SM)
1586                          - ramp_d_sd(Y,P,T,Z,SM)
1587                          ;
1588   
1589  qsmdmin(Y,P,T,Z,SM)..
1590                                          p_d(Y,P,T,Z,SM)
1591                                          =g=
1592                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1593                                                  ;
1594   
1595  qsmdmax(Y,P,T,Z,SM)..
1596                                          p_d(Y,P,T,Z,SM)
1597                                          =l=
1598                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1599                                                  ;
1600   
1601  #--Discharging ramping constraints--#
1602   
1603  qdrudyn(Y,P,T,Z,SM)..
1604                      ramp_d_up(Y,P,T,Z,SM)
1605                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1606                      =l=
1607                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1608                          ;
1609   
1610  qdrucap(Y,P,T,Z,SM)..
1611                      ramp_d_up(Y,P,T,Z,SM)
1612                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1613                      =l=
1614                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1615                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1616                          ;
1617   
1618  qdrddyn(Y,P,T,Z,SM)..
1619                      ramp_d_dn(Y,P,T,Z,SM)
1620                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1621                      =l=
1622                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1623                          ;
1624   
1625  qdrdcap(Y,P,T,Z,SM)..
1626                      ramp_d_dn(Y,P,T,Z,SM)
1627                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1628                      =l=
1629                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1630                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1631                          ;
1632   
1633  qdsumin(Y,P,T,Z,SM)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1634                                          ramp_d_su(Y,P,T,Z,SM)
1635                                          =g=
1636                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1637                                                  ;
1638   
1639  qdsumax(Y,P,T,Z,SM)..
1640                                          ramp_d_su(Y,P,T,Z,SM)
1641                                          =l=
1642                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1643                                                  ;
1644   
1645  qdsdmin(Y,P,T,Z,SM)..
1646                                          ramp_d_sd(Y,P,T,Z,SM)
1647                                          =g=
1648                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1649                                                  ;
1650   
1651  qdsdmax(Y,P,T,Z,SM)..
1652                                          ramp_d_sd(Y,P,T,Z,SM)
1653                                          =l=
1654                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1655                                                  ;
1656   
1657  #--Reserve allocation constraints--#
1658   
1659  qdrufu(Y,P,T,Z,SM)..
1660                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1661                      =l=
1662                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1663                          ;
1664   
1665  qdruau(Y,P,T,Z,SM)..
1666                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1667                      =l=
1668                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1669                          ;
1670   
1671  qdrumus(Y,P,T,Z,SM)..
1672                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1673                      =l=
1674                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1675                          ;
1676   
1677  qdrdad(Y,P,T,Z,SM)..
1678                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1679                      =l=
1680                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1681                          ;
1682   
1683  qdrdmd(Y,P,T,Z,SM)..
1684                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1685                      =l=
1686                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1687                          ;
1688   
1689  qdrunsmin(Y,P,T,Z,RU,SM)..
1690                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1691                                          =g=
1692                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1693                                                  ;
1694   
1695  qdrunsmax(Y,P,T,Z,RU,SM)..
1696                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1697                                          =l=
1698                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1699                                                  ;
1700   
1701  qdrdsdmin(Y,P,T,Z,RD,SM)..
1702                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1703                                          =g=
1704                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1705                                                  ;
1706   
1707  qdrdsdmax(Y,P,T,Z,RD,SM)..
1708                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1709                                          =l=
1710                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1711                                                  ;
1712   
1713  #-------Long-term storage------------------------------------------------------#
1714   
1715  #--Discharging reserve allocation--#
1716   
1717  qslressd(Y,P,T,Z,R,SL)..
1718                                          res_s_d(Y,P,T,Z,R,SL)
1719                                          =e=
1720                                                  0
1721                                                  ;
1722   
1723  #--Gas energy balance--#
1724   
1725  qgase(Y,P,C)..
1726                                          eg(Y,P++1,C)
1727                                          =e=
1728                                                  eg(Y,P,C)
1729                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1730                                                  ;
1731   
1732  qgasemax(Y,P,C)..
1733                                          eg(Y,P,C)
1734                                          =l=
1735                                                  E_LP
1736                                                  + eg_cap
1737                                                  ;
1738   
1739  qgasef(Y,P,T,C)$(ord(T)<card(T))..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1740                                          eg_f(Y,P,T+1,C)
1741                                          =e=
1742                                                  eg_f(Y,P,T,C)
1743                                                  + pg_c(Y,P,T,C)
1744                                                  - pg_d(Y,P,T,C)
1745                                                  ;
1746   
1747  qgasefmax(Y,P,T,C)..
1748                                          eg_f(Y,P,T,C)
1749                                          =l=
1750                                                  E_LP
1751                                                  + eg_cap
1752                                                  ;
1753   
1754  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1755                                          eg_f(Y,P,T,C)
1756                                          =e=
1757                                                  eg(Y,P,C)
1758                                                  ;
1759   
1760  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1761                                          eg_l(Y,P,T+1,C)
1762                                          =e=
1763                                                  eg_l(Y,P,T,C)
1764                                                  + pg_c(Y,P,T,C)
1765                                                  - pg_d(Y,P,T,C)
1766                                                  ;
1767   
1768  qgaselmax(Y,P,T,C)..
1769                                          eg_l(Y,P,T,C)
1770                                          =l=
1771                                                  E_LP
1772                                                  + eg_cap
1773                                                  ;
1774   
1775  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1776                                          eg_l(Y,P,T,C)
1777                                          =e=
1778                                                  eg(Y,P,C)
1779                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1780                                                  ;
1781   
1782  #--Gas charging constraints--#
1783   
1784  qgasc(Y,P,T,C)..
1785                                          pg_c(Y,P,T,C)
1786                                          =e=
1787                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1788                                                  + pg_import(Y,P,T,C)
1789                                                  ;
1790   
1791  #--Gas discharging constraints--#
1792   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1793  qgasd(Y,P,T,C)..
1794                                          pg_d(Y,P,T,C)
1795                                          =e=
1796                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1797                                                  ;
1798   
1799  #--Gas usage--#
1800   
1801  qgasuse(Y,C)..
1802                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1803                                          =l=
1804                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1805                                                  ;
1806   
1807  qgasusegen(Y,P,T,Z,GCG)..
1808                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1809                                          =e=
1810                                                  pg_syn(Y,P,T,Z,GCG)
1811                                                  + pg_fos(Y,P,T,Z,GCG)
1812                                                  ;
1813   
1814  ################################################
1815  # DEMAND RESPONSE
1816  ################################################
1817   
1818  # always included in this manner
1819   
1820  sum_demand(P,T,Z)..
1821                      demand_unit(P,T,Z) =e= DEM_NON_RES(P,T,Z) + demand_new_res(P,T,Z)
1822                      ;
1823   
1824  totdemand2(P,Z)..
1825                                          demand_tot(P,Z) =e= sum(T,demand_new_res(P,T,Z) + DEM_NON_RES(P,T,Z))
1826  #                                       demand_tot(P,Z) =e= sum(T,DEM_REF_RES(P,T,Z))
1827                                          ;
1828   
1829  refdemand(P,T,Z)..
1830                                          demand_ref(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + DEM_NON_RES(P,T,Z)
1831                                          ;
1832   
1833   
1834   
1835  ##################################
1836   
1837  # change used equation depending on with or withourt demand response
1838   
1839  demand(P,T,Z)..
1840                                          demand_new_res(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_OPTIMAL(P,T,Z)/PRICE_REF(P,H,Z))*(price_unit(P,H,Z)-PRICE_REF(P,H,Z)))
1841  #                                       demand_new_res(P,T,Z) =e= DEM_REF_RES(P,T,Z)
1842                                          ;
1843   
1844  price_clone(P,T,Z)..
1845                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1846  #                                       price_unit_clone(P,T,Z) =e= PRICE_REF(P,H,Z)
1847                                          ;
1848   
1849  totdemand(P,Z)..
1850                                          sum(T,DEM_OPTIMAL(P,T,Z)) =l= sum(T,demand_new_res(P,T,Z))
1851  #                                       sum(T,DEM_REF_RES(P,T,Z)+eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))) =l= sum(T,demand_new_res(P,T,Z))
1852                                          ;
1853   
1854  ##################################
1855   
1856  gdr(P,T,Z)..
1857              genDR(P,T,Z) =g= DEM_RES_FP(P,T,Z)-demand_new_res(P,T,Z)
1858              ;
1859   
1860  gdr2(P,T,Z)..
1861              genDR(P,T,Z) =g= 0
1862              ;
1863   
1864  cdr(P,T,Z)..
1865              capDR(Z) =g= genDR(P,T,Z)
1866              ;
1867   
1868  cgdr(Z)..
1869              costgDR(Z) =e= sum((T,P),genDR(P,T,Z)*W(P)*DR_EN_PRICE)
1870              ;
1871   
1872  ccdr(Z)..
1873              costcDR(Z) =e= capDR(Z)*1000*DR_CAP_PRICE
1874              ;
1875   
1876   
1877  # reserve allocation
1878   
1879  qresdrup(Y,P,T,Z)..
1880                      sum(RU,res_DR(Y,P,T,Z,RU)) =l= (demand_new_res(P,T,Z) - DEM_RES_MIN(P,T,Z))*FACTOR_RES_DR
1881                      ;
1882   
1883  qresdrdo(Y,P,T,Z)..
1884                      sum(RD,res_DR(Y,P,T,Z,RD)) =l= (DEM_RES_MAX(P,T,Z) - demand_new_res(P,T,Z))*FACTOR_RES_DR
1885                      ;
1886   
1887  # residential consumption upper and lower limit
1888   
1889  demand_max(P,T,Z)..
1890                      demand_new_res(P,T,Z) =l= DEM_RES_MAX(P,T,Z)
1891                      ;
1892   
1893  demand_min(P,T,Z)..
1894                      demand_new_res(P,T,Z) =g= DEM_RES_MIN(P,T,Z)
1895                      ;
1896   
1897  # auxilliary
1898   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1899  demand_clone(P,H,Z)..
1900                                          demand_new_res_clone(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*DIAG(T,H))
1901                                          ;
1902   
1903   
1904  surplusdemand(P,T,Z)..
1905                                          surplus(P,T,Z) =e= eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))
1906                                          ;
1907   
1908  #price(P,H,Z)..
1909  #                                       (price_unit(P,H,Z) - PRICE_REF(P,H,Z))*sum(H,ELAST(T,H)*(DEM_REF_RES(P,T,Z)/PRICE_REF(P,H,Z))) =e= (demand_new_res(P,T,Z)-DEM_REF_RES(P,T,Z))
1910  #                                       ;
1911   
1912  shiftedaway(P,H,Z)..
1913                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1914                                          ;
1915   
1916  shiftedawaytotal(P,Z)..
1917                                          shiftaway_total(P,Z) =e= sum(H,shift_up(P,H,Z)-shift_down(P,H,Z))
1918                                          ;
1919   
1920  shiftedforward(P,H,Z)..
1921                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1922                                          ;
1923   
1924  shiftedforwardtotal(P,Z)..
1925  #                                       shiftforwards_total(P,Z) =e= sum(H,shiftforwards(P,H,Z))
1926                                          shiftforwards_total(P,Z) =e= sum(H,front_up(P,H,Z)-back_down(P,H,Z))
1927                                          ;
1928   
1929  shiftedbackward(P,H,Z)..
1930                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1931                                          ;
1932   
1933  shiftedbackwardtotal(P,Z)..
1934  #                                       shiftbackwards_total(P,Z) =e= sum(H,shiftbackwards(P,H,Z))
1935                                          shiftbackwards_total(P,Z) =e= sum(H,back_up(P,H,Z)-front_down(P,H,Z))
1936                                          ;
1937   
1938  shiftconstraint_frame_1(P,H,Z)..
1939                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1940                                          ;
1941   
1942  shiftconstraint_frame_2(P,H,Z)..
1943                                          sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMAX(H,T)) =g= sum(T,demand_new_res(P,T,Z)*SHIFTMIN(H,T))
1944                                          ;
1945   
1946  shiftconstraint1(P,H,Z)..
1947                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1948                                          ;
1949   
1950  shiftconstraint2(P,H,Z)..
1951                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1952                                          ;
1953   
1954  priceconstraint1(P,H,Z)..
1955                                          price_unit(P,H,Z) =l= PRICE_REF(P,H,Z)+PRICE_REF(P,H,Z)*LIMITPRICE
1956                                          ;
1957   
1958  priceconstraint2(P,H,Z)..
1959                                          price_unit(P,H,Z) =g= PRICE_REF(P,H,Z)-PRICE_REF(P,H,Z)*LIMITPRICE
1960                                          ;
1961   
1962  demlimitunder(P,T,Z)..
1963                                          DEM_OPTIMAL(P,T,Z) - LIMITDEM =l= demand_new_res(P,T,Z)
1964                                          ;
1965   
1966  demlimitupper(P,T,Z)..
1967                                          DEM_OPTIMAL(P,T,Z) + LIMITDEM =g= demand_new_res(P,T,Z)
1968                                          ;
1969   
1970   
1971  priceconstraint3(P,Z)..
1972                                         sum(H,price_unit(P,H,Z))/card(H) =e= sum(H,PRICE_REF(P,H,Z))/card(H)
1973                                         ;
1974   
1975   
1976  qinnerframe(P,H,Z)..
1977                                          innerframe(P,H,Z) =e= sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T))
1978                                          ;
1979   
1980  qouterframe(P,H,Z)..
1981                                          outerframe(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1982                                          ;
1983   
1984  fixedcost(Z)..
1985                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1986                                          ;
1987   
1988  variablecost(P,Z)..
1989                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1990                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1991                                          ;
1992   
1993  cost(Z)..
1994                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
1995                                          ;
1996   
1997  ####################################
1998  # get downwards en upward numbers for front and back
1999  ####################################
2000   
2001  front_d_1(P,H,Z)..
2002                                          front_down(P,H,Z) =l= shiftforwards(P,H,Z)
2003                                          ;
2004   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2005  front_d_2(P,H,Z)..
2006                                          front_down(P,H,Z) =l= 0
2007                                          ;
2008   
2009  front_u_1(P,H,Z)..
2010                                          front_up(P,H,Z) =g= shiftforwards(P,H,Z)
2011                                          ;
2012   
2013  front_u_2(P,H,Z)..
2014                                          front_up(P,H,Z) =g= 0
2015                                          ;
2016   
2017  back_d_1(P,H,Z)..
2018                                          back_down(P,H,Z) =l= shiftbackwards(P,H,Z)
2019                                          ;
2020   
2021  back_d_2(P,H,Z)..
2022                                          back_down(P,H,Z) =l= 0
2023                                          ;
2024   
2025  back_u_1(P,H,Z)..
2026                                          back_up(P,H,Z) =g= shiftbackwards(P,H,Z)
2027                                          ;
2028   
2029  back_u_2(P,H,Z)..
2030                                          back_up(P,H,Z) =g= 0
2031                                          ;
2032   
2033  shift_d_1(P,H,Z)..
2034                                          shift_down(P,H,Z) =l= shiftaway(P,H,Z)
2035                                          ;
2036   
2037  shift_d_2(P,H,Z)..
2038                                          shift_down(P,H,Z) =l= 0
2039                                          ;
2040   
2041  shift_u_1(P,H,Z)..
2042                                          shift_up(P,H,Z) =g= shiftaway(P,H,Z)
2043                                          ;
2044   
2045  shift_u_2(P,H,Z)..
2046                                          shift_up(P,H,Z) =g= 0
2047                                          ;
2048   
2049  # things that have to do with compensqtion mqtrix
2050  ###################################################
2051   
2052  shiftedfi(P,H,Z)..
2053                      shiftfi(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2054                      ;
2055   
2056  shiftedbi(P,H,Z)..
2057                      shiftbi(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 41
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2058                      ;
2059   
2060  shiftedfc(P,H,Z)..
2061                      shiftfc(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2062                      ;
2063   
2064  shiftedbc(P,H,Z)..
2065                      shiftbc(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2066                      ;
2067   
2068   
2069  MODEL GOA GOA model /
2070   
2071  #-------Objective function-----------------------------------------------------#
2072                  qobj
2073   
2074  #-------System constraints-----------------------------------------------------#
2075                  qbalance
2076   
2077                  qresprod
2078                  qco2lim
2079   
2080                  qresendomin
2081                  qresendomax
2082                  qres
2083   
2084                  #qgendisp
2085                  #qgendisppeak
2086   
2087                  qco2
2088                  qlcg
2089   
2090  #-------Generation technologies------------------------------------------------#
2091                  qpotcapmin
2092  #               qpotcapmax
2093  #               qpotgenmin
2094  #               qpotgenmax
2095   
2096  #--Conventional generation technologies--#
2097                  qresgcu
2098                  qresgcd
2099   
2100                  qn
2101                  qnmax
2102                  qnsu
2103                  qnsd
2104   
2105                  qgen
2106                  qgenmin
2107                  qgenmax
2108   
2109                  qrudyn
2110                  qrucap
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 42
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2111                  qrddyn
2112                  qrdcap
2113                  qsumin
2114                  qsumax
2115                  qsdmin
2116                  qsdmax
2117   
2118                  qrufu
2119                  qruau
2120                  qrumus
2121                  qrdad
2122                  qrdmd
2123                  qrunsmin
2124                  qrunsmax
2125                  qrdsdmin
2126                  qrdsdmax
2127   
2128  #--Intermittent renewable generation technologies--#
2129                  qresgru
2130   
2131                  qgenr
2132   
2133                  qresgrdr
2134                  qresgrdg
2135   
2136  #-------Storage technologies---------------------------------------------------#
2137  #--General constraints--#
2138                  qress
2139                  qspotcapmin
2140                  qspotcapmax
2141   
2142                  qe
2143                  qemax
2144                  qef
2145                  qefmin
2146                  qefmax
2147                  qefstart
2148                  qel
2149                  qelmin
2150                  qelmax
2151                  qelstart
2152   
2153                  qdurmin
2154                  qdurmax
2155   
2156  #--Short-term storage--#
2157                  qssc
2158                  qsscru
2159                  qsscrd
2160   
2161                  qssd
2162                  qssdru
2163                  qssdrd
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 43
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2164   
2165  #--Mid and long-term storage--#
2166                  qresscu
2167                  qresscd
2168                  qressdu
2169                  qressdd
2170   
2171                  qnc
2172                  qncmax
2173                  qncsu
2174                  qncsd
2175   
2176                  qsmlc
2177                  qsmlcmin
2178                  qsmlcmax
2179   
2180                  qcrudyn
2181                  qcrucap
2182                  qcrddyn
2183                  qcrdcap
2184                  qcsumin
2185                  qcsumax
2186                  qcsdmin
2187                  qcsdmax
2188   
2189                  qcruad
2190                  qcrumd
2191                  qcrdfu
2192                  qcrdau
2193                  qcrdmus
2194                  qcrunsmin
2195                  qcrunsmax
2196                  qcrdsdmin
2197                  qcrdsdmax
2198   
2199  #--Mid-term storage--#
2200                  qcapdeqcapc
2201   
2202                  qnd
2203                  qndmax
2204                  qndsu
2205                  qndsd
2206   
2207                  qsmd
2208                  qsmdmin
2209                  qsmdmax
2210   
2211                  qdrudyn
2212                  qdrucap
2213                  qdrddyn
2214                  qdrdcap
2215                  qdsumin
2216                  qdsumax
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 44
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2217                  qdsdmin
2218                  qdsdmax
2219   
2220                  qdrufu
2221                  qdruau
2222                  qdrumus
2223                  qdrdad
2224                  qdrdmd
2225                  qdrunsmin
2226                  qdrunsmax
2227                  qdrdsdmin
2228                  qdrdsdmax
2229   
2230  #--Long-term storage--#
2231                  qslressd
2232   
2233                  qgase
2234                  qgasemax
2235                  qgasef
2236                  qgasefmax
2237                  qgasefstart
2238                  qgasel
2239                  qgaselmax
2240                  qgaselstart
2241   
2242                  qgasc
2243   
2244                  qgasd
2245   
2246                  qgasuse
2247                  qgasusegen
2248   
2249  #-- Price-elasticity--#
2250   
2251          #always included
2252          totdemand2
2253          refdemand
2254          sum_demand
2255   
2256          #always included, change equation
2257          demand
2258          price_clone
2259   
2260          #reserve allocation of flex demand
2261          qresdrup
2262          qresdrdo
2263   
2264          ###########
2265          ## Only for demand response
2266          ###########
2267   
2268          #limits shiftaway
2269  #       shiftconstraint1
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 45
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2270  #       shiftconstraint2
2271   
2272          #limits demand difference
2273  #       demlimitunder
2274  #       demlimitupper
2275   
2276          #keeps demand between boundaries
2277          demand_max
2278          demand_min
2279   
2280          # add cost for DR
2281          gdr
2282          gdr2
2283          cdr
2284          cgdr
2285          ccdr
2286   
2287  #               price
2288  #               demand_clone
2289   
2290  #               surplusdemand
2291   
2292                  shiftedaway
2293  #               shiftedforward
2294  #               shiftedbackward
2295   
2296  #               shiftedawaytotal
2297  #               shiftedforwardtotal
2298  #               shiftedbackwardtotal
2299   
2300                  priceconstraint1
2301                  priceconstraint2
2302  #                priceconstraint3
2303   
2304          ##########
2305          # include when working with moving frames, and set in wout_program -> factor back to 1
2306  #               shiftconstraint_frame_1
2307  #               shiftconstraint_frame_2
2308  #               totdemand
2309   
2310  #               qinnerframe
2311  #               qouterframe
2312   
2313  #               revenue
2314  #               fixedcost
2315  #               variablecost
2316  #               cost
2317   
2318  #               front_d_1
2319  #               front_d_2
2320  #               front_u_1
2321  #               front_u_2
2322  #
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 46
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2323  #               back_d_1
2324  #               back_d_2
2325  #               back_u_1
2326  #               back_u_2
2327  #
2328  #               shift_u_1
2329  #               shift_u_2
2330  #               shift_d_1
2331  #               shift_d_2
2332  #
2333  #        shiftedbc
2334  #        shiftedfc
2335  #        shiftedbi
2336  #        shiftedfi
2337   
2338  /;
2339   
2340   
2341   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME taking OF TYPE PARAM
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 47
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.000 SECONDS      3 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                06/21/16 17:21:51 Page 48
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.015 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.gms
Output     C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout_comp.lst
Save       C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
