GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(T,H)                              Elasticity relative to hour one and hour two
 318  P_REF                                   reference price (calculated in advance)
 319  TOTDEM                                  The sum of the demand over all hours
 320  LIMIT                                   absolute value of price difference that is allowed
 321  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 322  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 323  LENGTH_P                                the length of the period as programmed in main and init (.py)
 324  ;
 325   
--- LOAD  G_DATA = 39:G_DATA
 326  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 327  $LOAD S_DATA
--- LOAD  RG = 41:RG
 328  $LOAD RG
--- LOAD  RSC = 42:RSC
 329  $LOAD RSC
--- LOAD  RSD = 43:RSD
 330  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 331  $LOAD DEM DEM_T
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  RES_T = 46:RES_T
 332  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 333  $LOAD REL_T
--- LOAD  W = 48:W
 334  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 335  $LOAD POL_TARGETS
 336  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 337  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 338  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 339  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 340  $LOAD ELAST
--- LOAD  SHIFTMIN = 54:SHIFTMIN
 341  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 55:SHIFTMAX
 342  $LOAD SHIFTMAX
 343   
 344  #C_GAS = 25.6643460843943;
 345  C_GAS = 25.6643460843943*2;
 346  T_MARKET = 1;
 347  EGCAPEX = 2000000000000000000000000;
 348  E_LP = 7100000;
 349  P_REF = 55.8;
 350  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 351  LIMIT = P_REF*0.15;
 352  LENGTH_P = card(T);
 353   
 354  VARIABLES
 355  obj                     Value of objective function
 356  ;
 357   
 358  POSITIVE VARIABLES
 359  #######################################################
 360   
 361  price_unit(P,T,Z)                               Price of the electricity
 362  demand_unit(P,T,Z)                              demand of the electricity
 363  demand_tot(P,Z)                                 total demand, based on demand_unit
 364  demand_ref(P,T,Z)                               the reference demand with flat price
 365  innerframe(P,H,Z)
 366  outerframe(P,H,Z)
 367   
 368  totalrevenue(P,Z)                               the product of demand and price
 369  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 370  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 371   
 372  #######################################################
 373   
 374  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/19/16 16:07:32 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 375  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 376  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 377  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 378  eg_cap                                          Gas storage capacity
 379   
 380  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 381  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 382   
 383  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 384  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 385  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 386  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 387  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 388  eg(Y,P,C)                                       Energy content of gas storage at period P
 389  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 390  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 391  pg_c(Y,P,T,C)                           Charging of gas storage
 392  pg_d(Y,P,T,C)                           Discharging of gas storage
 393   
 394  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 395  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 396   
 397  load_shedding(Y,P,T,Z)          Load shedding
 398  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 399  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 400  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 401   
 402  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 403  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 404  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 405   
 406  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 407  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 408  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 409  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 410  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 411   
 412  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 413  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 414  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 415  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 416   
 417  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 418   
 419  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 420  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 421  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 422  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 423  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 424  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 425  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 426  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 427   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 428  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 429  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 430  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 431  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 432  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 433   
 434  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 435  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 436  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 437  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 438   
 439  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 440  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 441  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 442  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 443  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 444   
 445  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 446  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 447  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 448  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 449   
 450  pg_import(Y,P,T,C)                      Import of gas
 451  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 452  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 453   
 454  ;
 455   
 456  EQUATIONS
 457  #--Objective function--#
 458  qobj
 459   
 460  #--System constraints--#
 461  qbalance(Y,P,T,Z)
 462  qresprod(Y,C)
 463  qco2lim(Y,C)
 464  qresendomin(Y,P,T,C,R,GRI)
 465  qresendomax(Y,P,T,C,R,GRI)
 466  qres(Y,P,T,C,R)
 467  qgendisp(Y,P,T,C)
 468  qgendisppeak(Y,C)
 469  qco2(Y,C,G)
 470  qlcg(Y,C,G)
 471   
 472  #--Generation technologies--#
 473  qpotcapmin(Y,C,G)
 474  #qpotcapmax(Y,C,G)
 475  #qpotgenmin(Y,C,G)
 476  #qpotgenmax(Y,C,G)
 477   
 478  qresgcu(Y,P,T,Z,RU,GD)
 479  qresgcd(Y,P,T,Z,RD,GD)
 480  qn(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 481  qnmax(Y,P,T,Z,GD)
 482  qnsu(Y,P,T,Z,GD)
 483  qnsd(Y,P,T,Z,GD)
 484  qgen(Y,P,T,Z,GD)
 485  qgenmin(Y,P,T,Z,GD)
 486  qgenmax(Y,P,T,Z,GD)
 487  qrudyn(Y,P,T,Z,GD)
 488  qrucap(Y,P,T,Z,GD)
 489  qrddyn(Y,P,T,Z,GD)
 490  qrdcap(Y,P,T,Z,GD)
 491  qsumin(Y,P,T,Z,GD)
 492  qsumax(Y,P,T,Z,GD)
 493  qsdmin(Y,P,T,Z,GD)
 494  qsdmax(Y,P,T,Z,GD)
 495  qrufu(Y,P,T,Z,GD)
 496  qruau(Y,P,T,Z,GD)
 497  qrumus(Y,P,T,Z,GD)
 498  qrdad(Y,P,T,Z,GD)
 499  qrdmd(Y,P,T,Z,GD)
 500  qrunsmin(Y,P,T,Z,RU,GD)
 501  qrunsmax(Y,P,T,Z,RU,GD)
 502  qrdsdmin(Y,P,T,Z,RD,GD)
 503  qrdsdmax(Y,P,T,Z,RD,GD)
 504   
 505  qresgru(Y,P,T,Z,RU,GRI)
 506  qgenr(Y,P,T,Z,GRI)
 507  qresgrdr(Y,P,T,Z,GRI)
 508  qresgrdg(Y,P,T,Z,GRI)
 509   
 510  #--Storage technologies--#
 511  #qress(Y,P,T,Z,R,S)
 512  #qspotcapmin(Y,C,S)
 513  #qspotcapmax(Y,C,S)
 514  #
 515  #qe(Y,P,Z,S)
 516  #qemax(Y,P,Z,S)
 517  #qef(Y,P,T,Z,S)
 518  #qefmin(Y,P,T,Z,S)
 519  #qefmax(Y,P,T,Z,S)
 520  #qefstart(Y,P,T,Z,S)
 521  #qel(Y,P,T,Z,S)
 522  #qelmin(Y,P,T,Z,S)
 523  #qelmax(Y,P,T,Z,S)
 524  #qelstart(Y,P,T,Z,S)
 525  #qdurmin(Y,Z,S)
 526  #qdurmax(Y,Z,S)
 527  #
 528  #qssc(Y,P,T,Z,SS)
 529  #qsscru(Y,P,T,Z,SS)
 530  #qsscrd(Y,P,T,Z,SS)
 531  #qssd(Y,P,T,Z,SS)
 532  #qssdru(Y,P,T,Z,SS)
 533  #qssdrd(Y,P,T,Z,SS)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 534  #
 535  #qresscu(Y,P,T,Z,RU,SML)
 536  #qresscd(Y,P,T,Z,RD,SML)
 537  #qressdu(Y,P,T,Z,RU,SM)
 538  #qressdd(Y,P,T,Z,RD,SM)
 539  #qnc(Y,P,T,Z,SML)
 540  #qncmax(Y,P,T,Z,SML)
 541  #qncsu(Y,P,T,Z,SML)
 542  #qncsd(Y,P,T,Z,SML)
 543  #qsmlc(Y,P,T,Z,SML)
 544  #qsmlcmin(Y,P,T,Z,SML)
 545  #qsmlcmax(Y,P,T,Z,SML)
 546  #qcrudyn(Y,P,T,Z,SML)
 547  #qcrucap(Y,P,T,Z,SML)
 548  #qcrddyn(Y,P,T,Z,SML)
 549  #qcrdcap(Y,P,T,Z,SML)
 550  #qcsumin(Y,P,T,Z,SML)
 551  #qcsumax(Y,P,T,Z,SML)
 552  #qcsdmin(Y,P,T,Z,SML)
 553  #qcsdmax(Y,P,T,Z,SML)
 554  #qcruad(Y,P,T,Z,SML)
 555  #qcrumd(Y,P,T,Z,SML)
 556  #qcrdfu(Y,P,T,Z,SML)
 557  #qcrdau(Y,P,T,Z,SML)
 558  #qcrdmus(Y,P,T,Z,SML)
 559  #qcrunsmin(Y,P,T,Z,RD,SML)
 560  #qcrunsmax(Y,P,T,Z,RD,SML)
 561  #qcrdsdmin(Y,P,T,Z,RU,SML)
 562  #qcrdsdmax(Y,P,T,Z,RU,SML)
 563  #
 564  #qcapdeqcapc(Y,Z,SM)
 565  #qnd(Y,P,T,Z,SM)
 566  #qndmax(Y,P,T,Z,SM)
 567  #qndsu(Y,P,T,Z,SM)
 568  #qndsd(Y,P,T,Z,SM)
 569  #qsmd(Y,P,T,Z,SM)
 570  #qsmdmin(Y,P,T,Z,SM)
 571  #qsmdmax(Y,P,T,Z,SM)
 572  #qdrudyn(Y,P,T,Z,SM)
 573  #qdrucap(Y,P,T,Z,SM)
 574  #qdrddyn(Y,P,T,Z,SM)
 575  #qdrdcap(Y,P,T,Z,SM)
 576  #qdsumin(Y,P,T,Z,SM)
 577  #qdsumax(Y,P,T,Z,SM)
 578  #qdsdmin(Y,P,T,Z,SM)
 579  #qdsdmax(Y,P,T,Z,SM)
 580  #qdrufu(Y,P,T,Z,SM)
 581  #qdruau(Y,P,T,Z,SM)
 582  #qdrumus(Y,P,T,Z,SM)
 583  #qdrdad(Y,P,T,Z,SM)
 584  #qdrdmd(Y,P,T,Z,SM)
 585  #qdrunsmin(Y,P,T,Z,RU,SM)
 586  #qdrunsmax(Y,P,T,Z,RU,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 587  #qdrdsdmin(Y,P,T,Z,RD,SM)
 588  #qdrdsdmax(Y,P,T,Z,RD,SM)
 589  #
 590  #qslressd(Y,P,T,Z,R,SL)
 591  #qgase(Y,P,C)
 592  #qgasemax(Y,P,C)
 593  #qgasef(Y,P,T,C)
 594  #qgasefmax(Y,P,T,C)
 595  #qgasefstart(Y,P,T,C)
 596  #qgasel(Y,P,T,C)
 597  #qgaselmax(Y,P,T,C)
 598  #qgaselstart(Y,P,T,C)
 599  #qgasc(Y,P,T,C)
 600  #qgasd(Y,P,T,C)
 601  #qgasuse(Y,C)
 602  #qgasusegen(Y,P,T,Z,GCG)
 603   
 604  ###############################
 605  price(P,T,Z)
 606  demand(P,T,Z)
 607  totdemand(P,Z)
 608  totdemand2(P,Z)
 609  refdemand(P,T,Z)
 610  refdemand2(Z)
 611  priceconstraint1(P,T,Z)
 612  priceconstraint2(P,T,Z)
 613  priceconstraint3(P,Z)
 614  shiftconstraint(P,H,Z)
 615  qinnerframe(P,H,Z)
 616  qouterframe(P,H,Z)
 617   
 618  revenue(P,Z)
 619  fixedcost(Z)
 620  variablecost(P,Z)
 621  ;
 622   
 623  #-----######################---------------------------------------------------#
 624  #-----# Objective function #---------------------------------------------------#
 625  #-----######################---------------------------------------------------#
 626  qobj..              obj
 627  #                                       =e=
 628  #                                               sum((P,T,Z),price_unit(P,T,Z)*demand_unit(P,T,Z)*W(P))*168/card(T)
 629  #                                               -
 630  #                                               sum((Y,Z,G),                    (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 631  #                                               -
 632  #                                               (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 633  #                                               + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 634  #                                               )
 635  #                                               *(168/card(T))
 636  #                                               ;
 637                                          =e=
 638                                                  sum((Y,Z,G),                    (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 639                                                  +
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 640                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 641                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 642                                                  )
 643                                                  *(168/card(T));
 644                                                  ;
 645   
 646   
 647   
 648   
 649  #-----######################---------------------------------------------------#
 650  #-----# System constraints #---------------------------------------------------#
 651  #-----######################---------------------------------------------------#
 652   
 653  #--System balance--#
 654   
 655  # balance with demand response
 656  qbalance(Y,P,T,Z)..
 657                                  sum(G, gen(Y,P,T,Z,G))
 658  #                               + sum(SSM, p_d(Y,P,T,Z,SSM))
 659                                          =e=
 660                                                  demand_unit(P,T,Z)
 661  #                                               - load_shedding(Y,P,T,Z)
 662  #                                               + sum(S, p_c(Y,P,T,Z,S))
 663                                                  ;
 664   
 665  #balance without demand response
 666  #qbalance(Y,P,T,Z)..
 667  #                               sum(G, gen(Y,P,T,Z,G))
 668  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 669  #                                       =e=
 670  #                                               DEM_T(P,T,Z)
 671  #                                       #       - load_shedding(Y,P,T,Z)
 672  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 673  #                                               ;
 674  #DEM(Y,Z)*DEM_T(T,Z);
 675   
 676  #--Renewable target--#
 677   
 678  #qresprod(Y,C)..
 679  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 680  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 681  #                                       =l=
 682  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 683  #                                               ;
 684   
 685  qresprod(Y,C)..
 686                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 687                                          =g=
 688                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 689                                                  ;
 690   
 691  qco2lim(Y,C)..
 692  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 693  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 694                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 695                                          =l=
 696                                                  50000000*0.4
 697                                                  ;
 698   
 699  #--Reserve requirements--#
 700   
 701  qresendomin(Y,P,T,C,R,GRI)..
 702                                          q_endo(Y,P,T,C,R,GRI)
 703                                          =g=
 704                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 705                                                  ;
 706   
 707  qresendomax(Y,P,T,C,R,GRI)..
 708                                          q_endo(Y,P,T,C,R,GRI)
 709                                          =l=
 710                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 711                                                  ;
 712   
 713   
 714  qres(Y,P,T,C,R)..
 715                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 716                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 717                                          =e=
 718                                                  R_EXO(C,R)
 719                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 720                                                  ;
 721   
 722  #--Dispatchable capacity--#
 723   
 724  qgendisp(Y,P,T,C)..
 725                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 726                                          =g=
 727                                                  sum(Z $ C_Z(C,Z), DEM_T(P,T,Z))*0.20
 728                                                  ;
 729   
 730  qgendisppeak(Y,C)..
 731                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 732                                          =g=
 733                                                  10000*1.20
 734                                                  ;
 735   
 736  #--Emissions--#
 737   
 738  qco2(Y,C,G)..
 739                                          co2(Y,C,G)
 740                                          =e=
 741                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 742                                                  ;
 743   
 744  qlcg(Y,C,G)..
 745                                          lcg(Y,C,G)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 746                                          =e=
 747                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 748                                                  ;
 749   
 750   
 751  #-----###########################----------------------------------------------#
 752  #-----# Generation technologies #----------------------------------------------#
 753  #-----###########################----------------------------------------------#
 754   
 755  ##--Installed generation capacities--#
 756   
 757  qpotcapmin(Y,C,G)..
 758                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 759                                          =g=
 760                                                  G_DATA(G,'CAP_MIN')
 761                                                  ;
 762   
 763  #qpotcapmax(Y,C,G)..
 764  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 765  #                                       =g=
 766  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 767  #                                               ;
 768  #
 769  #qpotgenmin(Y,C,G)..
 770  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 771  #                                       =g=
 772  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 773  #                                               ;
 774  #
 775  #qpotgenmax(Y,Z,G)..
 776  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 777  #                                       =g=
 778  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 779  #                                               ;
 780   
 781  #-------Dispatchable generation technologies-----------------------------------#
 782   
 783  #--Reserve allocation--#
 784   
 785  qresgcu(Y,P,T,Z,RU,GD)..
 786                                          res_g(Y,P,T,Z,RU,GD)
 787                                          =e=
 788                                                  res_g_s(Y,P,T,Z,RU,GD)
 789                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 790                                                  ;
 791   
 792  qresgcd(Y,P,T,Z,RD,GD)..
 793                                          res_g(Y,P,T,Z,RD,GD)
 794                                          =e=
 795                                                  res_g_s(Y,P,T,Z,RD,GD)
 796                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 797                                                  ;
 798   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 799  #--Clustering logical constraints--#
 800   
 801  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 802                                          n(Y,P,T+1,Z,GD)
 803                                          =e=
 804                                                  n(Y,P,T,Z,GD)
 805                                                  + n_su(Y,P,T,Z,GD)
 806                                                  - n_sd(Y,P,T,Z,GD)
 807                                                  ;
 808   
 809  qnmax(Y,P,T,Z,GD)..
 810                                          n(Y,P,T,Z,GD)
 811                                          =l=
 812                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 813                                                  ;
 814   
 815  qnsu(Y,P,T,Z,GD)..
 816                                          n_su(Y,P,T,Z,GD)
 817                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 818                                          =l=
 819                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 820                                                  - n(Y,P,T,Z,GD)
 821                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 822                                                  ;
 823   
 824  qnsd(Y,P,T,Z,GD)..
 825                                          n_sd(Y,P,T,Z,GD)
 826                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 827                                          =l=
 828                                                  n(Y,P,T,Z,GD)
 829                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 830                                                  ;
 831   
 832  #--Generation constraints--#
 833   
 834  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 835                      gen(Y,P,T+1,Z,GD)
 836                      =e=
 837                          gen(Y,P,T,Z,GD)
 838                          + ramp_up(Y,P,T,Z,GD)
 839                          - ramp_dn(Y,P,T,Z,GD)
 840                          + ramp_su(Y,P,T,Z,GD)
 841                          - ramp_sd(Y,P,T,Z,GD)
 842                          ;
 843   
 844  qgenmin(Y,P,T,Z,GD)..
 845                                          gen(Y,P,T,Z,GD)
 846                                          =g=
 847                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 848                                                  ;
 849   
 850  qgenmax(Y,P,T,Z,GD)..
 851                                          gen(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 852                                          =l=
 853                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 854                                                  ;
 855                                                  #*G_DATA(G,'PM')/100;
 856   
 857  #--Ramping constraints--#
 858   
 859  qrudyn(Y,P,T,Z,GD)..
 860                      ramp_up(Y,P,T,Z,GD)
 861                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 862                      =l=
 863                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 864                          ;
 865   
 866  qrucap(Y,P,T,Z,GD)..
 867                      ramp_up(Y,P,T,Z,GD)
 868                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 869                      =l=
 870                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
 871                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
 872                          ;
 873   
 874  qrddyn(Y,P,T,Z,GD)..
 875                      ramp_dn(Y,P,T,Z,GD)
 876                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 877                      =l=
 878                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 879                          ;
 880   
 881  qrdcap(Y,P,T,Z,GD)..
 882                      ramp_dn(Y,P,T,Z,GD)
 883                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 884                      =l=
 885                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
 886                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
 887                          ;
 888   
 889  qsumin(Y,P,T,Z,GD)..
 890                                          ramp_su(Y,P,T,Z,GD)
 891                                          =g=
 892                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 893                                                  ;
 894   
 895  qsumax(Y,P,T,Z,GD)..
 896                                          ramp_su(Y,P,T,Z,GD)
 897                                          =l=
 898                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 899                                                  ;
 900   
 901  qsdmin(Y,P,T,Z,GD)..
 902                                          ramp_sd(Y,P,T,Z,GD)
 903                                          =g=
 904                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 905                                                  ;
 906   
 907  qsdmax(Y,P,T,Z,GD)..
 908                                          ramp_sd(Y,P,T,Z,GD)
 909                                          =l=
 910                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 911                                                  ;
 912   
 913  #--Reserve allocation constraints--#
 914   
 915  qrufu(Y,P,T,Z,GD)..
 916                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
 917                      =l=
 918                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
 919                          ;
 920   
 921  qruau(Y,P,T,Z,GD)..
 922                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
 923                      =l=
 924                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 925                          ;
 926   
 927  qrumus(Y,P,T,Z,GD)..
 928                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 929                      =l=
 930                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 931                          ;
 932   
 933  qrdad(Y,P,T,Z,GD)..
 934                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
 935                      =l=
 936                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 937                          ;
 938   
 939  qrdmd(Y,P,T,Z,GD)..
 940                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 941                      =l=
 942                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 943                          ;
 944   
 945  qrunsmin(Y,P,T,Z,RU,GD)..
 946                                          res_g_ns(Y,P,T,Z,RU,GD)
 947                                          =g=
 948                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
 949                                                  ;
 950   
 951  qrunsmax(Y,P,T,Z,RU,GD)..
 952                                          res_g_ns(Y,P,T,Z,RU,GD)
 953                                          =l=
 954                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
 955                                                  ;
 956   
 957  qrdsdmin(Y,P,T,Z,RD,GD)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 958                                          res_g_sd(Y,P,T,Z,RD,GD)
 959                                          =g=
 960                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
 961                                                  ;
 962   
 963  qrdsdmax(Y,P,T,Z,RD,GD)..
 964                                          res_g_sd(Y,P,T,Z,RD,GD)
 965                                          =l=
 966                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
 967                                                  ;
 968   
 969  #-------Intermittent renewable generation technologies-------------------------#
 970   
 971  #--Reserve allocation--#
 972   
 973  qresgru(Y,P,T,Z,RU,GRI)..
 974                                          res_g(Y,P,T,Z,RU,GRI)
 975                                          =e=
 976                                                  0
 977                                                  ;
 978   
 979  #--Output and curtailment constraint--#
 980   
 981  qgenr(Y,P,T,Z,GRI)..
 982                      gen(Y,P,T,Z,GRI)
 983                      + curt(Y,P,T,Z,GRI)
 984                      + curt_dummy(Y,P,T,Z,GRI)
 985                      =e=
 986                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
 987                          ;
 988   
 989  #--Reserve allocation constraints--#
 990   
 991  qresgrdr(Y,P,T,Z,GRI)..
 992                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
 993                                          =l=
 994                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
 995                                                  ;
 996   
 997  qresgrdg(Y,P,T,Z,GRI)..
 998                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
 999                                          =l=
1000                                                  gen(Y,P,T,Z,GRI)
1001                                                  ;
1002   
1003  #-----########################-------------------------------------------------#
1004  #-----# Storage technologies #-------------------------------------------------#
1005  #-----########################-------------------------------------------------#
1006   
1007  #-------General constraints----------------------------------------------------#
1008   
1009  ##--Reserve allocation--#
1010  #
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1011  #qress(Y,P,T,Z,R,S)..
1012  #                                       res_s(Y,P,T,Z,R,S)
1013  #                                       =e=
1014  #                                               res_s_c(Y,P,T,Z,R,S)
1015  #                                               + res_s_d(Y,P,T,Z,R,S)
1016  #                                               ;
1017  #
1018  ##--Installed capacities--#
1019  #
1020  #qspotcapmin(Y,C,S)..
1021  #                                       sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1022  #                                       =g=
1023  #                                               S_DATA(S,'CAP_MIN')
1024  #                                               ;
1025  #
1026  #qspotcapmax(Y,C,S)..
1027  #                                       sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1028  #                                       =l=
1029  #                                               S_DATA(S,'CAP_MAX')
1030  #                                               ;
1031  #
1032  ##-------Short- and mid-term storage--------------------------------------------#
1033  #
1034  ##--Energy constraints--#
1035  #
1036  #qe(Y,P,Z,SSM)..
1037  #                                       e(Y,P++1,Z,SSM)
1038  #                                       =e=
1039  #                                               e(Y,P,Z,SSM)
1040  #                                               + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1041  #                                               ;
1042  #
1043  #qemax(Y,P,Z,SSM)..
1044  #                                       e(Y,P,Z,SSM)
1045  #                                       =l=
1046  #                                               e_cap(Y,Z,SSM)
1047  #                                               #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1048  #                                               ;
1049  #
1050  #qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1051  #                                       e_f(Y,P,T,Z,SSM)
1052  #                                       =e=
1053  #                                               e(Y,P,Z,SSM)
1054  #                                               ;
1055  #
1056  #qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1057  #                                       e_f(Y,P,T+1,Z,SSM)
1058  #                                       =e=
1059  #                                               e_f(Y,P,T,Z,SSM)
1060  #                                               + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1061  #                                               - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1062  #                                               ;
1063  #
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1064  #qefmin(Y,P,T,Z,SSM)..
1065  #                                       e_f(Y,P,T,Z,SSM)
1066  #                                       =g=
1067  #                                               1/(S_DATA(SSM,'EFF_D')/100)*
1068  #                                               (p_d(Y,P,T,Z,SSM)*T_MARKET
1069  #                                               + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1070  #                                               ;
1071  #qefmax(Y,P,T,Z,SSM)..
1072  #                                       e_f(Y,P,T,Z,SSM)
1073  #                                       =l=
1074  #                                               e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1075  #                                               #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1076  #                                               (p_c(Y,P,T,Z,SSM)*T_MARKET
1077  #                                               + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1078  #                                               ;
1079  #
1080  #qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1081  #                                       e_l(Y,P,T,Z,SSM)
1082  #                                       =e=
1083  #                                               e(Y,P,Z,SSM)
1084  #                                               + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1085  #                                               ;
1086  #
1087  #qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1088  #                                       e_l(Y,P,T+1,Z,SSM)
1089  #                                       =e=
1090  #                                               e_l(Y,P,T,Z,SSM)
1091  #                                               + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1092  #                                               - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1093  #                                               ;
1094  #
1095  #qelmin(Y,P,T,Z,SSM)..
1096  #                                       e_l(Y,P,T,Z,SSM)
1097  #                                       =g=
1098  #                                               1/(S_DATA(SSM,'EFF_D')/100)*
1099  #                                               (p_d(Y,P,T,Z,SSM)*T_MARKET
1100  #                                               + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1101  #                                               ;
1102  #qelmax(Y,P,T,Z,SSM)..
1103  #                                       e_l(Y,P,T,Z,SSM)
1104  #                                       =l=
1105  #                                               e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1106  #                                               #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1107  #                                               (p_c(Y,P,T,Z,SSM)*T_MARKET
1108  #                                               + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1109  #                                               ;
1110  #
1111  ##--Duration limits--#
1112  #
1113  #qdurmin(Y,Z,SSM)..
1114  #                                       e_cap(Y,Z,SSM)
1115  #                                       #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1116  #                                       =g=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1117  #                                               p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1118  #                                               ;
1119  #
1120  #qdurmax(Y,Z,SSM)..
1121  #                                       e_cap(Y,Z,SSM)
1122  #                                       #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1123  #                                       =l=
1124  #                                               p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1125  #                                               ;
1126  #
1127  ##-------Short-term storage-----------------------------------------------------#
1128  #
1129  ##--Charging constraints--#
1130  #
1131  #qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1132  #                                       p_c(Y,P,T+1,Z,SS)
1133  #                                       =e=
1134  #                                               p_c(Y,P,T,Z,SS)
1135  #                                               + ramp_c_up(Y,P,T,Z,SS)
1136  #                       - ramp_c_dn(Y,P,T,Z,SS)
1137  #                       ;
1138  #
1139  #qsscru(Y,P,T,Z,SS)..
1140  #                    ramp_c_up(Y,P,T,Z,SS)
1141  #                    + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1142  #                    =l=
1143  #                       p_cap_c(Y,Z,SS)
1144  #                       - p_c(Y,P,T,Z,SS)
1145  #                       ;
1146  #
1147  #qsscrd(Y,P,T,Z,SS)..
1148  #                    ramp_c_dn(Y,P,T,Z,SS)
1149  #                    + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1150  #                    =l=
1151  #                       p_c(Y,P,T,Z,SS)
1152  #                       ;
1153  #
1154  ##--Discharging constraints--#
1155  #
1156  #qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1157  #                       p_d(Y,P,T+1,Z,SS)
1158  #                       =e=
1159  #                               p_d(Y,P,T,Z,SS)
1160  #                               + ramp_d_up(Y,P,T,Z,SS)
1161  #                       - ramp_d_dn(Y,P,T,Z,SS)
1162  #                       ;
1163  #
1164  #qssdru(Y,P,T,Z,SS)..
1165  #                    ramp_d_up(Y,P,T,Z,SS)
1166  #                    + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1167  #                    =l=
1168  #                       p_cap_c(Y,Z,SS)
1169  #                       - p_d(Y,P,T,Z,SS)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1170  #                       ;
1171  #
1172  #qssdrd(Y,P,T,Z,SS)..
1173  #                    ramp_d_dn(Y,P,T,Z,SS)
1174  #                    + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1175  #                    =l=
1176  #                       p_d(Y,P,T,Z,SS)
1177  #                       ;
1178  #
1179  ##-------Mid and long-term storage----------------------------------------------#
1180  #
1181  ##--Reserve allocation--#
1182  #
1183  #qresscu(Y,P,T,Z,RU,SML)..
1184  #                                       res_s_c(Y,P,T,Z,RU,SML)
1185  #                                       =e=
1186  #                                               res_s_c_s(Y,P,T,Z,RU,SML)
1187  #                                               + res_s_c_sd(Y,P,T,Z,RU,SML)
1188  #                                               ;
1189  #
1190  #qresscd(Y,P,T,Z,RD,SML)..
1191  #                                       res_s_c(Y,P,T,Z,RD,SML)
1192  #                                       =e=
1193  #                                               res_s_c_s(Y,P,T,Z,RD,SML)
1194  #                                               + res_s_c_ns(Y,P,T,Z,RD,SML)
1195  #                                               ;
1196  #
1197  #qressdu(Y,P,T,Z,RU,SM)..
1198  #                                       res_s_d(Y,P,T,Z,RU,SM)
1199  #                                       =e=
1200  #                                               res_s_d_s(Y,P,T,Z,RU,SM)
1201  #                                               + res_s_d_ns(Y,P,T,Z,RU,SM)
1202  #                                               ;
1203  #
1204  #qressdd(Y,P,T,Z,RD,SM)..
1205  #                                       res_s_d(Y,P,T,Z,RD,SM)
1206  #                                       =e=
1207  #                                               res_s_d_s(Y,P,T,Z,RD,SM)
1208  #                                               + res_s_d_sd(Y,P,T,Z,RD,SM)
1209  #                                               ;
1210  #
1211  ##--Charging logical constraints--#
1212  #
1213  #qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1214  #                                       n_c(Y,P,T+1,Z,SML)
1215  #                                       =e=
1216  #                                               n_c(Y,P,T,Z,SML)
1217  #                                               + n_c_su(Y,P,T,Z,SML)
1218  #                                               - n_c_sd(Y,P,T,Z,SML)
1219  #                                               ;
1220  #
1221  #qncmax(Y,P,T,Z,SML)..
1222  #                                       n_c(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1223  #                                       =l=
1224  #                                               p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1225  #                                               ;
1226  #
1227  #qncsu(Y,P,T,Z,SML)..
1228  #                                       n_c_su(Y,P,T,Z,SML)
1229  #                                       + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1230  #                                       =l=
1231  #                                               p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1232  #                                               - n_c(Y,P,T,Z,SML)
1233  #                                               ;
1234  #
1235  #qncsd(Y,P,T,Z,SML)..
1236  #                                       n_c_sd(Y,P,T,Z,SML)
1237  #                                       + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1238  #                                       =l=
1239  #                                               n_c(Y,P,T,Z,SML)
1240  #                                               ;
1241  #
1242  ##--Charging constraints--#
1243  #
1244  #qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1245  #                    p_c(Y,P,T+1,Z,SML)
1246  #                    =e=
1247  #                       p_c(Y,P,T,Z,SML)
1248  #                       + ramp_c_up(Y,P,T,Z,SML)
1249  #                       - ramp_c_dn(Y,P,T,Z,SML)
1250  #                       + ramp_c_su(Y,P,T,Z,SML)
1251  #                       - ramp_c_sd(Y,P,T,Z,SML)
1252  #                       ;
1253  #
1254  #qsmlcmin(Y,P,T,Z,SML)..
1255  #                                       p_c(Y,P,T,Z,SML)
1256  #                                       =g=
1257  #                                               n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1258  #                                               ;
1259  #
1260  #qsmlcmax(Y,P,T,Z,SML)..
1261  #                                       p_c(Y,P,T,Z,SML)
1262  #                                       =l=
1263  #                                               n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1264  #                                               ;
1265  #
1266  ##--Charging ramping constraints--#
1267  #
1268  #qcrudyn(Y,P,T,Z,SML)..
1269  #                    ramp_c_up(Y,P,T,Z,SML)
1270  #                    + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1271  #                    =l=
1272  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1273  #                       ;
1274  #
1275  #qcrucap(Y,P,T,Z,SML)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1276  #                    ramp_c_up(Y,P,T,Z,SML)
1277  #                    + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1278  #                    =l=
1279  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1280  #                       - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1281  #                       ;
1282  #
1283  #qcrddyn(Y,P,T,Z,SML)..
1284  #                    ramp_c_dn(Y,P,T,Z,SML)
1285  #                    + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1286  #                    =l=
1287  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1288  #                       ;
1289  #
1290  #qcrdcap(Y,P,T,Z,SML)..
1291  #                    ramp_c_dn(Y,P,T,Z,SML)
1292  #                    + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1293  #                    =l=
1294  #                       (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1295  #                       - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1296  #                       ;
1297  #
1298  #qcsumin(Y,P,T,Z,SML)..
1299  #                                       ramp_c_su(Y,P,T,Z,SML)
1300  #                                       =g=
1301  #                                               n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1302  #                                               ;
1303  #
1304  #qcsumax(Y,P,T,Z,SML)..
1305  #                                       ramp_c_su(Y,P,T,Z,SML)
1306  #                                       =l=
1307  #                                               n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1308  #                                               ;
1309  #
1310  #qcsdmin(Y,P,T,Z,SML)..
1311  #                                       ramp_c_sd(Y,P,T,Z,SML)
1312  #                                       =g=
1313  #                                               n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1314  #                                               ;
1315  #
1316  #qcsdmax(Y,P,T,Z,SML)..
1317  #                                       ramp_c_sd(Y,P,T,Z,SML)
1318  #                                       =l=
1319  #                                               n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1320  #                                               ;
1321  #
1322  ##--Reserve allocation constraints--#
1323  #
1324  #qcruad(Y,P,T,Z,SML)..
1325  #                    sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1326  #                    =l=
1327  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1328  #                       ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1329  #
1330  #qcrumd(Y,P,T,Z,SML)..
1331  #                    sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1332  #                    =l=
1333  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1334  #                       ;
1335  #
1336  #qcrdfu(Y,P,T,Z,SML)..
1337  #                    sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1338  #                    =l=
1339  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1340  #                       ;
1341  #
1342  #qcrdau(Y,P,T,Z,SML)..
1343  #                    sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1344  #                    =l=
1345  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1346  #                       ;
1347  #
1348  #qcrdmus(Y,P,T,Z,SML)..
1349  #                    sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1350  #                    =l=
1351  #                       (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1352  #                       ;
1353  #
1354  #qcrunsmin(Y,P,T,Z,RD,SML)..
1355  #                                       res_s_c_ns(Y,P,T,Z,RD,SML)
1356  #                                       =g=
1357  #                                               n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1358  #                                               ;
1359  #
1360  #qcrunsmax(Y,P,T,Z,RD,SML)..
1361  #                                       res_s_c_ns(Y,P,T,Z,RD,SML)
1362  #                                       =l=
1363  #                                               n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1364  #                                               ;
1365  #
1366  #qcrdsdmin(Y,P,T,Z,RU,SML)..
1367  #                                       res_s_c_sd(Y,P,T,Z,RU,SML)
1368  #                                       =g=
1369  #                                               n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1370  #                                               ;
1371  #
1372  #qcrdsdmax(Y,P,T,Z,RU,SML)..
1373  #                                       res_s_c_sd(Y,P,T,Z,RU,SML)
1374  #                                       =l=
1375  #                                               n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1376  #                                               ;
1377  #
1378  ##-------Mid-term storage-------------------------------------------------------#
1379  #
1380  #qcapdeqcapc(Y,Z,SM)..
1381  #                                       p_cap_d(Y,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1382  #                                       =e=
1383  #                                               p_cap_c(Y,Z,SM)
1384  #                                               ;
1385  #
1386  ##--Discharging logical constraints--#
1387  #
1388  #qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1389  #                                       n_d(Y,P,T+1,Z,SM)
1390  #                                       =e=
1391  #                                               n_d(Y,P,T,Z,SM)
1392  #                                               + n_d_su(Y,P,T,Z,SM)
1393  #                                               - n_d_sd(Y,P,T,Z,SM)
1394  #                                               ;
1395  #
1396  #qndmax(Y,P,T,Z,SM)..
1397  #                                       n_d(Y,P,T,Z,SM)
1398  #                                       =l=
1399  #                                               p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1400  #                                               ;
1401  #
1402  #qndsu(Y,P,T,Z,SM)..
1403  #                                       n_d_su(Y,P,T,Z,SM)
1404  #                                       + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1405  #                                       =l=
1406  #                                               p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1407  #                                               - n_d(Y,P,T,Z,SM)
1408  #                                               ;
1409  #
1410  #qndsd(Y,P,T,Z,SM)..
1411  #                                       n_d_sd(Y,P,T,Z,SM)
1412  #                                       + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1413  #                                       =l=
1414  #                                               n_d(Y,P,T,Z,SM)
1415  #                                               ;
1416  #
1417  ##--Discharging constraints--#
1418  #
1419  #qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1420  #                    p_d(Y,P,T+1,Z,SM)
1421  #                    =e=
1422  #                       p_d(Y,P,T,Z,SM)
1423  #                       + ramp_d_up(Y,P,T,Z,SM)
1424  #                       - ramp_d_dn(Y,P,T,Z,SM)
1425  #                       + ramp_d_su(Y,P,T,Z,SM)
1426  #                       - ramp_d_sd(Y,P,T,Z,SM)
1427  #                       ;
1428  #
1429  #qsmdmin(Y,P,T,Z,SM)..
1430  #                                       p_d(Y,P,T,Z,SM)
1431  #                                       =g=
1432  #                                               n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1433  #                                               ;
1434  #
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1435  #qsmdmax(Y,P,T,Z,SM)..
1436  #                                       p_d(Y,P,T,Z,SM)
1437  #                                       =l=
1438  #                                               n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1439  #                                               ;
1440  #
1441  ##--Discharging ramping constraints--#
1442  #
1443  #qdrudyn(Y,P,T,Z,SM)..
1444  #                    ramp_d_up(Y,P,T,Z,SM)
1445  #                    + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1446  #                    =l=
1447  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1448  #                       ;
1449  #
1450  #qdrucap(Y,P,T,Z,SM)..
1451  #                    ramp_d_up(Y,P,T,Z,SM)
1452  #                    + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1453  #                    =l=
1454  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1455  #                       - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1456  #                       ;
1457  #
1458  #qdrddyn(Y,P,T,Z,SM)..
1459  #                    ramp_d_dn(Y,P,T,Z,SM)
1460  #                    + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1461  #                    =l=
1462  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1463  #                       ;
1464  #
1465  #qdrdcap(Y,P,T,Z,SM)..
1466  #                    ramp_d_dn(Y,P,T,Z,SM)
1467  #                    + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1468  #                    =l=
1469  #                       (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1470  #                       - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1471  #                       ;
1472  #
1473  #qdsumin(Y,P,T,Z,SM)..
1474  #                                       ramp_d_su(Y,P,T,Z,SM)
1475  #                                       =g=
1476  #                                               n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1477  #                                               ;
1478  #
1479  #qdsumax(Y,P,T,Z,SM)..
1480  #                                       ramp_d_su(Y,P,T,Z,SM)
1481  #                                       =l=
1482  #                                               n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1483  #                                               ;
1484  #
1485  #qdsdmin(Y,P,T,Z,SM)..
1486  #                                       ramp_d_sd(Y,P,T,Z,SM)
1487  #                                       =g=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1488  #                                               n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1489  #                                               ;
1490  #
1491  #qdsdmax(Y,P,T,Z,SM)..
1492  #                                       ramp_d_sd(Y,P,T,Z,SM)
1493  #                                       =l=
1494  #                                               n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1495  #                                               ;
1496  #
1497  ##--Reserve allocation constraints--#
1498  #
1499  #qdrufu(Y,P,T,Z,SM)..
1500  #                    sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1501  #                    =l=
1502  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1503  #                       ;
1504  #
1505  #qdruau(Y,P,T,Z,SM)..
1506  #                    sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1507  #                    =l=
1508  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1509  #                       ;
1510  #
1511  #qdrumus(Y,P,T,Z,SM)..
1512  #                    sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1513  #                    =l=
1514  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1515  #                       ;
1516  #
1517  #qdrdad(Y,P,T,Z,SM)..
1518  #                    sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1519  #                    =l=
1520  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1521  #                       ;
1522  #
1523  #qdrdmd(Y,P,T,Z,SM)..
1524  #                    sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1525  #                    =l=
1526  #                       (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1527  #                       ;
1528  #
1529  #qdrunsmin(Y,P,T,Z,RU,SM)..
1530  #                                       res_s_d_ns(Y,P,T,Z,RU,SM)
1531  #                                       =g=
1532  #                                               n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1533  #                                               ;
1534  #
1535  #qdrunsmax(Y,P,T,Z,RU,SM)..
1536  #                                       res_s_d_ns(Y,P,T,Z,RU,SM)
1537  #                                       =l=
1538  #                                               n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1539  #                                               ;
1540  #
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1541  #qdrdsdmin(Y,P,T,Z,RD,SM)..
1542  #                                       res_s_d_sd(Y,P,T,Z,RD,SM)
1543  #                                       =g=
1544  #                                               n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1545  #                                               ;
1546  #
1547  #qdrdsdmax(Y,P,T,Z,RD,SM)..
1548  #                                       res_s_d_sd(Y,P,T,Z,RD,SM)
1549  #                                       =l=
1550  #                                               n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1551  #                                               ;
1552  #
1553  ##-------Long-term storage------------------------------------------------------#
1554  #
1555  ##--Discharging reserve allocation--#
1556  #
1557  #qslressd(Y,P,T,Z,R,SL)..
1558  #                                       res_s_d(Y,P,T,Z,R,SL)
1559  #                                       =e=
1560  #                                               0
1561  #                                               ;
1562  #
1563  ##--Gas energy balance--#
1564  #
1565  #qgase(Y,P,C)..
1566  #                                       eg(Y,P++1,C)
1567  #                                       =e=
1568  #                                               eg(Y,P,C)
1569  #                                               + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1570  #                                               ;
1571  #
1572  #qgasemax(Y,P,C)..
1573  #                                       eg(Y,P,C)
1574  #                                       =l=
1575  #                                               E_LP
1576  #                                               + eg_cap
1577  #                                               ;
1578  #
1579  #qgasef(Y,P,T,C)$(ord(T)<card(T))..
1580  #                                       eg_f(Y,P,T+1,C)
1581  #                                       =e=
1582  #                                               eg_f(Y,P,T,C)
1583  #                                               + pg_c(Y,P,T,C)
1584  #                                               - pg_d(Y,P,T,C)
1585  #                                               ;
1586  #
1587  #qgasefmax(Y,P,T,C)..
1588  #                                       eg_f(Y,P,T,C)
1589  #                                       =l=
1590  #                                               E_LP
1591  #                                               + eg_cap
1592  #                                               ;
1593  #
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1594  #qgasefstart(Y,P,T,C)$(ord(T)=1)..
1595  #                                       eg_f(Y,P,T,C)
1596  #                                       =e=
1597  #                                               eg(Y,P,C)
1598  #                                               ;
1599  #
1600  #qgasel(Y,P,T,C)$(ord(T)<card(T))..
1601  #                                       eg_l(Y,P,T+1,C)
1602  #                                       =e=
1603  #                                               eg_l(Y,P,T,C)
1604  #                                               + pg_c(Y,P,T,C)
1605  #                                               - pg_d(Y,P,T,C)
1606  #                                               ;
1607  #
1608  #qgaselmax(Y,P,T,C)..
1609  #                                       eg_l(Y,P,T,C)
1610  #                                       =l=
1611  #                                               E_LP
1612  #                                               + eg_cap
1613  #                                               ;
1614  #
1615  #qgaselstart(Y,P,T,C)$(ord(T)=1)..
1616  #                                       eg_l(Y,P,T,C)
1617  #                                       =e=
1618  #                                               eg(Y,P,C)
1619  #                                               + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1620  #                                               ;
1621  #
1622  ##--Gas charging constraints--#
1623  #
1624  #qgasc(Y,P,T,C)..
1625  #                                       pg_c(Y,P,T,C)
1626  #                                       =e=
1627  #                                               sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1628  #                                               + pg_import(Y,P,T,C)
1629  #                                               ;
1630  #
1631  ##--Gas discharging constraints--#
1632  #
1633  #qgasd(Y,P,T,C)..
1634  #                                       pg_d(Y,P,T,C)
1635  #                                       =e=
1636  #                                               sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1637  #                                               ;
1638  #
1639  ##--Gas usage--#
1640  #
1641  #qgasuse(Y,C)..
1642  #                                       sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1643  #                                       =l=
1644  #                                               sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1645  #                                               ;
1646  #
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1647  #qgasusegen(Y,P,T,Z,GCG)..
1648  #                                       gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1649  #                                       =e=
1650  #                                               pg_syn(Y,P,T,Z,GCG)
1651  #                                               + pg_fos(Y,P,T,Z,GCG)
1652  #                                               ;
1653   
1654  ################################################
1655  ################################################
1656   
1657  demand(P,T,Z)..
1658                                          demand_unit(P,T,Z) =e= DEM_T(P,T,Z) + sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)*(price_unit(P,T,Z)-P_REF))
1659                                          #demand_unit(P,T,Z) =e= 8000
1660                                          ;
1661   
1662  totdemand(P,Z)..
1663                                          sum(T,DEM_T(P,T,Z)) =e= sum(T,demand_unit(P,T,Z))
1664                                          ;
1665   
1666  totdemand2(P,Z)..
1667  #                                       demand_tot(P,Z) =e= sum(T,demand_unit(P,T,Z))
1668                                          demand_tot(P,Z) =e= sum(T,DEM_T(P,T,Z))
1669                                          ;
1670   
1671  price(P,T,Z)..
1672                                          (price_unit(P,T,Z) - P_REF)*sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)) =e= (demand_unit(P,T,Z)-DEM_T(P,T,Z))
1673                                          ;
1674   
1675  refdemand(P,T,Z)..
1676                                          demand_ref(P,T,Z) =e= DEM_T(P,T,Z)
1677                                          ;
1678   
1679  shiftconstraint(P,H,Z)..
1680                                          sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1681                                          ;
1682   
1683  priceconstraint1(P,T,Z)..
1684                                          price_unit(P,T,Z) =l= P_ref + LIMIT
1685  #                                       price_unit(P,T,Z) =l= sum(T,price_unit(P,T,Z))/card(T) + LIMIT TODO: werkt niet
1686                                          ;
1687   
1688  priceconstraint2(P,T,Z)..
1689                                          price_unit(P,T,Z) =g= P_ref - LIMIT
1690  #                                       price_unit(P,T,Z) =g= sum(T,price_unit(P,T,Z))/card(T) - LIMIT TODO: werkt niet
1691                                          ;
1692   
1693  priceconstraint3(P,Z)..
1694  #                                       sum(T,price_unit(P,T,Z)*demand_unit(P,T,Z)) =e= P_ref*demand_tot(P,Z)
1695                                          sum(T,price_unit(P,T,Z))/card(T) =e= P_REF
1696                                          ;
1697   
1698   
1699  qinnerframe(P,H,Z)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1700                                          innerframe(P,H,Z) =e= sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T))
1701                                          ;
1702   
1703  qouterframe(P,H,Z)..
1704                                          outerframe(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1705                                          ;
1706   
1707  revenue(P,Z)..
1708                                          totalrevenue(P,Z) =e= sum((T),price_unit(P,T,Z)*demand_unit(P,T,Z))*W(P)*168/card(T)
1709                                          ;
1710  fixedcost(Z)..
1711                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1712                                          ;
1713   
1714  variablecost(P,Z)..
1715                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1716                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1717                                          ;
1718   
1719   
1720  MODEL GOA GOA model /
1721   
1722  #-------Objective function-----------------------------------------------------#
1723                  qobj
1724   
1725  #-------System constraints-----------------------------------------------------#
1726                  qbalance
1727   
1728                  qresprod
1729                  qco2lim
1730   
1731                  qresendomin
1732                  qresendomax
1733                  qres
1734   
1735                  #qgendisp
1736                  #qgendisppeak
1737   
1738                  qco2
1739                  qlcg
1740   
1741  #-------Generation technologies------------------------------------------------#
1742                  qpotcapmin
1743  #               qpotcapmax
1744  #               qpotgenmin
1745  #               qpotgenmax
1746   
1747  #--Conventional generation technologies--#
1748                  qresgcu
1749                  qresgcd
1750   
1751                  qn
1752                  qnmax
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1753                  qnsu
1754                  qnsd
1755   
1756                  qgen
1757                  qgenmin
1758                  qgenmax
1759   
1760                  qrudyn
1761                  qrucap
1762                  qrddyn
1763                  qrdcap
1764                  qsumin
1765                  qsumax
1766                  qsdmin
1767                  qsdmax
1768   
1769                  qrufu
1770                  qruau
1771                  qrumus
1772                  qrdad
1773                  qrdmd
1774                  qrunsmin
1775                  qrunsmax
1776                  qrdsdmin
1777                  qrdsdmax
1778   
1779  #--Intermittent renewable generation technologies--#
1780                  qresgru
1781   
1782                  qgenr
1783   
1784                  qresgrdr
1785                  qresgrdg
1786   
1787  ##-------Storage technologies---------------------------------------------------#
1788  ##--General constraints--#
1789  #               qress
1790  #               qspotcapmin
1791  #               qspotcapmax
1792  #
1793  #               qe
1794  #               qemax
1795  #               qef
1796  #               qefmin
1797  #               qefmax
1798  #               qefstart
1799  #               qel
1800  #               qelmin
1801  #               qelmax
1802  #               qelstart
1803  #
1804  #               qdurmin
1805  #               qdurmax
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1806  #
1807  ##--Short-term storage--#
1808  #               qssc
1809  #               qsscru
1810  #               qsscrd
1811  #
1812  #               qssd
1813  #               qssdru
1814  #               qssdrd
1815  #
1816  ##--Mid and long-term storage--#
1817  #               qresscu
1818  #               qresscd
1819  #               qressdu
1820  #               qressdd
1821  #
1822  #               qnc
1823  #               qncmax
1824  #               qncsu
1825  #               qncsd
1826  #
1827  #               qsmlc
1828  #               qsmlcmin
1829  #               qsmlcmax
1830  #
1831  #               qcrudyn
1832  #               qcrucap
1833  #               qcrddyn
1834  #               qcrdcap
1835  #               qcsumin
1836  #               qcsumax
1837  #               qcsdmin
1838  #               qcsdmax
1839  #
1840  #               qcruad
1841  #               qcrumd
1842  #               qcrdfu
1843  #               qcrdau
1844  #               qcrdmus
1845  #               qcrunsmin
1846  #               qcrunsmax
1847  #               qcrdsdmin
1848  #               qcrdsdmax
1849  #
1850  ##--Mid-term storage--#
1851  #               qcapdeqcapc
1852  #
1853  #               qnd
1854  #               qndmax
1855  #               qndsu
1856  #               qndsd
1857  #
1858  #               qsmd
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1859  #               qsmdmin
1860  #               qsmdmax
1861  #
1862  #               qdrudyn
1863  #               qdrucap
1864  #               qdrddyn
1865  #               qdrdcap
1866  #               qdsumin
1867  #               qdsumax
1868  #               qdsdmin
1869  #               qdsdmax
1870  #
1871  #               qdrufu
1872  #               qdruau
1873  #               qdrumus
1874  #               qdrdad
1875  #               qdrdmd
1876  #               qdrunsmin
1877  #               qdrunsmax
1878  #               qdrdsdmin
1879  #               qdrdsdmax
1880  #
1881  ##--Long-term storage--#
1882  #               qslressd
1883  #
1884  #               qgase
1885  #               qgasemax
1886  #               qgasef
1887  #               qgasefmax
1888  #               qgasefstart
1889  #               qgasel
1890  #               qgaselmax
1891  #               qgaselstart
1892  #
1893  #               qgasc
1894  #
1895  #               qgasd
1896  #
1897  #               qgasuse
1898  #               qgasusegen
1899   
1900  #-- Price-elasticity--#
1901   
1902                  price
1903                  demand
1904                  totdemand
1905                  totdemand2
1906                  refdemand
1907                  priceconstraint1
1908                  priceconstraint2
1909  #               priceconstraint3
1910                  shiftconstraint
1911                  qinnerframe
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1912                  qouterframe
1913   
1914  #               revenue
1915                  fixedcost
1916                  variablecost
1917  /;
1918   
1919   
1920   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 39
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/NLP.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.000 SECONDS      3 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/19/16 16:07:32 Page 40
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/NLP.gms
Output     C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/NLP.lst
Save       C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
