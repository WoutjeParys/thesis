GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(T,H)                              Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  COMPENSATE(P,T)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_DIAG(T,H)
 337  ;
 338   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  G_DATA = 39:G_DATA
 339  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 340  $LOAD S_DATA
--- LOAD  RG = 41:RG
 341  $LOAD RG
--- LOAD  RSC = 42:RSC
 342  $LOAD RSC
--- LOAD  RSD = 43:RSD
 343  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 344  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 345  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 346  $LOAD REL_T
--- LOAD  W = 48:W
 347  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 348  $LOAD POL_TARGETS
 349  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 350  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 351  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 352  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 353  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 354  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 355  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 356  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 58:SHIFTMAX
 357  $LOAD SHIFTMAX
--- LOAD  COMPENSATE = 59:COMPENSATE
 358  $LOAD COMPENSATE
 359   
 360  #C_GAS = 25.6643460843943;
 361  C_GAS = 25.6643460843943*2;
 362  T_MARKET = 1;
 363  EGCAPEX = 2000000000000000000000000;
 364  E_LP = 7100000;
 365  P_REF = 55.5;
 366  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 367  LIMITPRICE = P_REF*0.5;
 368  LIMITDEM = 750;
 369  LIMITSHIFT = 1500;
 370  LENGTH_P = card(T);
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 10:00:17 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 371  ELAST_DIAG(T,H) = ELAST(T,H)*DIAG(T,H);
 372   
 373  eff_factor_earlier = 1;
 374  eff_factor_later = 1;
 375   
 376  VARIABLES
 377  obj                     Value of objective function
 378  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 379  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 380  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 381  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 382  shiftaway(P,H,Z)                                Shift away from an hour
 383  shift_total(P,Z)                                Shift away from a period
 384  ;
 385   
 386  POSITIVE VARIABLES
 387  #######################################################
 388   
 389  price_unit(P,H,Z)                               Price of the electricity
 390  price_unit_clone(P,T,Z)
 391  demand_unit(P,T,Z)                              demand of the electricity
 392  demand_unit_clone(P,H,Z)
 393  demand_tot(P,Z)                                 total demand, based on demand_unit
 394  demand_ref(P,T,Z)                               the reference demand with flat price
 395  innerframe(P,H,Z)
 396  outerframe(P,H,Z)
 397   
 398  totalrevenue(P,Z)                               the product of demand and price
 399  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 400  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 401  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 402   
 403  #######################################################
 404   
 405  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 406  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 407  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 408  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 409  eg_cap                                          Gas storage capacity
 410   
 411  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 412  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 413   
 414  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 415  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 416  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 417  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 418  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 419  eg(Y,P,C)                                       Energy content of gas storage at period P
 420  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 421  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 422  pg_c(Y,P,T,C)                           Charging of gas storage
 423  pg_d(Y,P,T,C)                           Discharging of gas storage
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 424   
 425  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 426  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 427   
 428  load_shedding(Y,P,T,Z)          Load shedding
 429  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 430  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 431  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 432   
 433  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 434  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 435  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 436   
 437  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 438  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 439  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 440  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 441  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 442   
 443  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 444  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 445  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 446  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 447   
 448  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 449   
 450  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 451  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 452  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 453  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 454  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 455  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 456  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 457  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 458   
 459  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 460  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 461  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 462  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 463  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 464   
 465  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 466  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 467  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 468  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 469   
 470  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 471  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 472  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 473  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 474  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 475   
 476  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 477  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 478  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 479  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 480   
 481  pg_import(Y,P,T,C)                      Import of gas
 482  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 483  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 484   
 485  ;
 486   
 487  EQUATIONS
 488  #--Objective function--#
 489  qobj
 490   
 491  #--System constraints--#
 492  qbalance(Y,P,T,Z)
 493  qresprod(Y,C)
 494  qco2lim(Y,C)
 495  qresendomin(Y,P,T,C,R,GRI)
 496  qresendomax(Y,P,T,C,R,GRI)
 497  qres(Y,P,T,C,R)
 498  qgendisp(Y,P,T,C)
 499  qgendisppeak(Y,C)
 500  qco2(Y,C,G)
 501  qlcg(Y,C,G)
 502   
 503  #--Generation technologies--#
 504  qpotcapmin(Y,C,G)
 505  #qpotcapmax(Y,C,G)
 506  #qpotgenmin(Y,C,G)
 507  #qpotgenmax(Y,C,G)
 508   
 509  qresgcu(Y,P,T,Z,RU,GD)
 510  qresgcd(Y,P,T,Z,RD,GD)
 511  qn(Y,P,T,Z,GD)
 512  qnmax(Y,P,T,Z,GD)
 513  qnsu(Y,P,T,Z,GD)
 514  qnsd(Y,P,T,Z,GD)
 515  qgen(Y,P,T,Z,GD)
 516  qgenmin(Y,P,T,Z,GD)
 517  qgenmax(Y,P,T,Z,GD)
 518  qrudyn(Y,P,T,Z,GD)
 519  qrucap(Y,P,T,Z,GD)
 520  qrddyn(Y,P,T,Z,GD)
 521  qrdcap(Y,P,T,Z,GD)
 522  qsumin(Y,P,T,Z,GD)
 523  qsumax(Y,P,T,Z,GD)
 524  qsdmin(Y,P,T,Z,GD)
 525  qsdmax(Y,P,T,Z,GD)
 526  qrufu(Y,P,T,Z,GD)
 527  qruau(Y,P,T,Z,GD)
 528  qrumus(Y,P,T,Z,GD)
 529  qrdad(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 530  qrdmd(Y,P,T,Z,GD)
 531  qrunsmin(Y,P,T,Z,RU,GD)
 532  qrunsmax(Y,P,T,Z,RU,GD)
 533  qrdsdmin(Y,P,T,Z,RD,GD)
 534  qrdsdmax(Y,P,T,Z,RD,GD)
 535   
 536  qresgru(Y,P,T,Z,RU,GRI)
 537  qgenr(Y,P,T,Z,GRI)
 538  qresgrdr(Y,P,T,Z,GRI)
 539  qresgrdg(Y,P,T,Z,GRI)
 540   
 541  #--Storage technologies--#
 542  qress(Y,P,T,Z,R,S)
 543  qspotcapmin(Y,C,S)
 544  qspotcapmax(Y,C,S)
 545   
 546  qe(Y,P,Z,S)
 547  qemax(Y,P,Z,S)
 548  qef(Y,P,T,Z,S)
 549  qefmin(Y,P,T,Z,S)
 550  qefmax(Y,P,T,Z,S)
 551  qefstart(Y,P,T,Z,S)
 552  qel(Y,P,T,Z,S)
 553  qelmin(Y,P,T,Z,S)
 554  qelmax(Y,P,T,Z,S)
 555  qelstart(Y,P,T,Z,S)
 556  qdurmin(Y,Z,S)
 557  qdurmax(Y,Z,S)
 558   
 559  qssc(Y,P,T,Z,SS)
 560  qsscru(Y,P,T,Z,SS)
 561  qsscrd(Y,P,T,Z,SS)
 562  qssd(Y,P,T,Z,SS)
 563  qssdru(Y,P,T,Z,SS)
 564  qssdrd(Y,P,T,Z,SS)
 565   
 566  qresscu(Y,P,T,Z,RU,SML)
 567  qresscd(Y,P,T,Z,RD,SML)
 568  qressdu(Y,P,T,Z,RU,SM)
 569  qressdd(Y,P,T,Z,RD,SM)
 570  qnc(Y,P,T,Z,SML)
 571  qncmax(Y,P,T,Z,SML)
 572  qncsu(Y,P,T,Z,SML)
 573  qncsd(Y,P,T,Z,SML)
 574  qsmlc(Y,P,T,Z,SML)
 575  qsmlcmin(Y,P,T,Z,SML)
 576  qsmlcmax(Y,P,T,Z,SML)
 577  qcrudyn(Y,P,T,Z,SML)
 578  qcrucap(Y,P,T,Z,SML)
 579  qcrddyn(Y,P,T,Z,SML)
 580  qcrdcap(Y,P,T,Z,SML)
 581  qcsumin(Y,P,T,Z,SML)
 582  qcsumax(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 583  qcsdmin(Y,P,T,Z,SML)
 584  qcsdmax(Y,P,T,Z,SML)
 585  qcruad(Y,P,T,Z,SML)
 586  qcrumd(Y,P,T,Z,SML)
 587  qcrdfu(Y,P,T,Z,SML)
 588  qcrdau(Y,P,T,Z,SML)
 589  qcrdmus(Y,P,T,Z,SML)
 590  qcrunsmin(Y,P,T,Z,RD,SML)
 591  qcrunsmax(Y,P,T,Z,RD,SML)
 592  qcrdsdmin(Y,P,T,Z,RU,SML)
 593  qcrdsdmax(Y,P,T,Z,RU,SML)
 594   
 595  qcapdeqcapc(Y,Z,SM)
 596  qnd(Y,P,T,Z,SM)
 597  qndmax(Y,P,T,Z,SM)
 598  qndsu(Y,P,T,Z,SM)
 599  qndsd(Y,P,T,Z,SM)
 600  qsmd(Y,P,T,Z,SM)
 601  qsmdmin(Y,P,T,Z,SM)
 602  qsmdmax(Y,P,T,Z,SM)
 603  qdrudyn(Y,P,T,Z,SM)
 604  qdrucap(Y,P,T,Z,SM)
 605  qdrddyn(Y,P,T,Z,SM)
 606  qdrdcap(Y,P,T,Z,SM)
 607  qdsumin(Y,P,T,Z,SM)
 608  qdsumax(Y,P,T,Z,SM)
 609  qdsdmin(Y,P,T,Z,SM)
 610  qdsdmax(Y,P,T,Z,SM)
 611  qdrufu(Y,P,T,Z,SM)
 612  qdruau(Y,P,T,Z,SM)
 613  qdrumus(Y,P,T,Z,SM)
 614  qdrdad(Y,P,T,Z,SM)
 615  qdrdmd(Y,P,T,Z,SM)
 616  qdrunsmin(Y,P,T,Z,RU,SM)
 617  qdrunsmax(Y,P,T,Z,RU,SM)
 618  qdrdsdmin(Y,P,T,Z,RD,SM)
 619  qdrdsdmax(Y,P,T,Z,RD,SM)
 620   
 621  qslressd(Y,P,T,Z,R,SL)
 622  qgase(Y,P,C)
 623  qgasemax(Y,P,C)
 624  qgasef(Y,P,T,C)
 625  qgasefmax(Y,P,T,C)
 626  qgasefstart(Y,P,T,C)
 627  qgasel(Y,P,T,C)
 628  qgaselmax(Y,P,T,C)
 629  qgaselstart(Y,P,T,C)
 630  qgasc(Y,P,T,C)
 631  qgasd(Y,P,T,C)
 632  qgasuse(Y,C)
 633  qgasusegen(Y,P,T,Z,GCG)
 634   
 635  ###############################
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 636  #price(P,H,Z)
 637  price_clone(P,T,Z)
 638  demand(P,T,Z)
 639  demand_clone(P,H,Z)
 640  totdemand(P,Z)
 641  totdemand2(P,Z)
 642  refdemand(P,T,Z)
 643  refdemand2(Z)
 644  priceconstraint1(P,T,Z)
 645  priceconstraint2(P,T,Z)
 646  priceconstraint3(P,Z)
 647  shiftconstraint(P,H,Z)
 648  shiftconstraint1(P,H,Z)
 649  shiftconstraint2(P,H,Z)
 650  shiftedforward(P,H,Z)
 651  shiftedbackward(P,H,Z)
 652  shiftedaway(P,H,Z)
 653  qinnerframe(P,H,Z)
 654  qouterframe(P,H,Z)
 655   
 656  revenue(P,Z)
 657  fixedcost(Z)
 658  variablecost(P,Z)
 659  cost(Z)
 660   
 661  demlimitunder(P,T,Z)
 662  demlimitupper(P,T,Z)
 663  ;
 664   
 665  #-----######################---------------------------------------------------#
 666  #-----# Objective function #---------------------------------------------------#
 667  #-----######################---------------------------------------------------#
 668  qobj..              obj
 669                                          =e=
 670                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 671                                                  #+ sum((Y,Z,S),      (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 672                                                  +
 673                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 674                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 675   
 676                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 677   
 678                                                  )
 679                                                  *(168/card(T));
 680                                                  ;
 681   
 682   
 683   
 684   
 685  #-----######################---------------------------------------------------#
 686  #-----# System constraints #---------------------------------------------------#
 687  #-----######################---------------------------------------------------#
 688   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 689  #--System balance--#
 690   
 691  # balance with demand response
 692  qbalance(Y,P,T,Z)..
 693                                  sum(G, gen(Y,P,T,Z,G))
 694                                  #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 695                                          =e=
 696                                                  demand_unit(P,T,Z)
 697  #                                               - load_shedding(Y,P,T,Z)
 698                                                  #+ sum(S, p_c(Y,P,T,Z,S))
 699                                                  ;
 700   
 701  #balance without demand response
 702  #qbalance(Y,P,T,Z)..
 703  #                               sum(G, gen(Y,P,T,Z,G))
 704  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 705  #                                       =e=
 706  #                                               DEM_T(P,T,Z)
 707  #                                       #       - load_shedding(Y,P,T,Z)
 708  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 709  #                                               ;
 710  #DEM(Y,Z)*DEM_T(T,Z);
 711   
 712  #--Renewable target--#
 713   
 714  #qresprod(Y,C)..
 715  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 716  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 717  #                                       =l=
 718  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 719  #                                               ;
 720   
 721  qresprod(Y,C)..
 722                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 723                                          =g=
 724                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 725                                                  ;
 726   
 727  qco2lim(Y,C)..
 728  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 729  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 730                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 731                                          =l=
 732                                                  50000000*0.4
 733                                                  ;
 734   
 735  #--Reserve requirements--#
 736   
 737  qresendomin(Y,P,T,C,R,GRI)..
 738                                          q_endo(Y,P,T,C,R,GRI)
 739                                          =g=
 740                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 741                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 742   
 743  qresendomax(Y,P,T,C,R,GRI)..
 744                                          q_endo(Y,P,T,C,R,GRI)
 745                                          =l=
 746                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 747                                                  ;
 748   
 749   
 750  qres(Y,P,T,C,R)..
 751                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 752                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 753                                          =e=
 754                                                  R_EXO(C,R)
 755                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 756                                                  ;
 757   
 758  #--Dispatchable capacity--#
 759   
 760  qgendisp(Y,P,T,C)..
 761                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 762                                          =g=
 763                                                  sum(Z $ C_Z(C,Z), DEM_T(P,T,Z))*0.20
 764                                                  ;
 765   
 766  qgendisppeak(Y,C)..
 767                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 768                                          =g=
 769                                                  10000*1.20
 770                                                  ;
 771   
 772  #--Emissions--#
 773   
 774  qco2(Y,C,G)..
 775                                          co2(Y,C,G)
 776                                          =e=
 777                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 778                                                  ;
 779   
 780  qlcg(Y,C,G)..
 781                                          lcg(Y,C,G)
 782                                          =e=
 783                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 784                                                  ;
 785   
 786   
 787  #-----###########################----------------------------------------------#
 788  #-----# Generation technologies #----------------------------------------------#
 789  #-----###########################----------------------------------------------#
 790   
 791  ##--Installed generation capacities--#
 792   
 793  qpotcapmin(Y,C,G)..
 794                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 795                                          =g=
 796                                                  G_DATA(G,'CAP_MIN')
 797                                                  ;
 798   
 799  #qpotcapmax(Y,C,G)..
 800  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 801  #                                       =g=
 802  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 803  #                                               ;
 804  #
 805  #qpotgenmin(Y,C,G)..
 806  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 807  #                                       =g=
 808  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 809  #                                               ;
 810  #
 811  #qpotgenmax(Y,Z,G)..
 812  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 813  #                                       =g=
 814  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 815  #                                               ;
 816   
 817  #-------Dispatchable generation technologies-----------------------------------#
 818   
 819  #--Reserve allocation--#
 820   
 821  qresgcu(Y,P,T,Z,RU,GD)..
 822                                          res_g(Y,P,T,Z,RU,GD)
 823                                          =e=
 824                                                  res_g_s(Y,P,T,Z,RU,GD)
 825                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 826                                                  ;
 827   
 828  qresgcd(Y,P,T,Z,RD,GD)..
 829                                          res_g(Y,P,T,Z,RD,GD)
 830                                          =e=
 831                                                  res_g_s(Y,P,T,Z,RD,GD)
 832                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 833                                                  ;
 834   
 835  #--Clustering logical constraints--#
 836   
 837  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 838                                          n(Y,P,T+1,Z,GD)
 839                                          =e=
 840                                                  n(Y,P,T,Z,GD)
 841                                                  + n_su(Y,P,T,Z,GD)
 842                                                  - n_sd(Y,P,T,Z,GD)
 843                                                  ;
 844   
 845  qnmax(Y,P,T,Z,GD)..
 846                                          n(Y,P,T,Z,GD)
 847                                          =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 848                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 849                                                  ;
 850   
 851  qnsu(Y,P,T,Z,GD)..
 852                                          n_su(Y,P,T,Z,GD)
 853                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 854                                          =l=
 855                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 856                                                  - n(Y,P,T,Z,GD)
 857                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 858                                                  ;
 859   
 860  qnsd(Y,P,T,Z,GD)..
 861                                          n_sd(Y,P,T,Z,GD)
 862                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 863                                          =l=
 864                                                  n(Y,P,T,Z,GD)
 865                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 866                                                  ;
 867   
 868  #--Generation constraints--#
 869   
 870  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 871                      gen(Y,P,T+1,Z,GD)
 872                      =e=
 873                          gen(Y,P,T,Z,GD)
 874                          + ramp_up(Y,P,T,Z,GD)
 875                          - ramp_dn(Y,P,T,Z,GD)
 876                          + ramp_su(Y,P,T,Z,GD)
 877                          - ramp_sd(Y,P,T,Z,GD)
 878                          ;
 879   
 880  qgenmin(Y,P,T,Z,GD)..
 881                                          gen(Y,P,T,Z,GD)
 882                                          =g=
 883                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 884                                                  ;
 885   
 886  qgenmax(Y,P,T,Z,GD)..
 887                                          gen(Y,P,T,Z,GD)
 888                                          =l=
 889                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 890                                                  ;
 891                                                  #*G_DATA(G,'PM')/100;
 892   
 893  #--Ramping constraints--#
 894   
 895  qrudyn(Y,P,T,Z,GD)..
 896                      ramp_up(Y,P,T,Z,GD)
 897                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 898                      =l=
 899                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 900                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 901   
 902  qrucap(Y,P,T,Z,GD)..
 903                      ramp_up(Y,P,T,Z,GD)
 904                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 905                      =l=
 906                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
 907                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
 908                          ;
 909   
 910  qrddyn(Y,P,T,Z,GD)..
 911                      ramp_dn(Y,P,T,Z,GD)
 912                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 913                      =l=
 914                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 915                          ;
 916   
 917  qrdcap(Y,P,T,Z,GD)..
 918                      ramp_dn(Y,P,T,Z,GD)
 919                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 920                      =l=
 921                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
 922                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
 923                          ;
 924   
 925  qsumin(Y,P,T,Z,GD)..
 926                                          ramp_su(Y,P,T,Z,GD)
 927                                          =g=
 928                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 929                                                  ;
 930   
 931  qsumax(Y,P,T,Z,GD)..
 932                                          ramp_su(Y,P,T,Z,GD)
 933                                          =l=
 934                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 935                                                  ;
 936   
 937  qsdmin(Y,P,T,Z,GD)..
 938                                          ramp_sd(Y,P,T,Z,GD)
 939                                          =g=
 940                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 941                                                  ;
 942   
 943  qsdmax(Y,P,T,Z,GD)..
 944                                          ramp_sd(Y,P,T,Z,GD)
 945                                          =l=
 946                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 947                                                  ;
 948   
 949  #--Reserve allocation constraints--#
 950   
 951  qrufu(Y,P,T,Z,GD)..
 952                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
 953                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 954                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
 955                          ;
 956   
 957  qruau(Y,P,T,Z,GD)..
 958                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
 959                      =l=
 960                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 961                          ;
 962   
 963  qrumus(Y,P,T,Z,GD)..
 964                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 965                      =l=
 966                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 967                          ;
 968   
 969  qrdad(Y,P,T,Z,GD)..
 970                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
 971                      =l=
 972                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 973                          ;
 974   
 975  qrdmd(Y,P,T,Z,GD)..
 976                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 977                      =l=
 978                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 979                          ;
 980   
 981  qrunsmin(Y,P,T,Z,RU,GD)..
 982                                          res_g_ns(Y,P,T,Z,RU,GD)
 983                                          =g=
 984                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
 985                                                  ;
 986   
 987  qrunsmax(Y,P,T,Z,RU,GD)..
 988                                          res_g_ns(Y,P,T,Z,RU,GD)
 989                                          =l=
 990                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
 991                                                  ;
 992   
 993  qrdsdmin(Y,P,T,Z,RD,GD)..
 994                                          res_g_sd(Y,P,T,Z,RD,GD)
 995                                          =g=
 996                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
 997                                                  ;
 998   
 999  qrdsdmax(Y,P,T,Z,RD,GD)..
1000                                          res_g_sd(Y,P,T,Z,RD,GD)
1001                                          =l=
1002                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1003                                                  ;
1004   
1005  #-------Intermittent renewable generation technologies-------------------------#
1006   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1007  #--Reserve allocation--#
1008   
1009  qresgru(Y,P,T,Z,RU,GRI)..
1010                                          res_g(Y,P,T,Z,RU,GRI)
1011                                          =e=
1012                                                  0
1013                                                  ;
1014   
1015  #--Output and curtailment constraint--#
1016   
1017  qgenr(Y,P,T,Z,GRI)..
1018                      gen(Y,P,T,Z,GRI)
1019                      + curt(Y,P,T,Z,GRI)
1020                      + curt_dummy(Y,P,T,Z,GRI)
1021                      =e=
1022                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1023                          ;
1024   
1025  #--Reserve allocation constraints--#
1026   
1027  qresgrdr(Y,P,T,Z,GRI)..
1028                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1029                                          =l=
1030                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1031                                                  ;
1032   
1033  qresgrdg(Y,P,T,Z,GRI)..
1034                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1035                                          =l=
1036                                                  gen(Y,P,T,Z,GRI)
1037                                                  ;
1038   
1039  #-----########################-------------------------------------------------#
1040  #-----# Storage technologies #-------------------------------------------------#
1041  #-----########################-------------------------------------------------#
1042   
1043  #-------General constraints----------------------------------------------------#
1044   
1045  #--Reserve allocation--#
1046   
1047  qress(Y,P,T,Z,R,S)..
1048                                          res_s(Y,P,T,Z,R,S)
1049                                          =e=
1050                                                  res_s_c(Y,P,T,Z,R,S)
1051                                                  + res_s_d(Y,P,T,Z,R,S)
1052                                                  ;
1053   
1054  #--Installed capacities--#
1055   
1056  qspotcapmin(Y,C,S)..
1057                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1058                                          =g=
1059                                                  S_DATA(S,'CAP_MIN')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1060                                                  ;
1061   
1062  qspotcapmax(Y,C,S)..
1063                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1064                                          =l=
1065                                                  S_DATA(S,'CAP_MAX')
1066                                                  ;
1067   
1068  #-------Short- and mid-term storage--------------------------------------------#
1069   
1070  #--Energy constraints--#
1071   
1072  qe(Y,P,Z,SSM)..
1073                                          e(Y,P++1,Z,SSM)
1074                                          =e=
1075                                                  e(Y,P,Z,SSM)
1076                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1077                                                  ;
1078   
1079  qemax(Y,P,Z,SSM)..
1080                                          e(Y,P,Z,SSM)
1081                                          =l=
1082                                                  e_cap(Y,Z,SSM)
1083                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1084                                                  ;
1085   
1086  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1087                                          e_f(Y,P,T,Z,SSM)
1088                                          =e=
1089                                                  e(Y,P,Z,SSM)
1090                                                  ;
1091   
1092  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1093                                          e_f(Y,P,T+1,Z,SSM)
1094                                          =e=
1095                                                  e_f(Y,P,T,Z,SSM)
1096                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1097                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1098                                                  ;
1099   
1100  qefmin(Y,P,T,Z,SSM)..
1101                                          e_f(Y,P,T,Z,SSM)
1102                                          =g=
1103                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1104                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1105                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1106                                                  ;
1107  qefmax(Y,P,T,Z,SSM)..
1108                                          e_f(Y,P,T,Z,SSM)
1109                                          =l=
1110                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1111                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1112                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1113                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1114                                                  ;
1115   
1116  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1117                                          e_l(Y,P,T,Z,SSM)
1118                                          =e=
1119                                                  e(Y,P,Z,SSM)
1120                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1121                                                  ;
1122   
1123  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1124                                          e_l(Y,P,T+1,Z,SSM)
1125                                          =e=
1126                                                  e_l(Y,P,T,Z,SSM)
1127                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1128                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1129                                                  ;
1130   
1131  qelmin(Y,P,T,Z,SSM)..
1132                                          e_l(Y,P,T,Z,SSM)
1133                                          =g=
1134                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1135                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1136                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1137                                                  ;
1138  qelmax(Y,P,T,Z,SSM)..
1139                                          e_l(Y,P,T,Z,SSM)
1140                                          =l=
1141                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1142                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1143                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1144                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1145                                                  ;
1146   
1147  #--Duration limits--#
1148   
1149  qdurmin(Y,Z,SSM)..
1150                                          e_cap(Y,Z,SSM)
1151                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1152                                          =g=
1153                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1154                                                  ;
1155   
1156  qdurmax(Y,Z,SSM)..
1157                                          e_cap(Y,Z,SSM)
1158                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1159                                          =l=
1160                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1161                                                  ;
1162   
1163  #-------Short-term storage-----------------------------------------------------#
1164   
1165  #--Charging constraints--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1166   
1167  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1168                                          p_c(Y,P,T+1,Z,SS)
1169                                          =e=
1170                                                  p_c(Y,P,T,Z,SS)
1171                                                  + ramp_c_up(Y,P,T,Z,SS)
1172                          - ramp_c_dn(Y,P,T,Z,SS)
1173                          ;
1174   
1175  qsscru(Y,P,T,Z,SS)..
1176                      ramp_c_up(Y,P,T,Z,SS)
1177                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1178                      =l=
1179                          p_cap_c(Y,Z,SS)
1180                          - p_c(Y,P,T,Z,SS)
1181                          ;
1182   
1183  qsscrd(Y,P,T,Z,SS)..
1184                      ramp_c_dn(Y,P,T,Z,SS)
1185                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1186                      =l=
1187                          p_c(Y,P,T,Z,SS)
1188                          ;
1189   
1190  #--Discharging constraints--#
1191   
1192  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1193                          p_d(Y,P,T+1,Z,SS)
1194                          =e=
1195                                  p_d(Y,P,T,Z,SS)
1196                                  + ramp_d_up(Y,P,T,Z,SS)
1197                          - ramp_d_dn(Y,P,T,Z,SS)
1198                          ;
1199   
1200  qssdru(Y,P,T,Z,SS)..
1201                      ramp_d_up(Y,P,T,Z,SS)
1202                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1203                      =l=
1204                          p_cap_c(Y,Z,SS)
1205                          - p_d(Y,P,T,Z,SS)
1206                          ;
1207   
1208  qssdrd(Y,P,T,Z,SS)..
1209                      ramp_d_dn(Y,P,T,Z,SS)
1210                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1211                      =l=
1212                          p_d(Y,P,T,Z,SS)
1213                          ;
1214   
1215  #-------Mid and long-term storage----------------------------------------------#
1216   
1217  #--Reserve allocation--#
1218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1219  qresscu(Y,P,T,Z,RU,SML)..
1220                                          res_s_c(Y,P,T,Z,RU,SML)
1221                                          =e=
1222                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1223                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1224                                                  ;
1225   
1226  qresscd(Y,P,T,Z,RD,SML)..
1227                                          res_s_c(Y,P,T,Z,RD,SML)
1228                                          =e=
1229                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1230                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1231                                                  ;
1232   
1233  qressdu(Y,P,T,Z,RU,SM)..
1234                                          res_s_d(Y,P,T,Z,RU,SM)
1235                                          =e=
1236                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1237                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1238                                                  ;
1239   
1240  qressdd(Y,P,T,Z,RD,SM)..
1241                                          res_s_d(Y,P,T,Z,RD,SM)
1242                                          =e=
1243                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1244                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1245                                                  ;
1246   
1247  #--Charging logical constraints--#
1248   
1249  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1250                                          n_c(Y,P,T+1,Z,SML)
1251                                          =e=
1252                                                  n_c(Y,P,T,Z,SML)
1253                                                  + n_c_su(Y,P,T,Z,SML)
1254                                                  - n_c_sd(Y,P,T,Z,SML)
1255                                                  ;
1256   
1257  qncmax(Y,P,T,Z,SML)..
1258                                          n_c(Y,P,T,Z,SML)
1259                                          =l=
1260                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1261                                                  ;
1262   
1263  qncsu(Y,P,T,Z,SML)..
1264                                          n_c_su(Y,P,T,Z,SML)
1265                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1266                                          =l=
1267                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1268                                                  - n_c(Y,P,T,Z,SML)
1269                                                  ;
1270   
1271  qncsd(Y,P,T,Z,SML)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1272                                          n_c_sd(Y,P,T,Z,SML)
1273                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1274                                          =l=
1275                                                  n_c(Y,P,T,Z,SML)
1276                                                  ;
1277   
1278  #--Charging constraints--#
1279   
1280  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1281                      p_c(Y,P,T+1,Z,SML)
1282                      =e=
1283                          p_c(Y,P,T,Z,SML)
1284                          + ramp_c_up(Y,P,T,Z,SML)
1285                          - ramp_c_dn(Y,P,T,Z,SML)
1286                          + ramp_c_su(Y,P,T,Z,SML)
1287                          - ramp_c_sd(Y,P,T,Z,SML)
1288                          ;
1289   
1290  qsmlcmin(Y,P,T,Z,SML)..
1291                                          p_c(Y,P,T,Z,SML)
1292                                          =g=
1293                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1294                                                  ;
1295   
1296  qsmlcmax(Y,P,T,Z,SML)..
1297                                          p_c(Y,P,T,Z,SML)
1298                                          =l=
1299                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1300                                                  ;
1301   
1302  #--Charging ramping constraints--#
1303   
1304  qcrudyn(Y,P,T,Z,SML)..
1305                      ramp_c_up(Y,P,T,Z,SML)
1306                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1307                      =l=
1308                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1309                          ;
1310   
1311  qcrucap(Y,P,T,Z,SML)..
1312                      ramp_c_up(Y,P,T,Z,SML)
1313                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1314                      =l=
1315                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1316                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1317                          ;
1318   
1319  qcrddyn(Y,P,T,Z,SML)..
1320                      ramp_c_dn(Y,P,T,Z,SML)
1321                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1322                      =l=
1323                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1324                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1325   
1326  qcrdcap(Y,P,T,Z,SML)..
1327                      ramp_c_dn(Y,P,T,Z,SML)
1328                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1329                      =l=
1330                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1331                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1332                          ;
1333   
1334  qcsumin(Y,P,T,Z,SML)..
1335                                          ramp_c_su(Y,P,T,Z,SML)
1336                                          =g=
1337                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1338                                                  ;
1339   
1340  qcsumax(Y,P,T,Z,SML)..
1341                                          ramp_c_su(Y,P,T,Z,SML)
1342                                          =l=
1343                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1344                                                  ;
1345   
1346  qcsdmin(Y,P,T,Z,SML)..
1347                                          ramp_c_sd(Y,P,T,Z,SML)
1348                                          =g=
1349                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1350                                                  ;
1351   
1352  qcsdmax(Y,P,T,Z,SML)..
1353                                          ramp_c_sd(Y,P,T,Z,SML)
1354                                          =l=
1355                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1356                                                  ;
1357   
1358  #--Reserve allocation constraints--#
1359   
1360  qcruad(Y,P,T,Z,SML)..
1361                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1362                      =l=
1363                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1364                          ;
1365   
1366  qcrumd(Y,P,T,Z,SML)..
1367                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1368                      =l=
1369                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1370                          ;
1371   
1372  qcrdfu(Y,P,T,Z,SML)..
1373                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1374                      =l=
1375                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1376                          ;
1377   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1378  qcrdau(Y,P,T,Z,SML)..
1379                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1380                      =l=
1381                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1382                          ;
1383   
1384  qcrdmus(Y,P,T,Z,SML)..
1385                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1386                      =l=
1387                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1388                          ;
1389   
1390  qcrunsmin(Y,P,T,Z,RD,SML)..
1391                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1392                                          =g=
1393                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1394                                                  ;
1395   
1396  qcrunsmax(Y,P,T,Z,RD,SML)..
1397                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1398                                          =l=
1399                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1400                                                  ;
1401   
1402  qcrdsdmin(Y,P,T,Z,RU,SML)..
1403                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1404                                          =g=
1405                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1406                                                  ;
1407   
1408  qcrdsdmax(Y,P,T,Z,RU,SML)..
1409                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1410                                          =l=
1411                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1412                                                  ;
1413   
1414  #-------Mid-term storage-------------------------------------------------------#
1415   
1416  qcapdeqcapc(Y,Z,SM)..
1417                                          p_cap_d(Y,Z,SM)
1418                                          =e=
1419                                                  p_cap_c(Y,Z,SM)
1420                                                  ;
1421   
1422  #--Discharging logical constraints--#
1423   
1424  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1425                                          n_d(Y,P,T+1,Z,SM)
1426                                          =e=
1427                                                  n_d(Y,P,T,Z,SM)
1428                                                  + n_d_su(Y,P,T,Z,SM)
1429                                                  - n_d_sd(Y,P,T,Z,SM)
1430                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1431   
1432  qndmax(Y,P,T,Z,SM)..
1433                                          n_d(Y,P,T,Z,SM)
1434                                          =l=
1435                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1436                                                  ;
1437   
1438  qndsu(Y,P,T,Z,SM)..
1439                                          n_d_su(Y,P,T,Z,SM)
1440                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1441                                          =l=
1442                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1443                                                  - n_d(Y,P,T,Z,SM)
1444                                                  ;
1445   
1446  qndsd(Y,P,T,Z,SM)..
1447                                          n_d_sd(Y,P,T,Z,SM)
1448                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1449                                          =l=
1450                                                  n_d(Y,P,T,Z,SM)
1451                                                  ;
1452   
1453  #--Discharging constraints--#
1454   
1455  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1456                      p_d(Y,P,T+1,Z,SM)
1457                      =e=
1458                          p_d(Y,P,T,Z,SM)
1459                          + ramp_d_up(Y,P,T,Z,SM)
1460                          - ramp_d_dn(Y,P,T,Z,SM)
1461                          + ramp_d_su(Y,P,T,Z,SM)
1462                          - ramp_d_sd(Y,P,T,Z,SM)
1463                          ;
1464   
1465  qsmdmin(Y,P,T,Z,SM)..
1466                                          p_d(Y,P,T,Z,SM)
1467                                          =g=
1468                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1469                                                  ;
1470   
1471  qsmdmax(Y,P,T,Z,SM)..
1472                                          p_d(Y,P,T,Z,SM)
1473                                          =l=
1474                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1475                                                  ;
1476   
1477  #--Discharging ramping constraints--#
1478   
1479  qdrudyn(Y,P,T,Z,SM)..
1480                      ramp_d_up(Y,P,T,Z,SM)
1481                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1482                      =l=
1483                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1484                          ;
1485   
1486  qdrucap(Y,P,T,Z,SM)..
1487                      ramp_d_up(Y,P,T,Z,SM)
1488                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1489                      =l=
1490                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1491                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1492                          ;
1493   
1494  qdrddyn(Y,P,T,Z,SM)..
1495                      ramp_d_dn(Y,P,T,Z,SM)
1496                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1497                      =l=
1498                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1499                          ;
1500   
1501  qdrdcap(Y,P,T,Z,SM)..
1502                      ramp_d_dn(Y,P,T,Z,SM)
1503                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1504                      =l=
1505                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1506                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1507                          ;
1508   
1509  qdsumin(Y,P,T,Z,SM)..
1510                                          ramp_d_su(Y,P,T,Z,SM)
1511                                          =g=
1512                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1513                                                  ;
1514   
1515  qdsumax(Y,P,T,Z,SM)..
1516                                          ramp_d_su(Y,P,T,Z,SM)
1517                                          =l=
1518                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1519                                                  ;
1520   
1521  qdsdmin(Y,P,T,Z,SM)..
1522                                          ramp_d_sd(Y,P,T,Z,SM)
1523                                          =g=
1524                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1525                                                  ;
1526   
1527  qdsdmax(Y,P,T,Z,SM)..
1528                                          ramp_d_sd(Y,P,T,Z,SM)
1529                                          =l=
1530                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1531                                                  ;
1532   
1533  #--Reserve allocation constraints--#
1534   
1535  qdrufu(Y,P,T,Z,SM)..
1536                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1537                      =l=
1538                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1539                          ;
1540   
1541  qdruau(Y,P,T,Z,SM)..
1542                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1543                      =l=
1544                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1545                          ;
1546   
1547  qdrumus(Y,P,T,Z,SM)..
1548                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1549                      =l=
1550                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1551                          ;
1552   
1553  qdrdad(Y,P,T,Z,SM)..
1554                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1555                      =l=
1556                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1557                          ;
1558   
1559  qdrdmd(Y,P,T,Z,SM)..
1560                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1561                      =l=
1562                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1563                          ;
1564   
1565  qdrunsmin(Y,P,T,Z,RU,SM)..
1566                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1567                                          =g=
1568                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1569                                                  ;
1570   
1571  qdrunsmax(Y,P,T,Z,RU,SM)..
1572                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1573                                          =l=
1574                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1575                                                  ;
1576   
1577  qdrdsdmin(Y,P,T,Z,RD,SM)..
1578                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1579                                          =g=
1580                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1581                                                  ;
1582   
1583  qdrdsdmax(Y,P,T,Z,RD,SM)..
1584                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1585                                          =l=
1586                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1587                                                  ;
1588   
1589  #-------Long-term storage------------------------------------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1590   
1591  #--Discharging reserve allocation--#
1592   
1593  qslressd(Y,P,T,Z,R,SL)..
1594                                          res_s_d(Y,P,T,Z,R,SL)
1595                                          =e=
1596                                                  0
1597                                                  ;
1598   
1599  #--Gas energy balance--#
1600   
1601  qgase(Y,P,C)..
1602                                          eg(Y,P++1,C)
1603                                          =e=
1604                                                  eg(Y,P,C)
1605                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1606                                                  ;
1607   
1608  qgasemax(Y,P,C)..
1609                                          eg(Y,P,C)
1610                                          =l=
1611                                                  E_LP
1612                                                  + eg_cap
1613                                                  ;
1614   
1615  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1616                                          eg_f(Y,P,T+1,C)
1617                                          =e=
1618                                                  eg_f(Y,P,T,C)
1619                                                  + pg_c(Y,P,T,C)
1620                                                  - pg_d(Y,P,T,C)
1621                                                  ;
1622   
1623  qgasefmax(Y,P,T,C)..
1624                                          eg_f(Y,P,T,C)
1625                                          =l=
1626                                                  E_LP
1627                                                  + eg_cap
1628                                                  ;
1629   
1630  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1631                                          eg_f(Y,P,T,C)
1632                                          =e=
1633                                                  eg(Y,P,C)
1634                                                  ;
1635   
1636  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1637                                          eg_l(Y,P,T+1,C)
1638                                          =e=
1639                                                  eg_l(Y,P,T,C)
1640                                                  + pg_c(Y,P,T,C)
1641                                                  - pg_d(Y,P,T,C)
1642                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1643   
1644  qgaselmax(Y,P,T,C)..
1645                                          eg_l(Y,P,T,C)
1646                                          =l=
1647                                                  E_LP
1648                                                  + eg_cap
1649                                                  ;
1650   
1651  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1652                                          eg_l(Y,P,T,C)
1653                                          =e=
1654                                                  eg(Y,P,C)
1655                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1656                                                  ;
1657   
1658  #--Gas charging constraints--#
1659   
1660  qgasc(Y,P,T,C)..
1661                                          pg_c(Y,P,T,C)
1662                                          =e=
1663                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1664                                                  + pg_import(Y,P,T,C)
1665                                                  ;
1666   
1667  #--Gas discharging constraints--#
1668   
1669  qgasd(Y,P,T,C)..
1670                                          pg_d(Y,P,T,C)
1671                                          =e=
1672                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1673                                                  ;
1674   
1675  #--Gas usage--#
1676   
1677  qgasuse(Y,C)..
1678                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1679                                          =l=
1680                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1681                                                  ;
1682   
1683  qgasusegen(Y,P,T,Z,GCG)..
1684                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1685                                          =e=
1686                                                  pg_syn(Y,P,T,Z,GCG)
1687                                                  + pg_fos(Y,P,T,Z,GCG)
1688                                                  ;
1689   
1690  ################################################
1691  ################################################
1692   
1693  demand(P,T,Z)..
1694                                          demand_unit(P,T,Z) =e= DEM_T(P,T,Z) + sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)*(price_unit(P,H,Z)-P_REF))
1695                                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1696   
1697  demand_clone(P,H,Z)..
1698                                          demand_unit_clone(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*DIAG(T,H))
1699                                          ;
1700   
1701  totdemand(P,Z)..
1702                                          sum(T,DEM_T(P,T,Z)) =e= sum(T,demand_unit(P,T,Z))
1703                                          ;
1704   
1705  totdemand2(P,Z)..
1706  #                                       demand_tot(P,Z) =e= sum(T,demand_unit(P,T,Z))
1707                                          demand_tot(P,Z) =e= sum(T,DEM_T(P,T,Z))
1708                                          ;
1709   
1710  #price(P,H,Z)..
1711  #                                       (price_unit(P,H,Z) - P_REF)*sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)) =e= (demand_unit(P,T,Z)-DEM_T(P,T,Z))
1712  #                                       ;
1713   
1714  price_clone(P,T,Z)..
1715                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1716                                          ;
1717   
1718  refdemand(P,T,Z)..
1719                                          demand_ref(P,T,Z) =e= DEM_T(P,T,Z)
1720                                          ;
1721   
1722  shiftedaway(P,H,Z)..
1723                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST(T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1724                                          ;
1725   
1726  shiftedforward(P,H,Z)..
1727                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST(T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1728                                          ;
1729   
1730  shiftedbackward(P,H,Z)..
1731                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST(T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1732                                          ;
1733   
1734  shiftconstraint(P,H,Z)..
1735                                          sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1736                                          ;
1737   
1738  shiftconstraint1(P,H,Z)..
1739                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1740                                          ;
1741   
1742  shiftconstraint2(P,H,Z)..
1743                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
1744                                          ;
1745   
1746  priceconstraint1(P,T,Z)..
1747                                          price_unit_clone(P,T,Z) =l= P_REF + LIMITPRICE
1748                                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1749   
1750  priceconstraint2(P,T,Z)..
1751                                          price_unit_clone(P,T,Z) =g= P_REF - LIMITPRICE
1752                                          ;
1753   
1754  demlimitunder(P,T,Z)..
1755                                          DEM_T(P,T,Z) - LIMITDEM =l= demand_unit(P,T,Z)
1756                                          ;
1757   
1758  demlimitupper(P,T,Z)..
1759                                          DEM_T(P,T,Z) + LIMITDEM =g= demand_unit(P,T,Z)
1760                                          ;
1761   
1762   
1763  #priceconstraint3(P,Z)..
1764  #                                       sum(T,price_unit(P,T,Z))/card(T) =e= P_REF
1765  #                                       ;
1766   
1767   
1768  qinnerframe(P,H,Z)..
1769                                          innerframe(P,H,Z) =e= sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T))
1770                                          ;
1771   
1772  qouterframe(P,H,Z)..
1773                                          outerframe(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1774                                          ;
1775   
1776  fixedcost(Z)..
1777                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1778                                          ;
1779   
1780  variablecost(P,Z)..
1781                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1782                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1783                                          ;
1784   
1785  cost(Z)..
1786                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
1787                                          ;
1788   
1789   
1790  MODEL GOA GOA model /
1791   
1792  #-------Objective function-----------------------------------------------------#
1793                  qobj
1794   
1795  #-------System constraints-----------------------------------------------------#
1796                  qbalance
1797   
1798                  qresprod
1799                  qco2lim
1800   
1801                  qresendomin
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1802                  qresendomax
1803                  qres
1804   
1805                  #qgendisp
1806                  #qgendisppeak
1807   
1808                  qco2
1809                  qlcg
1810   
1811  #-------Generation technologies------------------------------------------------#
1812                  qpotcapmin
1813  #               qpotcapmax
1814  #               qpotgenmin
1815  #               qpotgenmax
1816   
1817  #--Conventional generation technologies--#
1818                  qresgcu
1819                  qresgcd
1820   
1821                  qn
1822                  qnmax
1823                  qnsu
1824                  qnsd
1825   
1826                  qgen
1827                  qgenmin
1828                  qgenmax
1829   
1830                  qrudyn
1831                  qrucap
1832                  qrddyn
1833                  qrdcap
1834                  qsumin
1835                  qsumax
1836                  qsdmin
1837                  qsdmax
1838   
1839                  qrufu
1840                  qruau
1841                  qrumus
1842                  qrdad
1843                  qrdmd
1844                  qrunsmin
1845                  qrunsmax
1846                  qrdsdmin
1847                  qrdsdmax
1848   
1849  #--Intermittent renewable generation technologies--#
1850                  qresgru
1851   
1852                  qgenr
1853   
1854                  qresgrdr
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1855                  qresgrdg
1856   
1857  #-------Storage technologies---------------------------------------------------#
1858  #--General constraints--#
1859                  qress
1860                  qspotcapmin
1861                  qspotcapmax
1862   
1863                  qe
1864                  qemax
1865                  qef
1866                  qefmin
1867                  qefmax
1868                  qefstart
1869                  qel
1870                  qelmin
1871                  qelmax
1872                  qelstart
1873   
1874                  qdurmin
1875                  qdurmax
1876   
1877  #--Short-term storage--#
1878                  qssc
1879                  qsscru
1880                  qsscrd
1881   
1882                  qssd
1883                  qssdru
1884                  qssdrd
1885   
1886  #--Mid and long-term storage--#
1887                  qresscu
1888                  qresscd
1889                  qressdu
1890                  qressdd
1891   
1892                  qnc
1893                  qncmax
1894                  qncsu
1895                  qncsd
1896   
1897                  qsmlc
1898                  qsmlcmin
1899                  qsmlcmax
1900   
1901                  qcrudyn
1902                  qcrucap
1903                  qcrddyn
1904                  qcrdcap
1905                  qcsumin
1906                  qcsumax
1907                  qcsdmin
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1908                  qcsdmax
1909   
1910                  qcruad
1911                  qcrumd
1912                  qcrdfu
1913                  qcrdau
1914                  qcrdmus
1915                  qcrunsmin
1916                  qcrunsmax
1917                  qcrdsdmin
1918                  qcrdsdmax
1919   
1920  #--Mid-term storage--#
1921                  qcapdeqcapc
1922   
1923                  qnd
1924                  qndmax
1925                  qndsu
1926                  qndsd
1927   
1928                  qsmd
1929                  qsmdmin
1930                  qsmdmax
1931   
1932                  qdrudyn
1933                  qdrucap
1934                  qdrddyn
1935                  qdrdcap
1936                  qdsumin
1937                  qdsumax
1938                  qdsdmin
1939                  qdsdmax
1940   
1941                  qdrufu
1942                  qdruau
1943                  qdrumus
1944                  qdrdad
1945                  qdrdmd
1946                  qdrunsmin
1947                  qdrunsmax
1948                  qdrdsdmin
1949                  qdrdsdmax
1950   
1951  #--Long-term storage--#
1952                  qslressd
1953   
1954                  qgase
1955                  qgasemax
1956                  qgasef
1957                  qgasefmax
1958                  qgasefstart
1959                  qgasel
1960                  qgaselmax
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1961                  qgaselstart
1962   
1963                  qgasc
1964   
1965                  qgasd
1966   
1967                  qgasuse
1968                  qgasusegen
1969   
1970  #-- Price-elasticity--#
1971   
1972  #               price
1973                  price_clone
1974                  demand
1975                  demand_clone
1976                  totdemand
1977                  totdemand2
1978                  refdemand
1979   
1980                  shiftedaway
1981                  shiftedforward
1982                  shiftedbackward
1983   
1984                  priceconstraint1
1985                  priceconstraint2
1986  #               priceconstraint3
1987                  shiftconstraint
1988                  shiftconstraint1
1989                  shiftconstraint2
1990   
1991  #               qinnerframe
1992  #               qouterframe
1993   
1994  #               revenue
1995                  fixedcost
1996                  variablecost
1997                  cost
1998   
1999                  demlimitunder
2000                  demlimitupper
2001  /;
2002   
2003   
2004   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 40
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/LinearModel_Wout.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.032 SECONDS      4 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 10:00:17 Page 41
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/LinearModel_Wout.gms
Output     C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\../gams/LinearModel_Wout.lst
Save       C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
