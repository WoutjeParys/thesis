GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(T,H)                              Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  COMPENSATE(P,H)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_NEW(P,T,H)        the new calculated elasticity matrix, taking into account the compensation factor
 337  ;
 338   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  G_DATA = 39:G_DATA
 339  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 340  $LOAD S_DATA
--- LOAD  RG = 41:RG
 341  $LOAD RG
--- LOAD  RSC = 42:RSC
 342  $LOAD RSC
--- LOAD  RSD = 43:RSD
 343  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 344  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 345  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 346  $LOAD REL_T
--- LOAD  W = 48:W
 347  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 348  $LOAD POL_TARGETS
 349  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 350  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 351  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 352  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 353  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 354  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 355  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 356  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 58:SHIFTMAX
 357  $LOAD SHIFTMAX
--- LOAD  COMPENSATE = 59:COMPENSATE
 358  $LOAD COMPENSATE
 359   
 360  #C_GAS = 25.6643460843943;
 361  C_GAS = 25.6643460843943*2;
 362  T_MARKET = 1;
 363  EGCAPEX = 2000000000000000000000000;
 364  E_LP = 7100000;
 365  P_REF = 55.5;
 366  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 367  LIMITPRICE = P_REF*0.9;
 368  LIMITDEM = 750;
 369  LIMITSHIFT = 2000;
 370  LENGTH_P = card(T);
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 21:43:28 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 371  ELAST_NEW(P,T,H) = ELAST(T,H)*DIAG(T,H)+COMPENSATE(P,H)*(TRI_LOW(T,H)*ELAST(T,H)+TRI_UP(T,H)*ELAST(T,H));
 372  #ELAST_NEW(P,T,H) = ELAST(T,H)*1;
 373   
 374  eff_factor_earlier = 0.0;
 375  eff_factor_later = 0.0;
 376   
 377  VARIABLES
 378  obj                     Value of objective function
 379   
 380  #######################################################
 381   
 382  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 383  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 384  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 385  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 386  shiftaway(P,H,Z)                                Shift away from an hour
 387  shiftaway_total(P,Z)                    Shift away from a period
 388   
 389  front_up(P,H,Z)
 390  front_down(P,H,Z)
 391  back_up(P,H,Z)
 392  back_down(P,H,Z)
 393  shift_down(P,H,Z)
 394  shift_up(P,H,Z)
 395  ;
 396   
 397  POSITIVE VARIABLES
 398  #######################################################
 399   
 400  price_unit(P,H,Z)                               Price of the electricity
 401  price_unit_clone(P,T,Z)
 402  demand_unit(P,T,Z)                              demand of the electricity
 403  demand_unit_clone(P,H,Z)
 404  demand_tot(P,Z)                                 total demand, based on demand_unit
 405  surplus(P,T,Z)
 406  demand_ref(P,T,Z)                               the reference demand with flat price
 407  innerframe(P,H,Z)
 408  outerframe(P,H,Z)
 409   
 410  totalrevenue(P,Z)                               the product of demand and price
 411  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 412  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 413  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 414   
 415  #######################################################
 416   
 417  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 418  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 419  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 420  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 421  eg_cap                                          Gas storage capacity
 422   
 423  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 424  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 425   
 426  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 427  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 428  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 429  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 430  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 431  eg(Y,P,C)                                       Energy content of gas storage at period P
 432  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 433  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 434  pg_c(Y,P,T,C)                           Charging of gas storage
 435  pg_d(Y,P,T,C)                           Discharging of gas storage
 436   
 437  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 438  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 439   
 440  load_shedding(Y,P,T,Z)          Load shedding
 441  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 442  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 443  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 444   
 445  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 446  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 447  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 448   
 449  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 450  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 451  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 452  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 453  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 454   
 455  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 456  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 457  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 458  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 459   
 460  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 461   
 462  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 463  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 464  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 465  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 466  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 467  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 468  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 469  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 470   
 471  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 472  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 473  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 474  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 475  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 476   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 477  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 478  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 479  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 480  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 481   
 482  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 483  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 484  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 485  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 486  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 487   
 488  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 489  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 490  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 491  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 492   
 493  pg_import(Y,P,T,C)                      Import of gas
 494  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 495  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 496   
 497  ;
 498   
 499  EQUATIONS
 500  #--Objective function--#
 501  qobj
 502   
 503  #--System constraints--#
 504  qbalance(Y,P,T,Z)
 505  qresprod(Y,C)
 506  qco2lim(Y,C)
 507  qresendomin(Y,P,T,C,R,GRI)
 508  qresendomax(Y,P,T,C,R,GRI)
 509  qres(Y,P,T,C,R)
 510  qgendisp(Y,P,T,C)
 511  qgendisppeak(Y,C)
 512  qco2(Y,C,G)
 513  qlcg(Y,C,G)
 514   
 515  #--Generation technologies--#
 516  qpotcapmin(Y,C,G)
 517  #qpotcapmax(Y,C,G)
 518  #qpotgenmin(Y,C,G)
 519  #qpotgenmax(Y,C,G)
 520   
 521  qresgcu(Y,P,T,Z,RU,GD)
 522  qresgcd(Y,P,T,Z,RD,GD)
 523  qn(Y,P,T,Z,GD)
 524  qnmax(Y,P,T,Z,GD)
 525  qnsu(Y,P,T,Z,GD)
 526  qnsd(Y,P,T,Z,GD)
 527  qgen(Y,P,T,Z,GD)
 528  qgenmin(Y,P,T,Z,GD)
 529  qgenmax(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 530  qrudyn(Y,P,T,Z,GD)
 531  qrucap(Y,P,T,Z,GD)
 532  qrddyn(Y,P,T,Z,GD)
 533  qrdcap(Y,P,T,Z,GD)
 534  qsumin(Y,P,T,Z,GD)
 535  qsumax(Y,P,T,Z,GD)
 536  qsdmin(Y,P,T,Z,GD)
 537  qsdmax(Y,P,T,Z,GD)
 538  qrufu(Y,P,T,Z,GD)
 539  qruau(Y,P,T,Z,GD)
 540  qrumus(Y,P,T,Z,GD)
 541  qrdad(Y,P,T,Z,GD)
 542  qrdmd(Y,P,T,Z,GD)
 543  qrunsmin(Y,P,T,Z,RU,GD)
 544  qrunsmax(Y,P,T,Z,RU,GD)
 545  qrdsdmin(Y,P,T,Z,RD,GD)
 546  qrdsdmax(Y,P,T,Z,RD,GD)
 547   
 548  qresgru(Y,P,T,Z,RU,GRI)
 549  qgenr(Y,P,T,Z,GRI)
 550  qresgrdr(Y,P,T,Z,GRI)
 551  qresgrdg(Y,P,T,Z,GRI)
 552   
 553  #--Storage technologies--#
 554  qress(Y,P,T,Z,R,S)
 555  qspotcapmin(Y,C,S)
 556  qspotcapmax(Y,C,S)
 557   
 558  qe(Y,P,Z,S)
 559  qemax(Y,P,Z,S)
 560  qef(Y,P,T,Z,S)
 561  qefmin(Y,P,T,Z,S)
 562  qefmax(Y,P,T,Z,S)
 563  qefstart(Y,P,T,Z,S)
 564  qel(Y,P,T,Z,S)
 565  qelmin(Y,P,T,Z,S)
 566  qelmax(Y,P,T,Z,S)
 567  qelstart(Y,P,T,Z,S)
 568  qdurmin(Y,Z,S)
 569  qdurmax(Y,Z,S)
 570   
 571  qssc(Y,P,T,Z,SS)
 572  qsscru(Y,P,T,Z,SS)
 573  qsscrd(Y,P,T,Z,SS)
 574  qssd(Y,P,T,Z,SS)
 575  qssdru(Y,P,T,Z,SS)
 576  qssdrd(Y,P,T,Z,SS)
 577   
 578  qresscu(Y,P,T,Z,RU,SML)
 579  qresscd(Y,P,T,Z,RD,SML)
 580  qressdu(Y,P,T,Z,RU,SM)
 581  qressdd(Y,P,T,Z,RD,SM)
 582  qnc(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 583  qncmax(Y,P,T,Z,SML)
 584  qncsu(Y,P,T,Z,SML)
 585  qncsd(Y,P,T,Z,SML)
 586  qsmlc(Y,P,T,Z,SML)
 587  qsmlcmin(Y,P,T,Z,SML)
 588  qsmlcmax(Y,P,T,Z,SML)
 589  qcrudyn(Y,P,T,Z,SML)
 590  qcrucap(Y,P,T,Z,SML)
 591  qcrddyn(Y,P,T,Z,SML)
 592  qcrdcap(Y,P,T,Z,SML)
 593  qcsumin(Y,P,T,Z,SML)
 594  qcsumax(Y,P,T,Z,SML)
 595  qcsdmin(Y,P,T,Z,SML)
 596  qcsdmax(Y,P,T,Z,SML)
 597  qcruad(Y,P,T,Z,SML)
 598  qcrumd(Y,P,T,Z,SML)
 599  qcrdfu(Y,P,T,Z,SML)
 600  qcrdau(Y,P,T,Z,SML)
 601  qcrdmus(Y,P,T,Z,SML)
 602  qcrunsmin(Y,P,T,Z,RD,SML)
 603  qcrunsmax(Y,P,T,Z,RD,SML)
 604  qcrdsdmin(Y,P,T,Z,RU,SML)
 605  qcrdsdmax(Y,P,T,Z,RU,SML)
 606   
 607  qcapdeqcapc(Y,Z,SM)
 608  qnd(Y,P,T,Z,SM)
 609  qndmax(Y,P,T,Z,SM)
 610  qndsu(Y,P,T,Z,SM)
 611  qndsd(Y,P,T,Z,SM)
 612  qsmd(Y,P,T,Z,SM)
 613  qsmdmin(Y,P,T,Z,SM)
 614  qsmdmax(Y,P,T,Z,SM)
 615  qdrudyn(Y,P,T,Z,SM)
 616  qdrucap(Y,P,T,Z,SM)
 617  qdrddyn(Y,P,T,Z,SM)
 618  qdrdcap(Y,P,T,Z,SM)
 619  qdsumin(Y,P,T,Z,SM)
 620  qdsumax(Y,P,T,Z,SM)
 621  qdsdmin(Y,P,T,Z,SM)
 622  qdsdmax(Y,P,T,Z,SM)
 623  qdrufu(Y,P,T,Z,SM)
 624  qdruau(Y,P,T,Z,SM)
 625  qdrumus(Y,P,T,Z,SM)
 626  qdrdad(Y,P,T,Z,SM)
 627  qdrdmd(Y,P,T,Z,SM)
 628  qdrunsmin(Y,P,T,Z,RU,SM)
 629  qdrunsmax(Y,P,T,Z,RU,SM)
 630  qdrdsdmin(Y,P,T,Z,RD,SM)
 631  qdrdsdmax(Y,P,T,Z,RD,SM)
 632   
 633  qslressd(Y,P,T,Z,R,SL)
 634  qgase(Y,P,C)
 635  qgasemax(Y,P,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 636  qgasef(Y,P,T,C)
 637  qgasefmax(Y,P,T,C)
 638  qgasefstart(Y,P,T,C)
 639  qgasel(Y,P,T,C)
 640  qgaselmax(Y,P,T,C)
 641  qgaselstart(Y,P,T,C)
 642  qgasc(Y,P,T,C)
 643  qgasd(Y,P,T,C)
 644  qgasuse(Y,C)
 645  qgasusegen(Y,P,T,Z,GCG)
 646   
 647  ###############################
 648  #price(P,H,Z)
 649  price_clone(P,T,Z)
 650  demand(P,T,Z)
 651  demand_clone(P,H,Z)
 652  totdemand(P,Z)
 653  surplusdemand(P,T,Z)
 654  totdemand2(P,Z)
 655  refdemand(P,T,Z)
 656  refdemand2(Z)
 657  priceconstraint1(P,T,Z)
 658  priceconstraint2(P,T,Z)
 659  priceconstraint3(P,Z)
 660  shiftconstraint_frame_1(P,H,Z)
 661  shiftconstraint_frame_2(P,H,Z)
 662  shiftconstraint1(P,H,Z)
 663  shiftconstraint2(P,H,Z)
 664  shiftedforward(P,H,Z)
 665  shiftedforwardtotal(P,Z)
 666  shiftedbackward(P,H,Z)
 667  shiftedbackwardtotal(P,Z)
 668  shiftedaway(P,H,Z)
 669  shiftedawaytotal(P,Z)
 670   
 671  front_d_1(P,H,Z)
 672  front_d_2(P,H,Z)
 673  front_u_1(P,H,Z)
 674  front_u_2(P,H,Z)
 675   
 676  back_d_1(P,H,Z)
 677  back_d_2(P,H,Z)
 678  back_u_1(P,H,Z)
 679  back_u_2(P,H,Z)
 680   
 681  shift_d_1(P,H,Z)
 682  shift_d_2(P,H,Z)
 683  shift_u_1(P,H,Z)
 684  shift_u_2(P,H,Z)
 685   
 686  qinnerframe(P,H,Z)
 687  qouterframe(P,H,Z)
 688   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 689  revenue(P,Z)
 690  fixedcost(Z)
 691  variablecost(P,Z)
 692  cost(Z)
 693   
 694  demlimitunder(P,T,Z)
 695  demlimitupper(P,T,Z)
 696  ;
 697   
 698  #-----######################---------------------------------------------------#
 699  #-----# Objective function #---------------------------------------------------#
 700  #-----######################---------------------------------------------------#
 701  qobj..              obj
 702                                          =e=
 703                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 704                                                  #+ sum((Y,Z,S),      (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 705                                                  +
 706                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 707                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 708   
 709                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 710   
 711                                                  )
 712                                                  *(168/card(T));
 713                                                  ;
 714   
 715   
 716   
 717   
 718  #-----######################---------------------------------------------------#
 719  #-----# System constraints #---------------------------------------------------#
 720  #-----######################---------------------------------------------------#
 721   
 722  #--System balance--#
 723   
 724  # balance with demand response
 725  qbalance(Y,P,T,Z)..
 726                                  sum(G, gen(Y,P,T,Z,G))
 727                                  #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 728                                          =e=
 729                                                  demand_unit(P,T,Z)
 730  #                                               - load_shedding(Y,P,T,Z)
 731                                                  #+ sum(S, p_c(Y,P,T,Z,S))
 732                                                  ;
 733   
 734  #balance without demand response
 735  #qbalance(Y,P,T,Z)..
 736  #                               sum(G, gen(Y,P,T,Z,G))
 737  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 738  #                                       =e=
 739  #                                               DEM_T(P,T,Z)
 740  #                                       #       - load_shedding(Y,P,T,Z)
 741  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 742  #                                               ;
 743  #DEM(Y,Z)*DEM_T(T,Z);
 744   
 745  #--Renewable target--#
 746   
 747  #qresprod(Y,C)..
 748  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 749  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 750  #                                       =l=
 751  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 752  #                                               ;
 753   
 754  qresprod(Y,C)..
 755                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 756                                          =g=
 757                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 758                                                  ;
 759   
 760  qco2lim(Y,C)..
 761  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 762  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 763                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 764                                          =l=
 765                                                  50000000*0.4
 766                                                  ;
 767   
 768  #--Reserve requirements--#
 769   
 770  qresendomin(Y,P,T,C,R,GRI)..
 771                                          q_endo(Y,P,T,C,R,GRI)
 772                                          =g=
 773                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 774                                                  ;
 775   
 776  qresendomax(Y,P,T,C,R,GRI)..
 777                                          q_endo(Y,P,T,C,R,GRI)
 778                                          =l=
 779                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 780                                                  ;
 781   
 782   
 783  qres(Y,P,T,C,R)..
 784                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 785                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 786                                          =e=
 787                                                  R_EXO(C,R)
 788                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 789                                                  ;
 790   
 791  #--Dispatchable capacity--#
 792   
 793  qgendisp(Y,P,T,C)..
 794                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 795                                          =g=
 796                                                  sum(Z $ C_Z(C,Z), DEM_T(P,T,Z))*0.20
 797                                                  ;
 798   
 799  qgendisppeak(Y,C)..
 800                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 801                                          =g=
 802                                                  10000*1.20
 803                                                  ;
 804   
 805  #--Emissions--#
 806   
 807  qco2(Y,C,G)..
 808                                          co2(Y,C,G)
 809                                          =e=
 810                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 811                                                  ;
 812   
 813  qlcg(Y,C,G)..
 814                                          lcg(Y,C,G)
 815                                          =e=
 816                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 817                                                  ;
 818   
 819   
 820  #-----###########################----------------------------------------------#
 821  #-----# Generation technologies #----------------------------------------------#
 822  #-----###########################----------------------------------------------#
 823   
 824  ##--Installed generation capacities--#
 825   
 826  qpotcapmin(Y,C,G)..
 827                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 828                                          =g=
 829                                                  G_DATA(G,'CAP_MIN')
 830                                                  ;
 831   
 832  #qpotcapmax(Y,C,G)..
 833  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 834  #                                       =g=
 835  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 836  #                                               ;
 837  #
 838  #qpotgenmin(Y,C,G)..
 839  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 840  #                                       =g=
 841  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 842  #                                               ;
 843  #
 844  #qpotgenmax(Y,Z,G)..
 845  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 846  #                                       =g=
 847  #                                               CAP_G(Y,Z,G,'GEN_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 848  #                                               ;
 849   
 850  #-------Dispatchable generation technologies-----------------------------------#
 851   
 852  #--Reserve allocation--#
 853   
 854  qresgcu(Y,P,T,Z,RU,GD)..
 855                                          res_g(Y,P,T,Z,RU,GD)
 856                                          =e=
 857                                                  res_g_s(Y,P,T,Z,RU,GD)
 858                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 859                                                  ;
 860   
 861  qresgcd(Y,P,T,Z,RD,GD)..
 862                                          res_g(Y,P,T,Z,RD,GD)
 863                                          =e=
 864                                                  res_g_s(Y,P,T,Z,RD,GD)
 865                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 866                                                  ;
 867   
 868  #--Clustering logical constraints--#
 869   
 870  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 871                                          n(Y,P,T+1,Z,GD)
 872                                          =e=
 873                                                  n(Y,P,T,Z,GD)
 874                                                  + n_su(Y,P,T,Z,GD)
 875                                                  - n_sd(Y,P,T,Z,GD)
 876                                                  ;
 877   
 878  qnmax(Y,P,T,Z,GD)..
 879                                          n(Y,P,T,Z,GD)
 880                                          =l=
 881                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 882                                                  ;
 883   
 884  qnsu(Y,P,T,Z,GD)..
 885                                          n_su(Y,P,T,Z,GD)
 886                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 887                                          =l=
 888                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 889                                                  - n(Y,P,T,Z,GD)
 890                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 891                                                  ;
 892   
 893  qnsd(Y,P,T,Z,GD)..
 894                                          n_sd(Y,P,T,Z,GD)
 895                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 896                                          =l=
 897                                                  n(Y,P,T,Z,GD)
 898                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 899                                                  ;
 900   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 901  #--Generation constraints--#
 902   
 903  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 904                      gen(Y,P,T+1,Z,GD)
 905                      =e=
 906                          gen(Y,P,T,Z,GD)
 907                          + ramp_up(Y,P,T,Z,GD)
 908                          - ramp_dn(Y,P,T,Z,GD)
 909                          + ramp_su(Y,P,T,Z,GD)
 910                          - ramp_sd(Y,P,T,Z,GD)
 911                          ;
 912   
 913  qgenmin(Y,P,T,Z,GD)..
 914                                          gen(Y,P,T,Z,GD)
 915                                          =g=
 916                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 917                                                  ;
 918   
 919  qgenmax(Y,P,T,Z,GD)..
 920                                          gen(Y,P,T,Z,GD)
 921                                          =l=
 922                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 923                                                  ;
 924                                                  #*G_DATA(G,'PM')/100;
 925   
 926  #--Ramping constraints--#
 927   
 928  qrudyn(Y,P,T,Z,GD)..
 929                      ramp_up(Y,P,T,Z,GD)
 930                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 931                      =l=
 932                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 933                          ;
 934   
 935  qrucap(Y,P,T,Z,GD)..
 936                      ramp_up(Y,P,T,Z,GD)
 937                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 938                      =l=
 939                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
 940                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
 941                          ;
 942   
 943  qrddyn(Y,P,T,Z,GD)..
 944                      ramp_dn(Y,P,T,Z,GD)
 945                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 946                      =l=
 947                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 948                          ;
 949   
 950  qrdcap(Y,P,T,Z,GD)..
 951                      ramp_dn(Y,P,T,Z,GD)
 952                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 953                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 954                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
 955                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
 956                          ;
 957   
 958  qsumin(Y,P,T,Z,GD)..
 959                                          ramp_su(Y,P,T,Z,GD)
 960                                          =g=
 961                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 962                                                  ;
 963   
 964  qsumax(Y,P,T,Z,GD)..
 965                                          ramp_su(Y,P,T,Z,GD)
 966                                          =l=
 967                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 968                                                  ;
 969   
 970  qsdmin(Y,P,T,Z,GD)..
 971                                          ramp_sd(Y,P,T,Z,GD)
 972                                          =g=
 973                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 974                                                  ;
 975   
 976  qsdmax(Y,P,T,Z,GD)..
 977                                          ramp_sd(Y,P,T,Z,GD)
 978                                          =l=
 979                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 980                                                  ;
 981   
 982  #--Reserve allocation constraints--#
 983   
 984  qrufu(Y,P,T,Z,GD)..
 985                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
 986                      =l=
 987                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
 988                          ;
 989   
 990  qruau(Y,P,T,Z,GD)..
 991                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
 992                      =l=
 993                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 994                          ;
 995   
 996  qrumus(Y,P,T,Z,GD)..
 997                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 998                      =l=
 999                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1000                          ;
1001   
1002  qrdad(Y,P,T,Z,GD)..
1003                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
1004                      =l=
1005                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1006                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1007   
1008  qrdmd(Y,P,T,Z,GD)..
1009                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1010                      =l=
1011                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1012                          ;
1013   
1014  qrunsmin(Y,P,T,Z,RU,GD)..
1015                                          res_g_ns(Y,P,T,Z,RU,GD)
1016                                          =g=
1017                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
1018                                                  ;
1019   
1020  qrunsmax(Y,P,T,Z,RU,GD)..
1021                                          res_g_ns(Y,P,T,Z,RU,GD)
1022                                          =l=
1023                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
1024                                                  ;
1025   
1026  qrdsdmin(Y,P,T,Z,RD,GD)..
1027                                          res_g_sd(Y,P,T,Z,RD,GD)
1028                                          =g=
1029                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1030                                                  ;
1031   
1032  qrdsdmax(Y,P,T,Z,RD,GD)..
1033                                          res_g_sd(Y,P,T,Z,RD,GD)
1034                                          =l=
1035                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1036                                                  ;
1037   
1038  #-------Intermittent renewable generation technologies-------------------------#
1039   
1040  #--Reserve allocation--#
1041   
1042  qresgru(Y,P,T,Z,RU,GRI)..
1043                                          res_g(Y,P,T,Z,RU,GRI)
1044                                          =e=
1045                                                  0
1046                                                  ;
1047   
1048  #--Output and curtailment constraint--#
1049   
1050  qgenr(Y,P,T,Z,GRI)..
1051                      gen(Y,P,T,Z,GRI)
1052                      + curt(Y,P,T,Z,GRI)
1053                      + curt_dummy(Y,P,T,Z,GRI)
1054                      =e=
1055                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1056                          ;
1057   
1058  #--Reserve allocation constraints--#
1059   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1060  qresgrdr(Y,P,T,Z,GRI)..
1061                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1062                                          =l=
1063                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1064                                                  ;
1065   
1066  qresgrdg(Y,P,T,Z,GRI)..
1067                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1068                                          =l=
1069                                                  gen(Y,P,T,Z,GRI)
1070                                                  ;
1071   
1072  #-----########################-------------------------------------------------#
1073  #-----# Storage technologies #-------------------------------------------------#
1074  #-----########################-------------------------------------------------#
1075   
1076  #-------General constraints----------------------------------------------------#
1077   
1078  #--Reserve allocation--#
1079   
1080  qress(Y,P,T,Z,R,S)..
1081                                          res_s(Y,P,T,Z,R,S)
1082                                          =e=
1083                                                  res_s_c(Y,P,T,Z,R,S)
1084                                                  + res_s_d(Y,P,T,Z,R,S)
1085                                                  ;
1086   
1087  #--Installed capacities--#
1088   
1089  qspotcapmin(Y,C,S)..
1090                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1091                                          =g=
1092                                                  S_DATA(S,'CAP_MIN')
1093                                                  ;
1094   
1095  qspotcapmax(Y,C,S)..
1096                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1097                                          =l=
1098                                                  S_DATA(S,'CAP_MAX')
1099                                                  ;
1100   
1101  #-------Short- and mid-term storage--------------------------------------------#
1102   
1103  #--Energy constraints--#
1104   
1105  qe(Y,P,Z,SSM)..
1106                                          e(Y,P++1,Z,SSM)
1107                                          =e=
1108                                                  e(Y,P,Z,SSM)
1109                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1110                                                  ;
1111   
1112  qemax(Y,P,Z,SSM)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1113                                          e(Y,P,Z,SSM)
1114                                          =l=
1115                                                  e_cap(Y,Z,SSM)
1116                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1117                                                  ;
1118   
1119  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1120                                          e_f(Y,P,T,Z,SSM)
1121                                          =e=
1122                                                  e(Y,P,Z,SSM)
1123                                                  ;
1124   
1125  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1126                                          e_f(Y,P,T+1,Z,SSM)
1127                                          =e=
1128                                                  e_f(Y,P,T,Z,SSM)
1129                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1130                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1131                                                  ;
1132   
1133  qefmin(Y,P,T,Z,SSM)..
1134                                          e_f(Y,P,T,Z,SSM)
1135                                          =g=
1136                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1137                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1138                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1139                                                  ;
1140  qefmax(Y,P,T,Z,SSM)..
1141                                          e_f(Y,P,T,Z,SSM)
1142                                          =l=
1143                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1144                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1145                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1146                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1147                                                  ;
1148   
1149  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1150                                          e_l(Y,P,T,Z,SSM)
1151                                          =e=
1152                                                  e(Y,P,Z,SSM)
1153                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1154                                                  ;
1155   
1156  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1157                                          e_l(Y,P,T+1,Z,SSM)
1158                                          =e=
1159                                                  e_l(Y,P,T,Z,SSM)
1160                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1161                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1162                                                  ;
1163   
1164  qelmin(Y,P,T,Z,SSM)..
1165                                          e_l(Y,P,T,Z,SSM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1166                                          =g=
1167                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1168                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1169                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1170                                                  ;
1171  qelmax(Y,P,T,Z,SSM)..
1172                                          e_l(Y,P,T,Z,SSM)
1173                                          =l=
1174                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1175                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1176                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1177                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1178                                                  ;
1179   
1180  #--Duration limits--#
1181   
1182  qdurmin(Y,Z,SSM)..
1183                                          e_cap(Y,Z,SSM)
1184                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1185                                          =g=
1186                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1187                                                  ;
1188   
1189  qdurmax(Y,Z,SSM)..
1190                                          e_cap(Y,Z,SSM)
1191                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1192                                          =l=
1193                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1194                                                  ;
1195   
1196  #-------Short-term storage-----------------------------------------------------#
1197   
1198  #--Charging constraints--#
1199   
1200  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1201                                          p_c(Y,P,T+1,Z,SS)
1202                                          =e=
1203                                                  p_c(Y,P,T,Z,SS)
1204                                                  + ramp_c_up(Y,P,T,Z,SS)
1205                          - ramp_c_dn(Y,P,T,Z,SS)
1206                          ;
1207   
1208  qsscru(Y,P,T,Z,SS)..
1209                      ramp_c_up(Y,P,T,Z,SS)
1210                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1211                      =l=
1212                          p_cap_c(Y,Z,SS)
1213                          - p_c(Y,P,T,Z,SS)
1214                          ;
1215   
1216  qsscrd(Y,P,T,Z,SS)..
1217                      ramp_c_dn(Y,P,T,Z,SS)
1218                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1219                      =l=
1220                          p_c(Y,P,T,Z,SS)
1221                          ;
1222   
1223  #--Discharging constraints--#
1224   
1225  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1226                          p_d(Y,P,T+1,Z,SS)
1227                          =e=
1228                                  p_d(Y,P,T,Z,SS)
1229                                  + ramp_d_up(Y,P,T,Z,SS)
1230                          - ramp_d_dn(Y,P,T,Z,SS)
1231                          ;
1232   
1233  qssdru(Y,P,T,Z,SS)..
1234                      ramp_d_up(Y,P,T,Z,SS)
1235                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1236                      =l=
1237                          p_cap_c(Y,Z,SS)
1238                          - p_d(Y,P,T,Z,SS)
1239                          ;
1240   
1241  qssdrd(Y,P,T,Z,SS)..
1242                      ramp_d_dn(Y,P,T,Z,SS)
1243                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1244                      =l=
1245                          p_d(Y,P,T,Z,SS)
1246                          ;
1247   
1248  #-------Mid and long-term storage----------------------------------------------#
1249   
1250  #--Reserve allocation--#
1251   
1252  qresscu(Y,P,T,Z,RU,SML)..
1253                                          res_s_c(Y,P,T,Z,RU,SML)
1254                                          =e=
1255                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1256                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1257                                                  ;
1258   
1259  qresscd(Y,P,T,Z,RD,SML)..
1260                                          res_s_c(Y,P,T,Z,RD,SML)
1261                                          =e=
1262                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1263                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1264                                                  ;
1265   
1266  qressdu(Y,P,T,Z,RU,SM)..
1267                                          res_s_d(Y,P,T,Z,RU,SM)
1268                                          =e=
1269                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1270                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1271                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1272   
1273  qressdd(Y,P,T,Z,RD,SM)..
1274                                          res_s_d(Y,P,T,Z,RD,SM)
1275                                          =e=
1276                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1277                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1278                                                  ;
1279   
1280  #--Charging logical constraints--#
1281   
1282  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1283                                          n_c(Y,P,T+1,Z,SML)
1284                                          =e=
1285                                                  n_c(Y,P,T,Z,SML)
1286                                                  + n_c_su(Y,P,T,Z,SML)
1287                                                  - n_c_sd(Y,P,T,Z,SML)
1288                                                  ;
1289   
1290  qncmax(Y,P,T,Z,SML)..
1291                                          n_c(Y,P,T,Z,SML)
1292                                          =l=
1293                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1294                                                  ;
1295   
1296  qncsu(Y,P,T,Z,SML)..
1297                                          n_c_su(Y,P,T,Z,SML)
1298                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1299                                          =l=
1300                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1301                                                  - n_c(Y,P,T,Z,SML)
1302                                                  ;
1303   
1304  qncsd(Y,P,T,Z,SML)..
1305                                          n_c_sd(Y,P,T,Z,SML)
1306                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1307                                          =l=
1308                                                  n_c(Y,P,T,Z,SML)
1309                                                  ;
1310   
1311  #--Charging constraints--#
1312   
1313  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1314                      p_c(Y,P,T+1,Z,SML)
1315                      =e=
1316                          p_c(Y,P,T,Z,SML)
1317                          + ramp_c_up(Y,P,T,Z,SML)
1318                          - ramp_c_dn(Y,P,T,Z,SML)
1319                          + ramp_c_su(Y,P,T,Z,SML)
1320                          - ramp_c_sd(Y,P,T,Z,SML)
1321                          ;
1322   
1323  qsmlcmin(Y,P,T,Z,SML)..
1324                                          p_c(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1325                                          =g=
1326                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1327                                                  ;
1328   
1329  qsmlcmax(Y,P,T,Z,SML)..
1330                                          p_c(Y,P,T,Z,SML)
1331                                          =l=
1332                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1333                                                  ;
1334   
1335  #--Charging ramping constraints--#
1336   
1337  qcrudyn(Y,P,T,Z,SML)..
1338                      ramp_c_up(Y,P,T,Z,SML)
1339                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1340                      =l=
1341                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1342                          ;
1343   
1344  qcrucap(Y,P,T,Z,SML)..
1345                      ramp_c_up(Y,P,T,Z,SML)
1346                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1347                      =l=
1348                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1349                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1350                          ;
1351   
1352  qcrddyn(Y,P,T,Z,SML)..
1353                      ramp_c_dn(Y,P,T,Z,SML)
1354                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1355                      =l=
1356                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1357                          ;
1358   
1359  qcrdcap(Y,P,T,Z,SML)..
1360                      ramp_c_dn(Y,P,T,Z,SML)
1361                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1362                      =l=
1363                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1364                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1365                          ;
1366   
1367  qcsumin(Y,P,T,Z,SML)..
1368                                          ramp_c_su(Y,P,T,Z,SML)
1369                                          =g=
1370                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1371                                                  ;
1372   
1373  qcsumax(Y,P,T,Z,SML)..
1374                                          ramp_c_su(Y,P,T,Z,SML)
1375                                          =l=
1376                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1377                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1378   
1379  qcsdmin(Y,P,T,Z,SML)..
1380                                          ramp_c_sd(Y,P,T,Z,SML)
1381                                          =g=
1382                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1383                                                  ;
1384   
1385  qcsdmax(Y,P,T,Z,SML)..
1386                                          ramp_c_sd(Y,P,T,Z,SML)
1387                                          =l=
1388                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1389                                                  ;
1390   
1391  #--Reserve allocation constraints--#
1392   
1393  qcruad(Y,P,T,Z,SML)..
1394                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1395                      =l=
1396                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1397                          ;
1398   
1399  qcrumd(Y,P,T,Z,SML)..
1400                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1401                      =l=
1402                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1403                          ;
1404   
1405  qcrdfu(Y,P,T,Z,SML)..
1406                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1407                      =l=
1408                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1409                          ;
1410   
1411  qcrdau(Y,P,T,Z,SML)..
1412                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1413                      =l=
1414                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1415                          ;
1416   
1417  qcrdmus(Y,P,T,Z,SML)..
1418                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1419                      =l=
1420                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1421                          ;
1422   
1423  qcrunsmin(Y,P,T,Z,RD,SML)..
1424                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1425                                          =g=
1426                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1427                                                  ;
1428   
1429  qcrunsmax(Y,P,T,Z,RD,SML)..
1430                                          res_s_c_ns(Y,P,T,Z,RD,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1431                                          =l=
1432                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1433                                                  ;
1434   
1435  qcrdsdmin(Y,P,T,Z,RU,SML)..
1436                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1437                                          =g=
1438                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1439                                                  ;
1440   
1441  qcrdsdmax(Y,P,T,Z,RU,SML)..
1442                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1443                                          =l=
1444                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1445                                                  ;
1446   
1447  #-------Mid-term storage-------------------------------------------------------#
1448   
1449  qcapdeqcapc(Y,Z,SM)..
1450                                          p_cap_d(Y,Z,SM)
1451                                          =e=
1452                                                  p_cap_c(Y,Z,SM)
1453                                                  ;
1454   
1455  #--Discharging logical constraints--#
1456   
1457  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1458                                          n_d(Y,P,T+1,Z,SM)
1459                                          =e=
1460                                                  n_d(Y,P,T,Z,SM)
1461                                                  + n_d_su(Y,P,T,Z,SM)
1462                                                  - n_d_sd(Y,P,T,Z,SM)
1463                                                  ;
1464   
1465  qndmax(Y,P,T,Z,SM)..
1466                                          n_d(Y,P,T,Z,SM)
1467                                          =l=
1468                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1469                                                  ;
1470   
1471  qndsu(Y,P,T,Z,SM)..
1472                                          n_d_su(Y,P,T,Z,SM)
1473                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1474                                          =l=
1475                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1476                                                  - n_d(Y,P,T,Z,SM)
1477                                                  ;
1478   
1479  qndsd(Y,P,T,Z,SM)..
1480                                          n_d_sd(Y,P,T,Z,SM)
1481                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1482                                          =l=
1483                                                  n_d(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1484                                                  ;
1485   
1486  #--Discharging constraints--#
1487   
1488  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1489                      p_d(Y,P,T+1,Z,SM)
1490                      =e=
1491                          p_d(Y,P,T,Z,SM)
1492                          + ramp_d_up(Y,P,T,Z,SM)
1493                          - ramp_d_dn(Y,P,T,Z,SM)
1494                          + ramp_d_su(Y,P,T,Z,SM)
1495                          - ramp_d_sd(Y,P,T,Z,SM)
1496                          ;
1497   
1498  qsmdmin(Y,P,T,Z,SM)..
1499                                          p_d(Y,P,T,Z,SM)
1500                                          =g=
1501                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1502                                                  ;
1503   
1504  qsmdmax(Y,P,T,Z,SM)..
1505                                          p_d(Y,P,T,Z,SM)
1506                                          =l=
1507                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1508                                                  ;
1509   
1510  #--Discharging ramping constraints--#
1511   
1512  qdrudyn(Y,P,T,Z,SM)..
1513                      ramp_d_up(Y,P,T,Z,SM)
1514                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1515                      =l=
1516                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1517                          ;
1518   
1519  qdrucap(Y,P,T,Z,SM)..
1520                      ramp_d_up(Y,P,T,Z,SM)
1521                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1522                      =l=
1523                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1524                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1525                          ;
1526   
1527  qdrddyn(Y,P,T,Z,SM)..
1528                      ramp_d_dn(Y,P,T,Z,SM)
1529                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1530                      =l=
1531                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1532                          ;
1533   
1534  qdrdcap(Y,P,T,Z,SM)..
1535                      ramp_d_dn(Y,P,T,Z,SM)
1536                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1537                      =l=
1538                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1539                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1540                          ;
1541   
1542  qdsumin(Y,P,T,Z,SM)..
1543                                          ramp_d_su(Y,P,T,Z,SM)
1544                                          =g=
1545                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1546                                                  ;
1547   
1548  qdsumax(Y,P,T,Z,SM)..
1549                                          ramp_d_su(Y,P,T,Z,SM)
1550                                          =l=
1551                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1552                                                  ;
1553   
1554  qdsdmin(Y,P,T,Z,SM)..
1555                                          ramp_d_sd(Y,P,T,Z,SM)
1556                                          =g=
1557                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1558                                                  ;
1559   
1560  qdsdmax(Y,P,T,Z,SM)..
1561                                          ramp_d_sd(Y,P,T,Z,SM)
1562                                          =l=
1563                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1564                                                  ;
1565   
1566  #--Reserve allocation constraints--#
1567   
1568  qdrufu(Y,P,T,Z,SM)..
1569                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1570                      =l=
1571                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1572                          ;
1573   
1574  qdruau(Y,P,T,Z,SM)..
1575                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1576                      =l=
1577                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1578                          ;
1579   
1580  qdrumus(Y,P,T,Z,SM)..
1581                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1582                      =l=
1583                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1584                          ;
1585   
1586  qdrdad(Y,P,T,Z,SM)..
1587                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1588                      =l=
1589                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1590                          ;
1591   
1592  qdrdmd(Y,P,T,Z,SM)..
1593                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1594                      =l=
1595                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1596                          ;
1597   
1598  qdrunsmin(Y,P,T,Z,RU,SM)..
1599                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1600                                          =g=
1601                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1602                                                  ;
1603   
1604  qdrunsmax(Y,P,T,Z,RU,SM)..
1605                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1606                                          =l=
1607                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1608                                                  ;
1609   
1610  qdrdsdmin(Y,P,T,Z,RD,SM)..
1611                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1612                                          =g=
1613                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1614                                                  ;
1615   
1616  qdrdsdmax(Y,P,T,Z,RD,SM)..
1617                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1618                                          =l=
1619                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1620                                                  ;
1621   
1622  #-------Long-term storage------------------------------------------------------#
1623   
1624  #--Discharging reserve allocation--#
1625   
1626  qslressd(Y,P,T,Z,R,SL)..
1627                                          res_s_d(Y,P,T,Z,R,SL)
1628                                          =e=
1629                                                  0
1630                                                  ;
1631   
1632  #--Gas energy balance--#
1633   
1634  qgase(Y,P,C)..
1635                                          eg(Y,P++1,C)
1636                                          =e=
1637                                                  eg(Y,P,C)
1638                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1639                                                  ;
1640   
1641  qgasemax(Y,P,C)..
1642                                          eg(Y,P,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1643                                          =l=
1644                                                  E_LP
1645                                                  + eg_cap
1646                                                  ;
1647   
1648  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1649                                          eg_f(Y,P,T+1,C)
1650                                          =e=
1651                                                  eg_f(Y,P,T,C)
1652                                                  + pg_c(Y,P,T,C)
1653                                                  - pg_d(Y,P,T,C)
1654                                                  ;
1655   
1656  qgasefmax(Y,P,T,C)..
1657                                          eg_f(Y,P,T,C)
1658                                          =l=
1659                                                  E_LP
1660                                                  + eg_cap
1661                                                  ;
1662   
1663  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1664                                          eg_f(Y,P,T,C)
1665                                          =e=
1666                                                  eg(Y,P,C)
1667                                                  ;
1668   
1669  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1670                                          eg_l(Y,P,T+1,C)
1671                                          =e=
1672                                                  eg_l(Y,P,T,C)
1673                                                  + pg_c(Y,P,T,C)
1674                                                  - pg_d(Y,P,T,C)
1675                                                  ;
1676   
1677  qgaselmax(Y,P,T,C)..
1678                                          eg_l(Y,P,T,C)
1679                                          =l=
1680                                                  E_LP
1681                                                  + eg_cap
1682                                                  ;
1683   
1684  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1685                                          eg_l(Y,P,T,C)
1686                                          =e=
1687                                                  eg(Y,P,C)
1688                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1689                                                  ;
1690   
1691  #--Gas charging constraints--#
1692   
1693  qgasc(Y,P,T,C)..
1694                                          pg_c(Y,P,T,C)
1695                                          =e=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1696                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1697                                                  + pg_import(Y,P,T,C)
1698                                                  ;
1699   
1700  #--Gas discharging constraints--#
1701   
1702  qgasd(Y,P,T,C)..
1703                                          pg_d(Y,P,T,C)
1704                                          =e=
1705                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1706                                                  ;
1707   
1708  #--Gas usage--#
1709   
1710  qgasuse(Y,C)..
1711                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1712                                          =l=
1713                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1714                                                  ;
1715   
1716  qgasusegen(Y,P,T,Z,GCG)..
1717                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1718                                          =e=
1719                                                  pg_syn(Y,P,T,Z,GCG)
1720                                                  + pg_fos(Y,P,T,Z,GCG)
1721                                                  ;
1722   
1723  ################################################
1724  ################################################
1725   
1726  demand(P,T,Z)..
1727                                          demand_unit(P,T,Z) =e= DEM_T(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_T(P,T,Z)/P_REF)*(price_unit(P,H,Z)-P_REF))
1728                                          ;
1729   
1730  demand_clone(P,H,Z)..
1731                                          demand_unit_clone(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*DIAG(T,H))
1732                                          ;
1733   
1734  totdemand(P,Z)..
1735  #                                       sum(T,DEM_T(P,T,Z)) =l= sum(T,demand_unit(P,T,Z))
1736                                          sum(T,DEM_T(P,T,Z)+eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))) =l= demand_tot(P,Z)
1737                                          ;
1738   
1739  surplusdemand(P,T,Z)..
1740                                          surplus(P,T,Z) =e= eff_factor_earlier*sum(H,DIAG(T,H)*(front_up(P,H,Z)-back_down(P,H,Z)))
1741                                          ;
1742   
1743  totdemand2(P,Z)..
1744                                          demand_tot(P,Z) =e= sum(T,demand_unit(P,T,Z))
1745  #                                       demand_tot(P,Z) =e= sum(T,DEM_T(P,T,Z))
1746                                          ;
1747   
1748  #price(P,H,Z)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1749  #                                       (price_unit(P,H,Z) - P_REF)*sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)) =e= (demand_unit(P,T,Z)-DEM_T(P,T,Z))
1750  #                                       ;
1751   
1752  price_clone(P,T,Z)..
1753                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1754                                          ;
1755   
1756  refdemand(P,T,Z)..
1757                                          demand_ref(P,T,Z) =e= DEM_T(P,T,Z)
1758                                          ;
1759   
1760  shiftedaway(P,H,Z)..
1761                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1762                                          ;
1763   
1764  shiftedawaytotal(P,Z)..
1765                                          shiftaway_total(P,Z) =e= sum(H,shift_up(P,H,Z)-shift_down(P,H,Z))
1766                                          ;
1767   
1768  shiftedforward(P,H,Z)..
1769                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1770                                          ;
1771   
1772  shiftedforwardtotal(P,Z)..
1773  #                                       shiftforwards_total(P,Z) =e= sum(H,shiftforwards(P,H,Z))
1774                                          shiftforwards_total(P,Z) =e= sum(H,front_up(P,H,Z)-back_down(P,H,Z))
1775                                          ;
1776   
1777  shiftedbackward(P,H,Z)..
1778                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1779                                          ;
1780   
1781  shiftedbackwardtotal(P,Z)..
1782  #                                       shiftbackwards_total(P,Z) =e= sum(H,shiftbackwards(P,H,Z))
1783                                          shiftbackwards_total(P,Z) =e= sum(H,back_up(P,H,Z)-front_down(P,H,Z))
1784                                          ;
1785   
1786  shiftconstraint_frame_1(P,H,Z)..
1787                                          sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1788                                          ;
1789   
1790  shiftconstraint_frame_2(P,H,Z)..
1791                                          sum(T,DEM_T(P,T,Z)*SHIFTMAX(H,T)) =g= sum(T,demand_unit(P,T,Z)*SHIFTMIN(H,T))
1792                                          ;
1793   
1794  shiftconstraint1(P,H,Z)..
1795                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1796                                          ;
1797   
1798  shiftconstraint2(P,H,Z)..
1799                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
1800                                          ;
1801   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1802  priceconstraint1(P,T,Z)..
1803                                          price_unit_clone(P,T,Z) =l= P_REF + LIMITPRICE
1804                                          ;
1805   
1806  priceconstraint2(P,T,Z)..
1807                                          price_unit_clone(P,T,Z) =g= P_REF - LIMITPRICE
1808                                          ;
1809   
1810  demlimitunder(P,T,Z)..
1811                                          DEM_T(P,T,Z) - LIMITDEM =l= demand_unit(P,T,Z)
1812                                          ;
1813   
1814  demlimitupper(P,T,Z)..
1815                                          DEM_T(P,T,Z) + LIMITDEM =g= demand_unit(P,T,Z)
1816                                          ;
1817   
1818   
1819  #priceconstraint3(P,Z)..
1820  #                                       sum(T,price_unit(P,T,Z))/card(T) =e= P_REF
1821  #                                       ;
1822   
1823   
1824  qinnerframe(P,H,Z)..
1825                                          innerframe(P,H,Z) =e= sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T))
1826                                          ;
1827   
1828  qouterframe(P,H,Z)..
1829                                          outerframe(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1830                                          ;
1831   
1832  fixedcost(Z)..
1833                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1834                                          ;
1835   
1836  variablecost(P,Z)..
1837                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1838                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1839                                          ;
1840   
1841  cost(Z)..
1842                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
1843                                          ;
1844   
1845  ####################################
1846  # get downwards en upward numbers for front and back
1847  ####################################
1848   
1849  front_d_1(P,H,Z)..
1850                                          front_down(P,H,Z) =l= shiftforwards(P,H,Z)
1851                                          ;
1852   
1853  front_d_2(P,H,Z)..
1854                                          front_down(P,H,Z) =l= 0
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1855                                          ;
1856   
1857  front_u_1(P,H,Z)..
1858                                          front_up(P,H,Z) =g= shiftforwards(P,H,Z)
1859                                          ;
1860   
1861  front_u_2(P,H,Z)..
1862                                          front_up(P,H,Z) =g= 0
1863                                          ;
1864   
1865  back_d_1(P,H,Z)..
1866                                          back_down(P,H,Z) =l= shiftbackwards(P,H,Z)
1867                                          ;
1868   
1869  back_d_2(P,H,Z)..
1870                                          back_down(P,H,Z) =l= 0
1871                                          ;
1872   
1873  back_u_1(P,H,Z)..
1874                                          back_up(P,H,Z) =g= shiftbackwards(P,H,Z)
1875                                          ;
1876   
1877  back_u_2(P,H,Z)..
1878                                          back_up(P,H,Z) =g= 0
1879                                          ;
1880   
1881  shift_d_1(P,H,Z)..
1882                                          shift_down(P,H,Z) =l= shiftaway(P,H,Z)
1883                                          ;
1884   
1885  shift_d_2(P,H,Z)..
1886                                          shift_down(P,H,Z) =l= 0
1887                                          ;
1888   
1889  shift_u_1(P,H,Z)..
1890                                          shift_up(P,H,Z) =g= shiftaway(P,H,Z)
1891                                          ;
1892   
1893  shift_u_2(P,H,Z)..
1894                                          shift_up(P,H,Z) =g= 0
1895                                          ;
1896   
1897   
1898   
1899  MODEL GOA GOA model /
1900   
1901  #-------Objective function-----------------------------------------------------#
1902                  qobj
1903   
1904  #-------System constraints-----------------------------------------------------#
1905                  qbalance
1906   
1907                  qresprod
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1908                  qco2lim
1909   
1910                  qresendomin
1911                  qresendomax
1912                  qres
1913   
1914                  #qgendisp
1915                  #qgendisppeak
1916   
1917                  qco2
1918                  qlcg
1919   
1920  #-------Generation technologies------------------------------------------------#
1921                  qpotcapmin
1922  #               qpotcapmax
1923  #               qpotgenmin
1924  #               qpotgenmax
1925   
1926  #--Conventional generation technologies--#
1927                  qresgcu
1928                  qresgcd
1929   
1930                  qn
1931                  qnmax
1932                  qnsu
1933                  qnsd
1934   
1935                  qgen
1936                  qgenmin
1937                  qgenmax
1938   
1939                  qrudyn
1940                  qrucap
1941                  qrddyn
1942                  qrdcap
1943                  qsumin
1944                  qsumax
1945                  qsdmin
1946                  qsdmax
1947   
1948                  qrufu
1949                  qruau
1950                  qrumus
1951                  qrdad
1952                  qrdmd
1953                  qrunsmin
1954                  qrunsmax
1955                  qrdsdmin
1956                  qrdsdmax
1957   
1958  #--Intermittent renewable generation technologies--#
1959                  qresgru
1960   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1961                  qgenr
1962   
1963                  qresgrdr
1964                  qresgrdg
1965   
1966  #-------Storage technologies---------------------------------------------------#
1967  #--General constraints--#
1968                  qress
1969                  qspotcapmin
1970                  qspotcapmax
1971   
1972                  qe
1973                  qemax
1974                  qef
1975                  qefmin
1976                  qefmax
1977                  qefstart
1978                  qel
1979                  qelmin
1980                  qelmax
1981                  qelstart
1982   
1983                  qdurmin
1984                  qdurmax
1985   
1986  #--Short-term storage--#
1987                  qssc
1988                  qsscru
1989                  qsscrd
1990   
1991                  qssd
1992                  qssdru
1993                  qssdrd
1994   
1995  #--Mid and long-term storage--#
1996                  qresscu
1997                  qresscd
1998                  qressdu
1999                  qressdd
2000   
2001                  qnc
2002                  qncmax
2003                  qncsu
2004                  qncsd
2005   
2006                  qsmlc
2007                  qsmlcmin
2008                  qsmlcmax
2009   
2010                  qcrudyn
2011                  qcrucap
2012                  qcrddyn
2013                  qcrdcap
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2014                  qcsumin
2015                  qcsumax
2016                  qcsdmin
2017                  qcsdmax
2018   
2019                  qcruad
2020                  qcrumd
2021                  qcrdfu
2022                  qcrdau
2023                  qcrdmus
2024                  qcrunsmin
2025                  qcrunsmax
2026                  qcrdsdmin
2027                  qcrdsdmax
2028   
2029  #--Mid-term storage--#
2030                  qcapdeqcapc
2031   
2032                  qnd
2033                  qndmax
2034                  qndsu
2035                  qndsd
2036   
2037                  qsmd
2038                  qsmdmin
2039                  qsmdmax
2040   
2041                  qdrudyn
2042                  qdrucap
2043                  qdrddyn
2044                  qdrdcap
2045                  qdsumin
2046                  qdsumax
2047                  qdsdmin
2048                  qdsdmax
2049   
2050                  qdrufu
2051                  qdruau
2052                  qdrumus
2053                  qdrdad
2054                  qdrdmd
2055                  qdrunsmin
2056                  qdrunsmax
2057                  qdrdsdmin
2058                  qdrdsdmax
2059   
2060  #--Long-term storage--#
2061                  qslressd
2062   
2063                  qgase
2064                  qgasemax
2065                  qgasef
2066                  qgasefmax
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 41
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2067                  qgasefstart
2068                  qgasel
2069                  qgaselmax
2070                  qgaselstart
2071   
2072                  qgasc
2073   
2074                  qgasd
2075   
2076                  qgasuse
2077                  qgasusegen
2078   
2079  #-- Price-elasticity--#
2080   
2081  #               price
2082                  price_clone
2083                  demand
2084                  demand_clone
2085                  totdemand
2086                  totdemand2
2087                  refdemand
2088   
2089                  shiftedaway
2090                  shiftedforward
2091                  shiftedbackward
2092   
2093                  shiftedawaytotal
2094                  shiftedforwardtotal
2095                  shiftedbackwardtotal
2096   
2097                  priceconstraint1
2098                  priceconstraint2
2099  #               priceconstraint3
2100   
2101          ##########
2102          # include when working with moving frames, and set in wout_program -> factor back to 1
2103                  shiftconstraint_frame_1
2104                  shiftconstraint_frame_2
2105   
2106                  shiftconstraint1
2107                  shiftconstraint2
2108   
2109                  qinnerframe
2110                  qouterframe
2111   
2112  #               revenue
2113                  fixedcost
2114                  variablecost
2115                  cost
2116   
2117                  demlimitunder
2118                  demlimitupper
2119   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 42
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2120                  front_d_1
2121                  front_d_2
2122                  front_u_1
2123                  front_u_2
2124                  back_d_1
2125                  back_d_2
2126                  back_u_1
2127                  back_u_2
2128   
2129                  shift_u_1
2130                  shift_u_2
2131                  shift_d_1
2132                  shift_d_2
2133   
2134                  surplusdemand
2135  /;
2136   
2137   
2138   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME taking OF TYPE PARAM
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 43
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.016 SECONDS      4 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 21:43:28 Page 44
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.gms
Output     C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.lst
Save       C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
