GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(T,H)                              Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  COMPENSATE(P,H)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_NEW(P,T,H)
 337  ;
 338   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  G_DATA = 39:G_DATA
 339  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 340  $LOAD S_DATA
--- LOAD  RG = 41:RG
 341  $LOAD RG
--- LOAD  RSC = 42:RSC
 342  $LOAD RSC
--- LOAD  RSD = 43:RSD
 343  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 344  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 345  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 346  $LOAD REL_T
--- LOAD  W = 48:W
 347  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 348  $LOAD POL_TARGETS
 349  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 350  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 351  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 352  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 353  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 354  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 355  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 356  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 58:SHIFTMAX
 357  $LOAD SHIFTMAX
--- LOAD  COMPENSATE = 59:COMPENSATE
 358  $LOAD COMPENSATE
 359   
 360  #C_GAS = 25.6643460843943;
 361  C_GAS = 25.6643460843943*2;
 362  T_MARKET = 1;
 363  EGCAPEX = 2000000000000000000000000;
 364  E_LP = 7100000;
 365  P_REF = 55.5;
 366  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 367  LIMITPRICE = P_REF*0.9;
 368  LIMITDEM = 750;
 369  LIMITSHIFT = 2000;
 370  LENGTH_P = card(T);
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/21/16 12:39:47 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 371  ELAST_NEW(P,T,H) = ELAST(T,H)*DIAG(T,H)+COMPENSATE(P,H)*(TRI_LOW(T,H)*ELAST(T,H)+TRI_UP(T,H)*ELAST(T,H));
 372  #ELAST_NEW(P,T,H) = ELAST(T,H)*1;
 373   
 374  eff_factor_earlier = 1;
 375  eff_factor_later = 1;
 376   
 377  VARIABLES
 378  obj                     Value of objective function
 379   
 380  #######################################################
 381   
 382  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 383  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 384  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 385  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 386  shiftaway(P,H,Z)                                Shift away from an hour
 387  shiftaway_total(P,Z)                    Shift away from a period
 388   
 389  front_up(P,H,Z)
 390  front_down(P,H,Z)
 391  back_up(P,H,Z)
 392  back_down(P,H,Z)
 393  ;
 394   
 395  POSITIVE VARIABLES
 396  #######################################################
 397   
 398  price_unit(P,H,Z)                               Price of the electricity
 399  price_unit_clone(P,T,Z)
 400  demand_unit(P,T,Z)                              demand of the electricity
 401  demand_unit_clone(P,H,Z)
 402  demand_tot(P,Z)                                 total demand, based on demand_unit
 403  demand_ref(P,T,Z)                               the reference demand with flat price
 404  innerframe(P,H,Z)
 405  outerframe(P,H,Z)
 406   
 407  totalrevenue(P,Z)                               the product of demand and price
 408  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 409  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 410  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 411   
 412  #######################################################
 413   
 414  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 415  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 416  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 417  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 418  eg_cap                                          Gas storage capacity
 419   
 420  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 421  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 422   
 423  e(Y,P,Z,S)                              Energy content of storage technology S at period P
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 424  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 425  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 426  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 427  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 428  eg(Y,P,C)                                       Energy content of gas storage at period P
 429  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 430  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 431  pg_c(Y,P,T,C)                           Charging of gas storage
 432  pg_d(Y,P,T,C)                           Discharging of gas storage
 433   
 434  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 435  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 436   
 437  load_shedding(Y,P,T,Z)          Load shedding
 438  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 439  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 440  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 441   
 442  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 443  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 444  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 445   
 446  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 447  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 448  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 449  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 450  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 451   
 452  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 453  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 454  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 455  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 456   
 457  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 458   
 459  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 460  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 461  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 462  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 463  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 464  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 465  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 466  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 467   
 468  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 469  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 470  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 471  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 472  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 473   
 474  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 475  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 476  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 477  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 478   
 479  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 480  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 481  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
 482  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 483  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 484   
 485  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 486  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 487  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 488  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 489   
 490  pg_import(Y,P,T,C)                      Import of gas
 491  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 492  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 493   
 494  ;
 495   
 496  EQUATIONS
 497  #--Objective function--#
 498  qobj
 499   
 500  #--System constraints--#
 501  qbalance(Y,P,T,Z)
 502  qresprod(Y,C)
 503  qco2lim(Y,C)
 504  qresendomin(Y,P,T,C,R,GRI)
 505  qresendomax(Y,P,T,C,R,GRI)
 506  qres(Y,P,T,C,R)
 507  qgendisp(Y,P,T,C)
 508  qgendisppeak(Y,C)
 509  qco2(Y,C,G)
 510  qlcg(Y,C,G)
 511   
 512  #--Generation technologies--#
 513  qpotcapmin(Y,C,G)
 514  #qpotcapmax(Y,C,G)
 515  #qpotgenmin(Y,C,G)
 516  #qpotgenmax(Y,C,G)
 517   
 518  qresgcu(Y,P,T,Z,RU,GD)
 519  qresgcd(Y,P,T,Z,RD,GD)
 520  qn(Y,P,T,Z,GD)
 521  qnmax(Y,P,T,Z,GD)
 522  qnsu(Y,P,T,Z,GD)
 523  qnsd(Y,P,T,Z,GD)
 524  qgen(Y,P,T,Z,GD)
 525  qgenmin(Y,P,T,Z,GD)
 526  qgenmax(Y,P,T,Z,GD)
 527  qrudyn(Y,P,T,Z,GD)
 528  qrucap(Y,P,T,Z,GD)
 529  qrddyn(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 530  qrdcap(Y,P,T,Z,GD)
 531  qsumin(Y,P,T,Z,GD)
 532  qsumax(Y,P,T,Z,GD)
 533  qsdmin(Y,P,T,Z,GD)
 534  qsdmax(Y,P,T,Z,GD)
 535  qrufu(Y,P,T,Z,GD)
 536  qruau(Y,P,T,Z,GD)
 537  qrumus(Y,P,T,Z,GD)
 538  qrdad(Y,P,T,Z,GD)
 539  qrdmd(Y,P,T,Z,GD)
 540  qrunsmin(Y,P,T,Z,RU,GD)
 541  qrunsmax(Y,P,T,Z,RU,GD)
 542  qrdsdmin(Y,P,T,Z,RD,GD)
 543  qrdsdmax(Y,P,T,Z,RD,GD)
 544   
 545  qresgru(Y,P,T,Z,RU,GRI)
 546  qgenr(Y,P,T,Z,GRI)
 547  qresgrdr(Y,P,T,Z,GRI)
 548  qresgrdg(Y,P,T,Z,GRI)
 549   
 550  #--Storage technologies--#
 551  qress(Y,P,T,Z,R,S)
 552  qspotcapmin(Y,C,S)
 553  qspotcapmax(Y,C,S)
 554   
 555  qe(Y,P,Z,S)
 556  qemax(Y,P,Z,S)
 557  qef(Y,P,T,Z,S)
 558  qefmin(Y,P,T,Z,S)
 559  qefmax(Y,P,T,Z,S)
 560  qefstart(Y,P,T,Z,S)
 561  qel(Y,P,T,Z,S)
 562  qelmin(Y,P,T,Z,S)
 563  qelmax(Y,P,T,Z,S)
 564  qelstart(Y,P,T,Z,S)
 565  qdurmin(Y,Z,S)
 566  qdurmax(Y,Z,S)
 567   
 568  qssc(Y,P,T,Z,SS)
 569  qsscru(Y,P,T,Z,SS)
 570  qsscrd(Y,P,T,Z,SS)
 571  qssd(Y,P,T,Z,SS)
 572  qssdru(Y,P,T,Z,SS)
 573  qssdrd(Y,P,T,Z,SS)
 574   
 575  qresscu(Y,P,T,Z,RU,SML)
 576  qresscd(Y,P,T,Z,RD,SML)
 577  qressdu(Y,P,T,Z,RU,SM)
 578  qressdd(Y,P,T,Z,RD,SM)
 579  qnc(Y,P,T,Z,SML)
 580  qncmax(Y,P,T,Z,SML)
 581  qncsu(Y,P,T,Z,SML)
 582  qncsd(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 583  qsmlc(Y,P,T,Z,SML)
 584  qsmlcmin(Y,P,T,Z,SML)
 585  qsmlcmax(Y,P,T,Z,SML)
 586  qcrudyn(Y,P,T,Z,SML)
 587  qcrucap(Y,P,T,Z,SML)
 588  qcrddyn(Y,P,T,Z,SML)
 589  qcrdcap(Y,P,T,Z,SML)
 590  qcsumin(Y,P,T,Z,SML)
 591  qcsumax(Y,P,T,Z,SML)
 592  qcsdmin(Y,P,T,Z,SML)
 593  qcsdmax(Y,P,T,Z,SML)
 594  qcruad(Y,P,T,Z,SML)
 595  qcrumd(Y,P,T,Z,SML)
 596  qcrdfu(Y,P,T,Z,SML)
 597  qcrdau(Y,P,T,Z,SML)
 598  qcrdmus(Y,P,T,Z,SML)
 599  qcrunsmin(Y,P,T,Z,RD,SML)
 600  qcrunsmax(Y,P,T,Z,RD,SML)
 601  qcrdsdmin(Y,P,T,Z,RU,SML)
 602  qcrdsdmax(Y,P,T,Z,RU,SML)
 603   
 604  qcapdeqcapc(Y,Z,SM)
 605  qnd(Y,P,T,Z,SM)
 606  qndmax(Y,P,T,Z,SM)
 607  qndsu(Y,P,T,Z,SM)
 608  qndsd(Y,P,T,Z,SM)
 609  qsmd(Y,P,T,Z,SM)
 610  qsmdmin(Y,P,T,Z,SM)
 611  qsmdmax(Y,P,T,Z,SM)
 612  qdrudyn(Y,P,T,Z,SM)
 613  qdrucap(Y,P,T,Z,SM)
 614  qdrddyn(Y,P,T,Z,SM)
 615  qdrdcap(Y,P,T,Z,SM)
 616  qdsumin(Y,P,T,Z,SM)
 617  qdsumax(Y,P,T,Z,SM)
 618  qdsdmin(Y,P,T,Z,SM)
 619  qdsdmax(Y,P,T,Z,SM)
 620  qdrufu(Y,P,T,Z,SM)
 621  qdruau(Y,P,T,Z,SM)
 622  qdrumus(Y,P,T,Z,SM)
 623  qdrdad(Y,P,T,Z,SM)
 624  qdrdmd(Y,P,T,Z,SM)
 625  qdrunsmin(Y,P,T,Z,RU,SM)
 626  qdrunsmax(Y,P,T,Z,RU,SM)
 627  qdrdsdmin(Y,P,T,Z,RD,SM)
 628  qdrdsdmax(Y,P,T,Z,RD,SM)
 629   
 630  qslressd(Y,P,T,Z,R,SL)
 631  qgase(Y,P,C)
 632  qgasemax(Y,P,C)
 633  qgasef(Y,P,T,C)
 634  qgasefmax(Y,P,T,C)
 635  qgasefstart(Y,P,T,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 636  qgasel(Y,P,T,C)
 637  qgaselmax(Y,P,T,C)
 638  qgaselstart(Y,P,T,C)
 639  qgasc(Y,P,T,C)
 640  qgasd(Y,P,T,C)
 641  qgasuse(Y,C)
 642  qgasusegen(Y,P,T,Z,GCG)
 643   
 644  ###############################
 645  #price(P,H,Z)
 646  price_clone(P,T,Z)
 647  demand(P,T,Z)
 648  demand_clone(P,H,Z)
 649  totdemand(P,Z)
 650  totdemand2(P,Z)
 651  refdemand(P,T,Z)
 652  refdemand2(Z)
 653  priceconstraint1(P,T,Z)
 654  priceconstraint2(P,T,Z)
 655  priceconstraint3(P,Z)
 656  shiftconstraint(P,H,Z)
 657  shiftconstraint1(P,H,Z)
 658  shiftconstraint2(P,H,Z)
 659  shiftedforward(P,H,Z)
 660  shiftedforwardtotal(P,Z)
 661  shiftedbackward(P,H,Z)
 662  shiftedbackwardtotal(P,Z)
 663  shiftedaway(P,H,Z)
 664  shiftedawaytotal(P,Z)
 665   
 666  front_d_1(P,H,Z)
 667  front_d_2(P,H,Z)
 668  front_u_1(P,H,Z)
 669  front_u_2(P,H,Z)
 670   
 671  back_d_1(P,H,Z)
 672  back_d_2(P,H,Z)
 673  back_u_1(P,H,Z)
 674  back_u_2(P,H,Z)
 675   
 676  qinnerframe(P,H,Z)
 677  qouterframe(P,H,Z)
 678   
 679  revenue(P,Z)
 680  fixedcost(Z)
 681  variablecost(P,Z)
 682  cost(Z)
 683   
 684  demlimitunder(P,T,Z)
 685  demlimitupper(P,T,Z)
 686  ;
 687   
 688  #-----######################---------------------------------------------------#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 689  #-----# Objective function #---------------------------------------------------#
 690  #-----######################---------------------------------------------------#
 691  qobj..              obj
 692                                          =e=
 693                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 694                                                  #+ sum((Y,Z,S),      (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 695                                                  +
 696                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 697                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 698   
 699                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 700   
 701                                                  )
 702                                                  *(168/card(T));
 703                                                  ;
 704   
 705   
 706   
 707   
 708  #-----######################---------------------------------------------------#
 709  #-----# System constraints #---------------------------------------------------#
 710  #-----######################---------------------------------------------------#
 711   
 712  #--System balance--#
 713   
 714  # balance with demand response
 715  qbalance(Y,P,T,Z)..
 716                                  sum(G, gen(Y,P,T,Z,G))
 717                                  #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 718                                          =e=
 719                                                  demand_unit(P,T,Z)
 720  #                                               - load_shedding(Y,P,T,Z)
 721                                                  #+ sum(S, p_c(Y,P,T,Z,S))
 722                                                  ;
 723   
 724  #balance without demand response
 725  #qbalance(Y,P,T,Z)..
 726  #                               sum(G, gen(Y,P,T,Z,G))
 727  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 728  #                                       =e=
 729  #                                               DEM_T(P,T,Z)
 730  #                                       #       - load_shedding(Y,P,T,Z)
 731  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 732  #                                               ;
 733  #DEM(Y,Z)*DEM_T(T,Z);
 734   
 735  #--Renewable target--#
 736   
 737  #qresprod(Y,C)..
 738  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 739  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 740  #                                       =l=
 741  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 742  #                                               ;
 743   
 744  qresprod(Y,C)..
 745                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 746                                          =g=
 747                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 748                                                  ;
 749   
 750  qco2lim(Y,C)..
 751  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 752  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 753                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 754                                          =l=
 755                                                  50000000*0.4
 756                                                  ;
 757   
 758  #--Reserve requirements--#
 759   
 760  qresendomin(Y,P,T,C,R,GRI)..
 761                                          q_endo(Y,P,T,C,R,GRI)
 762                                          =g=
 763                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 764                                                  ;
 765   
 766  qresendomax(Y,P,T,C,R,GRI)..
 767                                          q_endo(Y,P,T,C,R,GRI)
 768                                          =l=
 769                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 770                                                  ;
 771   
 772   
 773  qres(Y,P,T,C,R)..
 774                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 775                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 776                                          =e=
 777                                                  R_EXO(C,R)
 778                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 779                                                  ;
 780   
 781  #--Dispatchable capacity--#
 782   
 783  qgendisp(Y,P,T,C)..
 784                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 785                                          =g=
 786                                                  sum(Z $ C_Z(C,Z), DEM_T(P,T,Z))*0.20
 787                                                  ;
 788   
 789  qgendisppeak(Y,C)..
 790                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 791                                          =g=
 792                                                  10000*1.20
 793                                                  ;
 794   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 795  #--Emissions--#
 796   
 797  qco2(Y,C,G)..
 798                                          co2(Y,C,G)
 799                                          =e=
 800                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 801                                                  ;
 802   
 803  qlcg(Y,C,G)..
 804                                          lcg(Y,C,G)
 805                                          =e=
 806                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 807                                                  ;
 808   
 809   
 810  #-----###########################----------------------------------------------#
 811  #-----# Generation technologies #----------------------------------------------#
 812  #-----###########################----------------------------------------------#
 813   
 814  ##--Installed generation capacities--#
 815   
 816  qpotcapmin(Y,C,G)..
 817                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 818                                          =g=
 819                                                  G_DATA(G,'CAP_MIN')
 820                                                  ;
 821   
 822  #qpotcapmax(Y,C,G)..
 823  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 824  #                                       =g=
 825  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 826  #                                               ;
 827  #
 828  #qpotgenmin(Y,C,G)..
 829  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 830  #                                       =g=
 831  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 832  #                                               ;
 833  #
 834  #qpotgenmax(Y,Z,G)..
 835  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 836  #                                       =g=
 837  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 838  #                                               ;
 839   
 840  #-------Dispatchable generation technologies-----------------------------------#
 841   
 842  #--Reserve allocation--#
 843   
 844  qresgcu(Y,P,T,Z,RU,GD)..
 845                                          res_g(Y,P,T,Z,RU,GD)
 846                                          =e=
 847                                                  res_g_s(Y,P,T,Z,RU,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 848                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 849                                                  ;
 850   
 851  qresgcd(Y,P,T,Z,RD,GD)..
 852                                          res_g(Y,P,T,Z,RD,GD)
 853                                          =e=
 854                                                  res_g_s(Y,P,T,Z,RD,GD)
 855                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 856                                                  ;
 857   
 858  #--Clustering logical constraints--#
 859   
 860  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 861                                          n(Y,P,T+1,Z,GD)
 862                                          =e=
 863                                                  n(Y,P,T,Z,GD)
 864                                                  + n_su(Y,P,T,Z,GD)
 865                                                  - n_sd(Y,P,T,Z,GD)
 866                                                  ;
 867   
 868  qnmax(Y,P,T,Z,GD)..
 869                                          n(Y,P,T,Z,GD)
 870                                          =l=
 871                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 872                                                  ;
 873   
 874  qnsu(Y,P,T,Z,GD)..
 875                                          n_su(Y,P,T,Z,GD)
 876                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 877                                          =l=
 878                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 879                                                  - n(Y,P,T,Z,GD)
 880                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 881                                                  ;
 882   
 883  qnsd(Y,P,T,Z,GD)..
 884                                          n_sd(Y,P,T,Z,GD)
 885                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 886                                          =l=
 887                                                  n(Y,P,T,Z,GD)
 888                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 889                                                  ;
 890   
 891  #--Generation constraints--#
 892   
 893  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 894                      gen(Y,P,T+1,Z,GD)
 895                      =e=
 896                          gen(Y,P,T,Z,GD)
 897                          + ramp_up(Y,P,T,Z,GD)
 898                          - ramp_dn(Y,P,T,Z,GD)
 899                          + ramp_su(Y,P,T,Z,GD)
 900                          - ramp_sd(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 901                          ;
 902   
 903  qgenmin(Y,P,T,Z,GD)..
 904                                          gen(Y,P,T,Z,GD)
 905                                          =g=
 906                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 907                                                  ;
 908   
 909  qgenmax(Y,P,T,Z,GD)..
 910                                          gen(Y,P,T,Z,GD)
 911                                          =l=
 912                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 913                                                  ;
 914                                                  #*G_DATA(G,'PM')/100;
 915   
 916  #--Ramping constraints--#
 917   
 918  qrudyn(Y,P,T,Z,GD)..
 919                      ramp_up(Y,P,T,Z,GD)
 920                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 921                      =l=
 922                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 923                          ;
 924   
 925  qrucap(Y,P,T,Z,GD)..
 926                      ramp_up(Y,P,T,Z,GD)
 927                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 928                      =l=
 929                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
 930                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
 931                          ;
 932   
 933  qrddyn(Y,P,T,Z,GD)..
 934                      ramp_dn(Y,P,T,Z,GD)
 935                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 936                      =l=
 937                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 938                          ;
 939   
 940  qrdcap(Y,P,T,Z,GD)..
 941                      ramp_dn(Y,P,T,Z,GD)
 942                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 943                      =l=
 944                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
 945                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
 946                          ;
 947   
 948  qsumin(Y,P,T,Z,GD)..
 949                                          ramp_su(Y,P,T,Z,GD)
 950                                          =g=
 951                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 952                                                  ;
 953   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 954  qsumax(Y,P,T,Z,GD)..
 955                                          ramp_su(Y,P,T,Z,GD)
 956                                          =l=
 957                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 958                                                  ;
 959   
 960  qsdmin(Y,P,T,Z,GD)..
 961                                          ramp_sd(Y,P,T,Z,GD)
 962                                          =g=
 963                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 964                                                  ;
 965   
 966  qsdmax(Y,P,T,Z,GD)..
 967                                          ramp_sd(Y,P,T,Z,GD)
 968                                          =l=
 969                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 970                                                  ;
 971   
 972  #--Reserve allocation constraints--#
 973   
 974  qrufu(Y,P,T,Z,GD)..
 975                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
 976                      =l=
 977                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
 978                          ;
 979   
 980  qruau(Y,P,T,Z,GD)..
 981                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
 982                      =l=
 983                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 984                          ;
 985   
 986  qrumus(Y,P,T,Z,GD)..
 987                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 988                      =l=
 989                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 990                          ;
 991   
 992  qrdad(Y,P,T,Z,GD)..
 993                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
 994                      =l=
 995                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 996                          ;
 997   
 998  qrdmd(Y,P,T,Z,GD)..
 999                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1000                      =l=
1001                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1002                          ;
1003   
1004  qrunsmin(Y,P,T,Z,RU,GD)..
1005                                          res_g_ns(Y,P,T,Z,RU,GD)
1006                                          =g=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1007                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
1008                                                  ;
1009   
1010  qrunsmax(Y,P,T,Z,RU,GD)..
1011                                          res_g_ns(Y,P,T,Z,RU,GD)
1012                                          =l=
1013                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
1014                                                  ;
1015   
1016  qrdsdmin(Y,P,T,Z,RD,GD)..
1017                                          res_g_sd(Y,P,T,Z,RD,GD)
1018                                          =g=
1019                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1020                                                  ;
1021   
1022  qrdsdmax(Y,P,T,Z,RD,GD)..
1023                                          res_g_sd(Y,P,T,Z,RD,GD)
1024                                          =l=
1025                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1026                                                  ;
1027   
1028  #-------Intermittent renewable generation technologies-------------------------#
1029   
1030  #--Reserve allocation--#
1031   
1032  qresgru(Y,P,T,Z,RU,GRI)..
1033                                          res_g(Y,P,T,Z,RU,GRI)
1034                                          =e=
1035                                                  0
1036                                                  ;
1037   
1038  #--Output and curtailment constraint--#
1039   
1040  qgenr(Y,P,T,Z,GRI)..
1041                      gen(Y,P,T,Z,GRI)
1042                      + curt(Y,P,T,Z,GRI)
1043                      + curt_dummy(Y,P,T,Z,GRI)
1044                      =e=
1045                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1046                          ;
1047   
1048  #--Reserve allocation constraints--#
1049   
1050  qresgrdr(Y,P,T,Z,GRI)..
1051                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1052                                          =l=
1053                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1054                                                  ;
1055   
1056  qresgrdg(Y,P,T,Z,GRI)..
1057                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1058                                          =l=
1059                                                  gen(Y,P,T,Z,GRI)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1060                                                  ;
1061   
1062  #-----########################-------------------------------------------------#
1063  #-----# Storage technologies #-------------------------------------------------#
1064  #-----########################-------------------------------------------------#
1065   
1066  #-------General constraints----------------------------------------------------#
1067   
1068  #--Reserve allocation--#
1069   
1070  qress(Y,P,T,Z,R,S)..
1071                                          res_s(Y,P,T,Z,R,S)
1072                                          =e=
1073                                                  res_s_c(Y,P,T,Z,R,S)
1074                                                  + res_s_d(Y,P,T,Z,R,S)
1075                                                  ;
1076   
1077  #--Installed capacities--#
1078   
1079  qspotcapmin(Y,C,S)..
1080                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1081                                          =g=
1082                                                  S_DATA(S,'CAP_MIN')
1083                                                  ;
1084   
1085  qspotcapmax(Y,C,S)..
1086                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1087                                          =l=
1088                                                  S_DATA(S,'CAP_MAX')
1089                                                  ;
1090   
1091  #-------Short- and mid-term storage--------------------------------------------#
1092   
1093  #--Energy constraints--#
1094   
1095  qe(Y,P,Z,SSM)..
1096                                          e(Y,P++1,Z,SSM)
1097                                          =e=
1098                                                  e(Y,P,Z,SSM)
1099                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1100                                                  ;
1101   
1102  qemax(Y,P,Z,SSM)..
1103                                          e(Y,P,Z,SSM)
1104                                          =l=
1105                                                  e_cap(Y,Z,SSM)
1106                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1107                                                  ;
1108   
1109  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1110                                          e_f(Y,P,T,Z,SSM)
1111                                          =e=
1112                                                  e(Y,P,Z,SSM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1113                                                  ;
1114   
1115  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1116                                          e_f(Y,P,T+1,Z,SSM)
1117                                          =e=
1118                                                  e_f(Y,P,T,Z,SSM)
1119                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1120                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1121                                                  ;
1122   
1123  qefmin(Y,P,T,Z,SSM)..
1124                                          e_f(Y,P,T,Z,SSM)
1125                                          =g=
1126                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1127                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1128                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1129                                                  ;
1130  qefmax(Y,P,T,Z,SSM)..
1131                                          e_f(Y,P,T,Z,SSM)
1132                                          =l=
1133                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1134                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1135                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1136                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1137                                                  ;
1138   
1139  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1140                                          e_l(Y,P,T,Z,SSM)
1141                                          =e=
1142                                                  e(Y,P,Z,SSM)
1143                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1144                                                  ;
1145   
1146  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1147                                          e_l(Y,P,T+1,Z,SSM)
1148                                          =e=
1149                                                  e_l(Y,P,T,Z,SSM)
1150                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1151                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1152                                                  ;
1153   
1154  qelmin(Y,P,T,Z,SSM)..
1155                                          e_l(Y,P,T,Z,SSM)
1156                                          =g=
1157                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1158                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1159                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1160                                                  ;
1161  qelmax(Y,P,T,Z,SSM)..
1162                                          e_l(Y,P,T,Z,SSM)
1163                                          =l=
1164                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1165                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1166                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1167                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1168                                                  ;
1169   
1170  #--Duration limits--#
1171   
1172  qdurmin(Y,Z,SSM)..
1173                                          e_cap(Y,Z,SSM)
1174                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1175                                          =g=
1176                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1177                                                  ;
1178   
1179  qdurmax(Y,Z,SSM)..
1180                                          e_cap(Y,Z,SSM)
1181                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1182                                          =l=
1183                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1184                                                  ;
1185   
1186  #-------Short-term storage-----------------------------------------------------#
1187   
1188  #--Charging constraints--#
1189   
1190  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1191                                          p_c(Y,P,T+1,Z,SS)
1192                                          =e=
1193                                                  p_c(Y,P,T,Z,SS)
1194                                                  + ramp_c_up(Y,P,T,Z,SS)
1195                          - ramp_c_dn(Y,P,T,Z,SS)
1196                          ;
1197   
1198  qsscru(Y,P,T,Z,SS)..
1199                      ramp_c_up(Y,P,T,Z,SS)
1200                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1201                      =l=
1202                          p_cap_c(Y,Z,SS)
1203                          - p_c(Y,P,T,Z,SS)
1204                          ;
1205   
1206  qsscrd(Y,P,T,Z,SS)..
1207                      ramp_c_dn(Y,P,T,Z,SS)
1208                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1209                      =l=
1210                          p_c(Y,P,T,Z,SS)
1211                          ;
1212   
1213  #--Discharging constraints--#
1214   
1215  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1216                          p_d(Y,P,T+1,Z,SS)
1217                          =e=
1218                                  p_d(Y,P,T,Z,SS)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1219                                  + ramp_d_up(Y,P,T,Z,SS)
1220                          - ramp_d_dn(Y,P,T,Z,SS)
1221                          ;
1222   
1223  qssdru(Y,P,T,Z,SS)..
1224                      ramp_d_up(Y,P,T,Z,SS)
1225                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1226                      =l=
1227                          p_cap_c(Y,Z,SS)
1228                          - p_d(Y,P,T,Z,SS)
1229                          ;
1230   
1231  qssdrd(Y,P,T,Z,SS)..
1232                      ramp_d_dn(Y,P,T,Z,SS)
1233                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1234                      =l=
1235                          p_d(Y,P,T,Z,SS)
1236                          ;
1237   
1238  #-------Mid and long-term storage----------------------------------------------#
1239   
1240  #--Reserve allocation--#
1241   
1242  qresscu(Y,P,T,Z,RU,SML)..
1243                                          res_s_c(Y,P,T,Z,RU,SML)
1244                                          =e=
1245                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1246                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1247                                                  ;
1248   
1249  qresscd(Y,P,T,Z,RD,SML)..
1250                                          res_s_c(Y,P,T,Z,RD,SML)
1251                                          =e=
1252                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1253                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1254                                                  ;
1255   
1256  qressdu(Y,P,T,Z,RU,SM)..
1257                                          res_s_d(Y,P,T,Z,RU,SM)
1258                                          =e=
1259                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1260                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1261                                                  ;
1262   
1263  qressdd(Y,P,T,Z,RD,SM)..
1264                                          res_s_d(Y,P,T,Z,RD,SM)
1265                                          =e=
1266                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1267                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1268                                                  ;
1269   
1270  #--Charging logical constraints--#
1271   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1272  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1273                                          n_c(Y,P,T+1,Z,SML)
1274                                          =e=
1275                                                  n_c(Y,P,T,Z,SML)
1276                                                  + n_c_su(Y,P,T,Z,SML)
1277                                                  - n_c_sd(Y,P,T,Z,SML)
1278                                                  ;
1279   
1280  qncmax(Y,P,T,Z,SML)..
1281                                          n_c(Y,P,T,Z,SML)
1282                                          =l=
1283                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1284                                                  ;
1285   
1286  qncsu(Y,P,T,Z,SML)..
1287                                          n_c_su(Y,P,T,Z,SML)
1288                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1289                                          =l=
1290                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1291                                                  - n_c(Y,P,T,Z,SML)
1292                                                  ;
1293   
1294  qncsd(Y,P,T,Z,SML)..
1295                                          n_c_sd(Y,P,T,Z,SML)
1296                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1297                                          =l=
1298                                                  n_c(Y,P,T,Z,SML)
1299                                                  ;
1300   
1301  #--Charging constraints--#
1302   
1303  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1304                      p_c(Y,P,T+1,Z,SML)
1305                      =e=
1306                          p_c(Y,P,T,Z,SML)
1307                          + ramp_c_up(Y,P,T,Z,SML)
1308                          - ramp_c_dn(Y,P,T,Z,SML)
1309                          + ramp_c_su(Y,P,T,Z,SML)
1310                          - ramp_c_sd(Y,P,T,Z,SML)
1311                          ;
1312   
1313  qsmlcmin(Y,P,T,Z,SML)..
1314                                          p_c(Y,P,T,Z,SML)
1315                                          =g=
1316                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1317                                                  ;
1318   
1319  qsmlcmax(Y,P,T,Z,SML)..
1320                                          p_c(Y,P,T,Z,SML)
1321                                          =l=
1322                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1323                                                  ;
1324   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1325  #--Charging ramping constraints--#
1326   
1327  qcrudyn(Y,P,T,Z,SML)..
1328                      ramp_c_up(Y,P,T,Z,SML)
1329                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1330                      =l=
1331                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1332                          ;
1333   
1334  qcrucap(Y,P,T,Z,SML)..
1335                      ramp_c_up(Y,P,T,Z,SML)
1336                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1337                      =l=
1338                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1339                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1340                          ;
1341   
1342  qcrddyn(Y,P,T,Z,SML)..
1343                      ramp_c_dn(Y,P,T,Z,SML)
1344                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1345                      =l=
1346                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1347                          ;
1348   
1349  qcrdcap(Y,P,T,Z,SML)..
1350                      ramp_c_dn(Y,P,T,Z,SML)
1351                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1352                      =l=
1353                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1354                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1355                          ;
1356   
1357  qcsumin(Y,P,T,Z,SML)..
1358                                          ramp_c_su(Y,P,T,Z,SML)
1359                                          =g=
1360                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1361                                                  ;
1362   
1363  qcsumax(Y,P,T,Z,SML)..
1364                                          ramp_c_su(Y,P,T,Z,SML)
1365                                          =l=
1366                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1367                                                  ;
1368   
1369  qcsdmin(Y,P,T,Z,SML)..
1370                                          ramp_c_sd(Y,P,T,Z,SML)
1371                                          =g=
1372                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1373                                                  ;
1374   
1375  qcsdmax(Y,P,T,Z,SML)..
1376                                          ramp_c_sd(Y,P,T,Z,SML)
1377                                          =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1378                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1379                                                  ;
1380   
1381  #--Reserve allocation constraints--#
1382   
1383  qcruad(Y,P,T,Z,SML)..
1384                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1385                      =l=
1386                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1387                          ;
1388   
1389  qcrumd(Y,P,T,Z,SML)..
1390                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1391                      =l=
1392                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1393                          ;
1394   
1395  qcrdfu(Y,P,T,Z,SML)..
1396                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1397                      =l=
1398                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1399                          ;
1400   
1401  qcrdau(Y,P,T,Z,SML)..
1402                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1403                      =l=
1404                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1405                          ;
1406   
1407  qcrdmus(Y,P,T,Z,SML)..
1408                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1409                      =l=
1410                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1411                          ;
1412   
1413  qcrunsmin(Y,P,T,Z,RD,SML)..
1414                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1415                                          =g=
1416                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1417                                                  ;
1418   
1419  qcrunsmax(Y,P,T,Z,RD,SML)..
1420                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1421                                          =l=
1422                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1423                                                  ;
1424   
1425  qcrdsdmin(Y,P,T,Z,RU,SML)..
1426                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1427                                          =g=
1428                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1429                                                  ;
1430   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1431  qcrdsdmax(Y,P,T,Z,RU,SML)..
1432                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1433                                          =l=
1434                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1435                                                  ;
1436   
1437  #-------Mid-term storage-------------------------------------------------------#
1438   
1439  qcapdeqcapc(Y,Z,SM)..
1440                                          p_cap_d(Y,Z,SM)
1441                                          =e=
1442                                                  p_cap_c(Y,Z,SM)
1443                                                  ;
1444   
1445  #--Discharging logical constraints--#
1446   
1447  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1448                                          n_d(Y,P,T+1,Z,SM)
1449                                          =e=
1450                                                  n_d(Y,P,T,Z,SM)
1451                                                  + n_d_su(Y,P,T,Z,SM)
1452                                                  - n_d_sd(Y,P,T,Z,SM)
1453                                                  ;
1454   
1455  qndmax(Y,P,T,Z,SM)..
1456                                          n_d(Y,P,T,Z,SM)
1457                                          =l=
1458                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1459                                                  ;
1460   
1461  qndsu(Y,P,T,Z,SM)..
1462                                          n_d_su(Y,P,T,Z,SM)
1463                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1464                                          =l=
1465                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1466                                                  - n_d(Y,P,T,Z,SM)
1467                                                  ;
1468   
1469  qndsd(Y,P,T,Z,SM)..
1470                                          n_d_sd(Y,P,T,Z,SM)
1471                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1472                                          =l=
1473                                                  n_d(Y,P,T,Z,SM)
1474                                                  ;
1475   
1476  #--Discharging constraints--#
1477   
1478  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1479                      p_d(Y,P,T+1,Z,SM)
1480                      =e=
1481                          p_d(Y,P,T,Z,SM)
1482                          + ramp_d_up(Y,P,T,Z,SM)
1483                          - ramp_d_dn(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1484                          + ramp_d_su(Y,P,T,Z,SM)
1485                          - ramp_d_sd(Y,P,T,Z,SM)
1486                          ;
1487   
1488  qsmdmin(Y,P,T,Z,SM)..
1489                                          p_d(Y,P,T,Z,SM)
1490                                          =g=
1491                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1492                                                  ;
1493   
1494  qsmdmax(Y,P,T,Z,SM)..
1495                                          p_d(Y,P,T,Z,SM)
1496                                          =l=
1497                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1498                                                  ;
1499   
1500  #--Discharging ramping constraints--#
1501   
1502  qdrudyn(Y,P,T,Z,SM)..
1503                      ramp_d_up(Y,P,T,Z,SM)
1504                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1505                      =l=
1506                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1507                          ;
1508   
1509  qdrucap(Y,P,T,Z,SM)..
1510                      ramp_d_up(Y,P,T,Z,SM)
1511                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1512                      =l=
1513                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1514                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1515                          ;
1516   
1517  qdrddyn(Y,P,T,Z,SM)..
1518                      ramp_d_dn(Y,P,T,Z,SM)
1519                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1520                      =l=
1521                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1522                          ;
1523   
1524  qdrdcap(Y,P,T,Z,SM)..
1525                      ramp_d_dn(Y,P,T,Z,SM)
1526                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1527                      =l=
1528                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1529                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1530                          ;
1531   
1532  qdsumin(Y,P,T,Z,SM)..
1533                                          ramp_d_su(Y,P,T,Z,SM)
1534                                          =g=
1535                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1536                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1537   
1538  qdsumax(Y,P,T,Z,SM)..
1539                                          ramp_d_su(Y,P,T,Z,SM)
1540                                          =l=
1541                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1542                                                  ;
1543   
1544  qdsdmin(Y,P,T,Z,SM)..
1545                                          ramp_d_sd(Y,P,T,Z,SM)
1546                                          =g=
1547                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1548                                                  ;
1549   
1550  qdsdmax(Y,P,T,Z,SM)..
1551                                          ramp_d_sd(Y,P,T,Z,SM)
1552                                          =l=
1553                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1554                                                  ;
1555   
1556  #--Reserve allocation constraints--#
1557   
1558  qdrufu(Y,P,T,Z,SM)..
1559                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1560                      =l=
1561                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1562                          ;
1563   
1564  qdruau(Y,P,T,Z,SM)..
1565                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1566                      =l=
1567                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1568                          ;
1569   
1570  qdrumus(Y,P,T,Z,SM)..
1571                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1572                      =l=
1573                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1574                          ;
1575   
1576  qdrdad(Y,P,T,Z,SM)..
1577                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1578                      =l=
1579                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1580                          ;
1581   
1582  qdrdmd(Y,P,T,Z,SM)..
1583                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1584                      =l=
1585                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1586                          ;
1587   
1588  qdrunsmin(Y,P,T,Z,RU,SM)..
1589                                          res_s_d_ns(Y,P,T,Z,RU,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1590                                          =g=
1591                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1592                                                  ;
1593   
1594  qdrunsmax(Y,P,T,Z,RU,SM)..
1595                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1596                                          =l=
1597                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1598                                                  ;
1599   
1600  qdrdsdmin(Y,P,T,Z,RD,SM)..
1601                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1602                                          =g=
1603                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1604                                                  ;
1605   
1606  qdrdsdmax(Y,P,T,Z,RD,SM)..
1607                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1608                                          =l=
1609                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1610                                                  ;
1611   
1612  #-------Long-term storage------------------------------------------------------#
1613   
1614  #--Discharging reserve allocation--#
1615   
1616  qslressd(Y,P,T,Z,R,SL)..
1617                                          res_s_d(Y,P,T,Z,R,SL)
1618                                          =e=
1619                                                  0
1620                                                  ;
1621   
1622  #--Gas energy balance--#
1623   
1624  qgase(Y,P,C)..
1625                                          eg(Y,P++1,C)
1626                                          =e=
1627                                                  eg(Y,P,C)
1628                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1629                                                  ;
1630   
1631  qgasemax(Y,P,C)..
1632                                          eg(Y,P,C)
1633                                          =l=
1634                                                  E_LP
1635                                                  + eg_cap
1636                                                  ;
1637   
1638  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1639                                          eg_f(Y,P,T+1,C)
1640                                          =e=
1641                                                  eg_f(Y,P,T,C)
1642                                                  + pg_c(Y,P,T,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1643                                                  - pg_d(Y,P,T,C)
1644                                                  ;
1645   
1646  qgasefmax(Y,P,T,C)..
1647                                          eg_f(Y,P,T,C)
1648                                          =l=
1649                                                  E_LP
1650                                                  + eg_cap
1651                                                  ;
1652   
1653  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1654                                          eg_f(Y,P,T,C)
1655                                          =e=
1656                                                  eg(Y,P,C)
1657                                                  ;
1658   
1659  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1660                                          eg_l(Y,P,T+1,C)
1661                                          =e=
1662                                                  eg_l(Y,P,T,C)
1663                                                  + pg_c(Y,P,T,C)
1664                                                  - pg_d(Y,P,T,C)
1665                                                  ;
1666   
1667  qgaselmax(Y,P,T,C)..
1668                                          eg_l(Y,P,T,C)
1669                                          =l=
1670                                                  E_LP
1671                                                  + eg_cap
1672                                                  ;
1673   
1674  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1675                                          eg_l(Y,P,T,C)
1676                                          =e=
1677                                                  eg(Y,P,C)
1678                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1679                                                  ;
1680   
1681  #--Gas charging constraints--#
1682   
1683  qgasc(Y,P,T,C)..
1684                                          pg_c(Y,P,T,C)
1685                                          =e=
1686                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1687                                                  + pg_import(Y,P,T,C)
1688                                                  ;
1689   
1690  #--Gas discharging constraints--#
1691   
1692  qgasd(Y,P,T,C)..
1693                                          pg_d(Y,P,T,C)
1694                                          =e=
1695                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1696                                                  ;
1697   
1698  #--Gas usage--#
1699   
1700  qgasuse(Y,C)..
1701                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1702                                          =l=
1703                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1704                                                  ;
1705   
1706  qgasusegen(Y,P,T,Z,GCG)..
1707                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1708                                          =e=
1709                                                  pg_syn(Y,P,T,Z,GCG)
1710                                                  + pg_fos(Y,P,T,Z,GCG)
1711                                                  ;
1712   
1713  ################################################
1714  ################################################
1715   
1716  demand(P,T,Z)..
1717                                          demand_unit(P,T,Z) =e= DEM_T(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_T(P,T,Z)/P_REF)*(price_unit(P,H,Z)-P_REF))
1718                                          ;
1719   
1720  demand_clone(P,H,Z)..
1721                                          demand_unit_clone(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*DIAG(T,H))
1722                                          ;
1723   
1724  totdemand(P,Z)..
1725                                          sum(T,DEM_T(P,T,Z)) =l= sum(T,demand_unit(P,T,Z))
1726                                          ;
1727   
1728  totdemand2(P,Z)..
1729                                          demand_tot(P,Z) =g= sum(T,demand_unit(P,T,Z))
1730  #                                       demand_tot(P,Z) =e= sum(T,DEM_T(P,T,Z))
1731                                          ;
1732   
1733  #price(P,H,Z)..
1734  #                                       (price_unit(P,H,Z) - P_REF)*sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)) =e= (demand_unit(P,T,Z)-DEM_T(P,T,Z))
1735  #                                       ;
1736   
1737  price_clone(P,T,Z)..
1738                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1739                                          ;
1740   
1741  refdemand(P,T,Z)..
1742                                          demand_ref(P,T,Z) =e= DEM_T(P,T,Z)
1743                                          ;
1744   
1745  shiftedaway(P,H,Z)..
1746                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1747                                          ;
1748   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1749  shiftedawaytotal(P,Z)..
1750                                          shiftaway_total(P,Z) =e= sum(H,shiftaway(P,H,Z))
1751                                          ;
1752   
1753  shiftedforward(P,H,Z)..
1754                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1755                                          ;
1756   
1757  shiftedforwardtotal(P,Z)..
1758                                          shiftforwards_total(P,Z) =e= sum(H,shiftforwards(P,H,Z))
1759                                          ;
1760   
1761  shiftedbackward(P,H,Z)..
1762                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1763                                          ;
1764   
1765  shiftedbackwardtotal(P,Z)..
1766                                          shiftbackwards_total(P,Z) =e= sum(H,shiftbackwards(P,H,Z))
1767                                          ;
1768   
1769  shiftconstraint(P,H,Z)..
1770                                          sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1771                                          ;
1772   
1773  shiftconstraint1(P,H,Z)..
1774                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1775                                          ;
1776   
1777  shiftconstraint2(P,H,Z)..
1778                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
1779                                          ;
1780   
1781  priceconstraint1(P,T,Z)..
1782                                          price_unit_clone(P,T,Z) =l= P_REF + LIMITPRICE
1783                                          ;
1784   
1785  priceconstraint2(P,T,Z)..
1786                                          price_unit_clone(P,T,Z) =g= P_REF - LIMITPRICE
1787                                          ;
1788   
1789  demlimitunder(P,T,Z)..
1790                                          DEM_T(P,T,Z) - LIMITDEM =l= demand_unit(P,T,Z)
1791                                          ;
1792   
1793  demlimitupper(P,T,Z)..
1794                                          DEM_T(P,T,Z) + LIMITDEM =g= demand_unit(P,T,Z)
1795                                          ;
1796   
1797   
1798  #priceconstraint3(P,Z)..
1799  #                                       sum(T,price_unit(P,T,Z))/card(T) =e= P_REF
1800  #                                       ;
1801   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1802   
1803  qinnerframe(P,H,Z)..
1804                                          innerframe(P,H,Z) =e= sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T))
1805                                          ;
1806   
1807  qouterframe(P,H,Z)..
1808                                          outerframe(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1809                                          ;
1810   
1811  fixedcost(Z)..
1812                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1813                                          ;
1814   
1815  variablecost(P,Z)..
1816                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
1817                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1818                                          ;
1819   
1820  cost(Z)..
1821                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
1822                                          ;
1823   
1824  ####################################
1825  # get downwards en upward numbers for front and back
1826  ####################################
1827   
1828  front_d_1(P,H,Z)..
1829                                          front_down(P,H,Z) =l= shiftforwards(P,H,Z)
1830                                          ;
1831   
1832  front_d_2(P,H,Z)..
1833                                          front_down(P,H,Z) =l= 0
1834                                          ;
1835   
1836  front_u_1(P,H,Z)..
1837                                          front_up(P,H,Z) =g= shiftforwards(P,H,Z)
1838                                          ;
1839   
1840  front_u_2(P,H,Z)..
1841                                          front_up(P,H,Z) =g= 0
1842                                          ;
1843   
1844  back_d_1(P,H,Z)..
1845                                          back_down(P,H,Z) =l= shiftbackwards(P,H,Z)
1846                                          ;
1847   
1848  back_d_2(P,H,Z)..
1849                                          back_down(P,H,Z) =l= 0
1850                                          ;
1851   
1852  back_u_1(P,H,Z)..
1853                                          back_up(P,H,Z) =g= shiftbackwards(P,H,Z)
1854                                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1855   
1856  back_u_2(P,H,Z)..
1857                                          back_up(P,H,Z) =g= 0
1858                                          ;
1859   
1860   
1861  MODEL GOA GOA model /
1862   
1863  #-------Objective function-----------------------------------------------------#
1864                  qobj
1865   
1866  #-------System constraints-----------------------------------------------------#
1867                  qbalance
1868   
1869                  qresprod
1870                  qco2lim
1871   
1872                  qresendomin
1873                  qresendomax
1874                  qres
1875   
1876                  #qgendisp
1877                  #qgendisppeak
1878   
1879                  qco2
1880                  qlcg
1881   
1882  #-------Generation technologies------------------------------------------------#
1883                  qpotcapmin
1884  #               qpotcapmax
1885  #               qpotgenmin
1886  #               qpotgenmax
1887   
1888  #--Conventional generation technologies--#
1889                  qresgcu
1890                  qresgcd
1891   
1892                  qn
1893                  qnmax
1894                  qnsu
1895                  qnsd
1896   
1897                  qgen
1898                  qgenmin
1899                  qgenmax
1900   
1901                  qrudyn
1902                  qrucap
1903                  qrddyn
1904                  qrdcap
1905                  qsumin
1906                  qsumax
1907                  qsdmin
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1908                  qsdmax
1909   
1910                  qrufu
1911                  qruau
1912                  qrumus
1913                  qrdad
1914                  qrdmd
1915                  qrunsmin
1916                  qrunsmax
1917                  qrdsdmin
1918                  qrdsdmax
1919   
1920  #--Intermittent renewable generation technologies--#
1921                  qresgru
1922   
1923                  qgenr
1924   
1925                  qresgrdr
1926                  qresgrdg
1927   
1928  #-------Storage technologies---------------------------------------------------#
1929  #--General constraints--#
1930                  qress
1931                  qspotcapmin
1932                  qspotcapmax
1933   
1934                  qe
1935                  qemax
1936                  qef
1937                  qefmin
1938                  qefmax
1939                  qefstart
1940                  qel
1941                  qelmin
1942                  qelmax
1943                  qelstart
1944   
1945                  qdurmin
1946                  qdurmax
1947   
1948  #--Short-term storage--#
1949                  qssc
1950                  qsscru
1951                  qsscrd
1952   
1953                  qssd
1954                  qssdru
1955                  qssdrd
1956   
1957  #--Mid and long-term storage--#
1958                  qresscu
1959                  qresscd
1960                  qressdu
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1961                  qressdd
1962   
1963                  qnc
1964                  qncmax
1965                  qncsu
1966                  qncsd
1967   
1968                  qsmlc
1969                  qsmlcmin
1970                  qsmlcmax
1971   
1972                  qcrudyn
1973                  qcrucap
1974                  qcrddyn
1975                  qcrdcap
1976                  qcsumin
1977                  qcsumax
1978                  qcsdmin
1979                  qcsdmax
1980   
1981                  qcruad
1982                  qcrumd
1983                  qcrdfu
1984                  qcrdau
1985                  qcrdmus
1986                  qcrunsmin
1987                  qcrunsmax
1988                  qcrdsdmin
1989                  qcrdsdmax
1990   
1991  #--Mid-term storage--#
1992                  qcapdeqcapc
1993   
1994                  qnd
1995                  qndmax
1996                  qndsu
1997                  qndsd
1998   
1999                  qsmd
2000                  qsmdmin
2001                  qsmdmax
2002   
2003                  qdrudyn
2004                  qdrucap
2005                  qdrddyn
2006                  qdrdcap
2007                  qdsumin
2008                  qdsumax
2009                  qdsdmin
2010                  qdsdmax
2011   
2012                  qdrufu
2013                  qdruau
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2014                  qdrumus
2015                  qdrdad
2016                  qdrdmd
2017                  qdrunsmin
2018                  qdrunsmax
2019                  qdrdsdmin
2020                  qdrdsdmax
2021   
2022  #--Long-term storage--#
2023                  qslressd
2024   
2025                  qgase
2026                  qgasemax
2027                  qgasef
2028                  qgasefmax
2029                  qgasefstart
2030                  qgasel
2031                  qgaselmax
2032                  qgaselstart
2033   
2034                  qgasc
2035   
2036                  qgasd
2037   
2038                  qgasuse
2039                  qgasusegen
2040   
2041  #-- Price-elasticity--#
2042   
2043  #               price
2044                  price_clone
2045                  demand
2046                  demand_clone
2047                  totdemand
2048                  totdemand2
2049                  refdemand
2050   
2051                  shiftedaway
2052                  shiftedforward
2053                  shiftedbackward
2054   
2055                  shiftedawaytotal
2056                  shiftedforwardtotal
2057                  shiftedbackwardtotal
2058   
2059                  priceconstraint1
2060                  priceconstraint2
2061  #               priceconstraint3
2062  #               shiftconstraint
2063                  shiftconstraint1
2064                  shiftconstraint2
2065   
2066                  qinnerframe
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 41
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2067                  qouterframe
2068   
2069  #               revenue
2070                  fixedcost
2071                  variablecost
2072                  cost
2073   
2074                  demlimitunder
2075                  demlimitupper
2076   
2077                  front_d_1
2078                  front_d_2
2079                  front_u_1
2080                  front_u_2
2081                  back_d_1
2082                  back_d_2
2083                  back_u_1
2084                  back_u_2
2085  /;
2086   
2087   
2088   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 42
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.000 SECONDS      4 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/21/16 12:39:47 Page 43
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.016 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.gms
Output     C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.lst
Save       C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
