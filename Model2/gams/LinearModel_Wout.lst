GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P               Time periods
 233  T               Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)           Dispatchable generation technologies
 237  GC(G)           Conventional generation technologies
 238  GCG(GC)         Gas-fueled conventional generation technologies
 239  GCO(GC)         Other conventional generation technologies
 240  GR(G)           Renewable generation technologies
 241  GRI(GR)         Intermittent renewable generation technologies
 242  GRD(GR)         Dispatchable renewable generation technologies
 243  G_PARAM         Generation technology parameters
 244   
 245  S                       All storage technologies
 246  SSM(S)          Short and Mid-term storage technologies
 247  SML(S)          Mid and Long-term storage technologies
 248  SS(S)           Short-term storage technologies
 249  SM(S)           Mid-term storage technologies
 250  SL(S)           Long-term storage technologies
 251  S_PARAM         Storage technology parameterz
 252   
 253  POL                     Policy instruments
 254   
 255  R                       Reserve requirements
 256  RU(R)           Upward reserve requirements
 257  RD(R)           Downward reserve requirements
 258  RUF(RU)         FCR upward reserve requirements
 259  RUA(RU)         FCR and aFRR upward reserve requirements
 260  RDA(RD)         aFRR downward reserve requirements
 261   
 262  H                       All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)               Technologies characteristics
 288  S_DATA(S,S_PARAM)               Technologies characteristics
 289   
 290  RG(R,GD)                                Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)                              Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)                               Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                                   Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)                Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)                Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)    Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)    Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                                    Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL)  Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)   Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)                  Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)             Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET                                Time step of the market
 312  T_R(R)                  Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                                 Annualized energy investment cost of gas storage
 315  E_LP                                    Energy volume of the gas line pack
 316   
 317  ELAST(T,H)                              Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)                               a matrix to include the controlled hour
 320  TRI_UP(T,H)                             a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)                    a matrix to include the twelve later hours
 322   
 323  P_REF                                   reference price (calculated in advance)
 324  TOTDEM                                  The sum of the demand over all hours
 325  LIMITPRICE                              absolute value of price difference that is allowed
 326  LIMITDEM                                absolute value of max demand shift
 327  LIMITSHIFT                              absolute value of max demand shifted away from an hour with use of elasticities
 328  SHIFTMIN(H,T)                   matrix to constraint shifting of energy inner window
 329  SHIFTMAX(H,T)                   matrix to constraint shifting of energy outer window
 330  LENGTH_P                                the length of the period as programmed in main and init (.py)
 331   
 332  eff_factor_earlier              a factor to include the efficiency of demand shifted to an earlier time
 333  eff_factor_later                a factor to include the efficiency of demand shifted to a later time
 334   
 335  COMPENSATE(P,H)                 a parameter that compensates for energy losses due an elasticity-matrix that is not perfect
 336  ELAST_NEW(P,T,H)
 337  ;
 338   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  G_DATA = 39:G_DATA
 339  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 340  $LOAD S_DATA
--- LOAD  RG = 41:RG
 341  $LOAD RG
--- LOAD  RSC = 42:RSC
 342  $LOAD RSC
--- LOAD  RSD = 43:RSD
 343  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 344  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 345  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 346  $LOAD REL_T
--- LOAD  W = 48:W
 347  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 348  $LOAD POL_TARGETS
 349  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 350  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 351  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 352  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 353  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 354  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 355  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 356  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 58:SHIFTMAX
 357  $LOAD SHIFTMAX
--- LOAD  COMPENSATE = 59:COMPENSATE
 358  $LOAD COMPENSATE
 359   
 360  #C_GAS = 25.6643460843943;
 361  C_GAS = 25.6643460843943*2;
 362  T_MARKET = 1;
 363  EGCAPEX = 2000000000000000000000000;
 364  E_LP = 7100000;
 365  P_REF = 55.5;
 366  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 367  LIMITPRICE = P_REF*0.5;
 368  LIMITDEM = 750;
 369  LIMITSHIFT = 2000;
 370  LENGTH_P = card(T);
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 04/20/16 21:45:49 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 371  #ELAST_NEW(P,T,H) = ELAST(T,H)*DIAG(T,H)+COMPENSATE(P,H)*(TRI_LOW(T,H)*ELAST(T,H)+TRI_UP(T,H)*ELAST(T,H));
 372  ELAST_NEW(P,T,H) = ELAST(T,H)*1;
 373   
 374  eff_factor_earlier = 1;
 375  eff_factor_later = 1;
 376   
 377  VARIABLES
 378  obj                     Value of objective function
 379   
 380  #######################################################
 381   
 382  shiftforwards(P,H,Z)                    Shift towards an earlier moment in time per hour
 383  shiftforwards_total(P,Z)                Shift towards an earlier moment in time per period
 384  shiftbackwards(P,H,Z)                   Shift towards a later moment in time per hour
 385  shiftbackwards_total(P,Z)               Shift towards a later moment in time per period
 386  shiftaway(P,H,Z)                                Shift away from an hour
 387  shiftaway_total(P,Z)                            Shift away from a period
 388  ;
 389   
 390  POSITIVE VARIABLES
 391  #######################################################
 392   
 393  price_unit(P,H,Z)                               Price of the electricity
 394  price_unit_clone(P,T,Z)
 395  demand_unit(P,T,Z)                              demand of the electricity
 396  demand_unit_clone(P,H,Z)
 397  demand_tot(P,Z)                                 total demand, based on demand_unit
 398  demand_ref(P,T,Z)                               the reference demand with flat price
 399  innerframe(P,H,Z)
 400  outerframe(P,H,Z)
 401   
 402  totalrevenue(P,Z)                               the product of demand and price
 403  totalfixedcost(Z)                               the sum of the total investment cost and fixed variable cost
 404  totalvariablecost(P,Z)                  the sum of the variable O&M cost and fuel cost
 405  totalcost(Z)                                    the sum of the totalvariablecost and totalfixedcost
 406   
 407  #######################################################
 408   
 409  cap(Y,Z,G)                                      Generation capacity per year, per zone and per generation technology [MW]
 410  e_cap(Y,Z,S)                            Energy capacity of storage technology S
 411  p_cap_c(Y,Z,S)                          Charging power capacity of storage technology S
 412  p_cap_d(Y,Z,SM)                         Discharging power capacity of storage technology SM
 413  eg_cap                                          Gas storage capacity
 414   
 415  gen(Y,P,T,Z,G)                  Electricity generation per time step, per zone and per generation technology [MWh]
 416  curt(Y,P,T,Z,GRI)                       Curtailment of renewable output
 417   
 418  e(Y,P,Z,S)                              Energy content of storage technology S at period P
 419  e_f(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the first cycle of period P
 420  e_l(Y,P,T,Z,S)                          Energy content of storage technology S at time T during the last cycle of period P
 421  p_c(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 422  p_d(Y,P,T,Z,S)                  Electricity generation per time step, per zone and per generation technology [MWh]
 423  eg(Y,P,C)                                       Energy content of gas storage at period P
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 424  eg_f(Y,P,T,C)                           Energy content of gas storage at time T during the first cycle of period P
 425  eg_l(Y,P,T,C)                           Energy content of gas storage at time T during the last cycle of period P
 426  pg_c(Y,P,T,C)                           Charging of gas storage
 427  pg_d(Y,P,T,C)                           Discharging of gas storage
 428   
 429  res_g(Y,P,T,Z,R,G)                      Reserve allocation of generation technology GD for reserve category R
 430  res_s(Y,P,T,Z,R,S)                      Reserve allocation of storage technology S for reserve category R
 431   
 432  load_shedding(Y,P,T,Z)          Load shedding
 433  q_endo(Y,P,T,C,R,GRI)           Endogenous reserve requirements for category R
 434  co2(Y,C,G)                                      CO2-emissions per year, per zone and per generation technology [kg]
 435  lcg(Y,C,G)                                      Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 436   
 437  res_g_s(Y,P,T,Z,R,GD)           Spinning reserve allocation of generation technology GD for reserve category R
 438  res_g_ns(Y,P,T,Z,RU,GD)         Start-up reserve allocation of generation technology GD for reserve category RU
 439  res_g_sd(Y,P,T,Z,RD,GD)         Shut-down reserve allocation of generation technology GD for reserve category RD
 440   
 441  n(Y,P,T,Z,GD)                           Number of units of each generation technology per year, time step and zone [-]
 442  n_su(Y,P,T,Z,GD)                        Number of units starting up of each generation technology
 443  n_sd(Y,P,T,Z,GD)                        Number of units shutting down of each generation technology
 444  n_su_r(Y,P,T,Z,RU,GD)           Number of units starting up of each generation technology
 445  n_sd_r(Y,P,T,Z,RD,GD)           Number of units shutting down of each generation technology
 446   
 447  ramp_up(Y,P,T,Z,GD)                     Increase in output by ramping up
 448  ramp_dn(Y,P,T,Z,GD)                     Decrease in output by ramping down
 449  ramp_su(Y,P,T,Z,GD)                     Increase in output by starting up additional units
 450  ramp_sd(Y,P,T,Z,GD)                     Decrease in output by shutting down units
 451   
 452  curt_dummy(Y,P,T,Z,GRI)         Dummy variable in case RES objective cannot be reached
 453   
 454  res_s_c(Y,P,T,Z,R,S)            Reserve allocation of charging storage technology S for reserve category R
 455  res_s_c_s(Y,P,T,Z,R,SML)        Spinning reserve allocation of charging storage technology SML for reserve category R
 456  res_s_c_ns(Y,P,T,Z,RD,SML)      Start-up reserve allocation of charging storage technology SML for reserve category RD
 457  res_s_c_sd(Y,P,T,Z,RU,SML)      Shut-down reserve allocation of charging storage technology SML for reserve category RU
 458  res_s_d(Y,P,T,Z,R,S)            Reserve allocation of discharging storage technology S for reserve category R
 459  res_s_d_s(Y,P,T,Z,R,SM)         Spinning reserve allocation of discharging storage technology SM for reserve category R
 460  res_s_d_ns(Y,P,T,Z,RU,SM)       Start-up reserve allocation of discharging storage technology SM for reserve category RU
 461  res_s_d_sd(Y,P,T,Z,RD,SM)       Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 462   
 463  n_c(Y,P,T,Z,SML)                        Number of units of each generation technology per year, time step and zone [-]
 464  n_c_su(Y,P,T,Z,SML)                     Number of units starting up of each generation technology
 465  n_c_sd(Y,P,T,Z,SML)                     Number of units shutting down of each generation technology
 466  n_c_su_r(Y,P,T,Z,RD,SML)        Number of units starting up of each generation technology
 467  n_c_sd_r(Y,P,T,Z,RU,SML)        Number of units shutting down of each generation technology
 468   
 469  ramp_c_up(Y,P,T,Z,S)            Increase in output by ramping up
 470  ramp_c_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 471  ramp_c_su(Y,P,T,Z,SML)          Increase in output by starting up additional units
 472  ramp_c_sd(Y,P,T,Z,SML)          Decrease in output by shutting down units
 473   
 474  n_d(Y,P,T,Z,SM)                         Number of units of each generation technology per year, time step and zone [-]
 475  n_d_su(Y,P,T,Z,SM)                      Number of units starting up of each generation technology
 476  n_d_sd(Y,P,T,Z,SM)                      Number of units shutting down of each generation technology
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 477  n_d_su_r(Y,P,T,Z,RU,SM)         Number of units starting up of each generation technology
 478  n_d_sd_r(Y,P,T,Z,RD,SM)         Number of units shutting down of each generation technology
 479   
 480  ramp_d_up(Y,P,T,Z,S)            Increase in output by ramping up
 481  ramp_d_dn(Y,P,T,Z,S)            Decrease in output by ramping down
 482  ramp_d_su(Y,P,T,Z,SM)           Increase in output by starting up additional units
 483  ramp_d_sd(Y,P,T,Z,SM)           Decrease in output by shutting down units
 484   
 485  pg_import(Y,P,T,C)                      Import of gas
 486  pg_syn(Y,P,T,Z,GCG)                     Use of synthetic gas in gas-fueled conventional generation technologies GCG
 487  pg_fos(Y,P,T,Z,GCG)                     Use of natural gas in gas-fueled conventional generation technologies GCG
 488   
 489  ;
 490   
 491  EQUATIONS
 492  #--Objective function--#
 493  qobj
 494   
 495  #--System constraints--#
 496  qbalance(Y,P,T,Z)
 497  qresprod(Y,C)
 498  qco2lim(Y,C)
 499  qresendomin(Y,P,T,C,R,GRI)
 500  qresendomax(Y,P,T,C,R,GRI)
 501  qres(Y,P,T,C,R)
 502  qgendisp(Y,P,T,C)
 503  qgendisppeak(Y,C)
 504  qco2(Y,C,G)
 505  qlcg(Y,C,G)
 506   
 507  #--Generation technologies--#
 508  qpotcapmin(Y,C,G)
 509  #qpotcapmax(Y,C,G)
 510  #qpotgenmin(Y,C,G)
 511  #qpotgenmax(Y,C,G)
 512   
 513  qresgcu(Y,P,T,Z,RU,GD)
 514  qresgcd(Y,P,T,Z,RD,GD)
 515  qn(Y,P,T,Z,GD)
 516  qnmax(Y,P,T,Z,GD)
 517  qnsu(Y,P,T,Z,GD)
 518  qnsd(Y,P,T,Z,GD)
 519  qgen(Y,P,T,Z,GD)
 520  qgenmin(Y,P,T,Z,GD)
 521  qgenmax(Y,P,T,Z,GD)
 522  qrudyn(Y,P,T,Z,GD)
 523  qrucap(Y,P,T,Z,GD)
 524  qrddyn(Y,P,T,Z,GD)
 525  qrdcap(Y,P,T,Z,GD)
 526  qsumin(Y,P,T,Z,GD)
 527  qsumax(Y,P,T,Z,GD)
 528  qsdmin(Y,P,T,Z,GD)
 529  qsdmax(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 530  qrufu(Y,P,T,Z,GD)
 531  qruau(Y,P,T,Z,GD)
 532  qrumus(Y,P,T,Z,GD)
 533  qrdad(Y,P,T,Z,GD)
 534  qrdmd(Y,P,T,Z,GD)
 535  qrunsmin(Y,P,T,Z,RU,GD)
 536  qrunsmax(Y,P,T,Z,RU,GD)
 537  qrdsdmin(Y,P,T,Z,RD,GD)
 538  qrdsdmax(Y,P,T,Z,RD,GD)
 539   
 540  qresgru(Y,P,T,Z,RU,GRI)
 541  qgenr(Y,P,T,Z,GRI)
 542  qresgrdr(Y,P,T,Z,GRI)
 543  qresgrdg(Y,P,T,Z,GRI)
 544   
 545  #--Storage technologies--#
 546  qress(Y,P,T,Z,R,S)
 547  qspotcapmin(Y,C,S)
 548  qspotcapmax(Y,C,S)
 549   
 550  qe(Y,P,Z,S)
 551  qemax(Y,P,Z,S)
 552  qef(Y,P,T,Z,S)
 553  qefmin(Y,P,T,Z,S)
 554  qefmax(Y,P,T,Z,S)
 555  qefstart(Y,P,T,Z,S)
 556  qel(Y,P,T,Z,S)
 557  qelmin(Y,P,T,Z,S)
 558  qelmax(Y,P,T,Z,S)
 559  qelstart(Y,P,T,Z,S)
 560  qdurmin(Y,Z,S)
 561  qdurmax(Y,Z,S)
 562   
 563  qssc(Y,P,T,Z,SS)
 564  qsscru(Y,P,T,Z,SS)
 565  qsscrd(Y,P,T,Z,SS)
 566  qssd(Y,P,T,Z,SS)
 567  qssdru(Y,P,T,Z,SS)
 568  qssdrd(Y,P,T,Z,SS)
 569   
 570  qresscu(Y,P,T,Z,RU,SML)
 571  qresscd(Y,P,T,Z,RD,SML)
 572  qressdu(Y,P,T,Z,RU,SM)
 573  qressdd(Y,P,T,Z,RD,SM)
 574  qnc(Y,P,T,Z,SML)
 575  qncmax(Y,P,T,Z,SML)
 576  qncsu(Y,P,T,Z,SML)
 577  qncsd(Y,P,T,Z,SML)
 578  qsmlc(Y,P,T,Z,SML)
 579  qsmlcmin(Y,P,T,Z,SML)
 580  qsmlcmax(Y,P,T,Z,SML)
 581  qcrudyn(Y,P,T,Z,SML)
 582  qcrucap(Y,P,T,Z,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 583  qcrddyn(Y,P,T,Z,SML)
 584  qcrdcap(Y,P,T,Z,SML)
 585  qcsumin(Y,P,T,Z,SML)
 586  qcsumax(Y,P,T,Z,SML)
 587  qcsdmin(Y,P,T,Z,SML)
 588  qcsdmax(Y,P,T,Z,SML)
 589  qcruad(Y,P,T,Z,SML)
 590  qcrumd(Y,P,T,Z,SML)
 591  qcrdfu(Y,P,T,Z,SML)
 592  qcrdau(Y,P,T,Z,SML)
 593  qcrdmus(Y,P,T,Z,SML)
 594  qcrunsmin(Y,P,T,Z,RD,SML)
 595  qcrunsmax(Y,P,T,Z,RD,SML)
 596  qcrdsdmin(Y,P,T,Z,RU,SML)
 597  qcrdsdmax(Y,P,T,Z,RU,SML)
 598   
 599  qcapdeqcapc(Y,Z,SM)
 600  qnd(Y,P,T,Z,SM)
 601  qndmax(Y,P,T,Z,SM)
 602  qndsu(Y,P,T,Z,SM)
 603  qndsd(Y,P,T,Z,SM)
 604  qsmd(Y,P,T,Z,SM)
 605  qsmdmin(Y,P,T,Z,SM)
 606  qsmdmax(Y,P,T,Z,SM)
 607  qdrudyn(Y,P,T,Z,SM)
 608  qdrucap(Y,P,T,Z,SM)
 609  qdrddyn(Y,P,T,Z,SM)
 610  qdrdcap(Y,P,T,Z,SM)
 611  qdsumin(Y,P,T,Z,SM)
 612  qdsumax(Y,P,T,Z,SM)
 613  qdsdmin(Y,P,T,Z,SM)
 614  qdsdmax(Y,P,T,Z,SM)
 615  qdrufu(Y,P,T,Z,SM)
 616  qdruau(Y,P,T,Z,SM)
 617  qdrumus(Y,P,T,Z,SM)
 618  qdrdad(Y,P,T,Z,SM)
 619  qdrdmd(Y,P,T,Z,SM)
 620  qdrunsmin(Y,P,T,Z,RU,SM)
 621  qdrunsmax(Y,P,T,Z,RU,SM)
 622  qdrdsdmin(Y,P,T,Z,RD,SM)
 623  qdrdsdmax(Y,P,T,Z,RD,SM)
 624   
 625  qslressd(Y,P,T,Z,R,SL)
 626  qgase(Y,P,C)
 627  qgasemax(Y,P,C)
 628  qgasef(Y,P,T,C)
 629  qgasefmax(Y,P,T,C)
 630  qgasefstart(Y,P,T,C)
 631  qgasel(Y,P,T,C)
 632  qgaselmax(Y,P,T,C)
 633  qgaselstart(Y,P,T,C)
 634  qgasc(Y,P,T,C)
 635  qgasd(Y,P,T,C)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 636  qgasuse(Y,C)
 637  qgasusegen(Y,P,T,Z,GCG)
 638   
 639  ###############################
 640  #price(P,H,Z)
 641  price_clone(P,T,Z)
 642  demand(P,T,Z)
 643  demand_clone(P,H,Z)
 644  totdemand(P,Z)
 645  totdemand2(P,Z)
 646  refdemand(P,T,Z)
 647  refdemand2(Z)
 648  priceconstraint1(P,T,Z)
 649  priceconstraint2(P,T,Z)
 650  priceconstraint3(P,Z)
 651  shiftconstraint(P,H,Z)
 652  shiftconstraint1(P,H,Z)
 653  shiftconstraint2(P,H,Z)
 654  shiftedforward(P,H,Z)
 655  shiftedforwardtotal(P,Z)
 656  shiftedbackward(P,H,Z)
 657  shiftedbackwardtotal(P,Z)
 658  shiftedaway(P,H,Z)
 659  shiftedawaytotal(P,Z)
 660   
 661  qinnerframe(P,H,Z)
 662  qouterframe(P,H,Z)
 663   
 664  revenue(P,Z)
 665  fixedcost(Z)
 666  variablecost(P,Z)
 667  cost(Z)
 668   
 669  demlimitunder(P,T,Z)
 670  demlimitupper(P,T,Z)
 671  ;
 672   
 673  #-----######################---------------------------------------------------#
 674  #-----# Objective function #---------------------------------------------------#
 675  #-----######################---------------------------------------------------#
 676  qobj..              obj
 677                                          =e=
 678                                                  sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 679                                                  #+ sum((Y,Z,S),      (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 680                                                  +
 681                                                  (sum((Y,P,T,Z,G),               W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 682                                                  + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 683   
 684                                                  #+ sum((Y,P,T,Z,S),             W(P)*(S_DATA(S,'OPEX'))*p_c(Y,P,T,Z,S)+p_d(Y,P,T,Z,S))
 685   
 686                                                  )
 687                                                  *(168/card(T));
 688                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 689   
 690   
 691   
 692   
 693  #-----######################---------------------------------------------------#
 694  #-----# System constraints #---------------------------------------------------#
 695  #-----######################---------------------------------------------------#
 696   
 697  #--System balance--#
 698   
 699  # balance with demand response
 700  qbalance(Y,P,T,Z)..
 701                                  sum(G, gen(Y,P,T,Z,G))
 702                                  #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 703                                          =e=
 704                                                  demand_unit(P,T,Z)
 705  #                                               - load_shedding(Y,P,T,Z)
 706                                                  #+ sum(S, p_c(Y,P,T,Z,S))
 707                                                  ;
 708   
 709  #balance without demand response
 710  #qbalance(Y,P,T,Z)..
 711  #                               sum(G, gen(Y,P,T,Z,G))
 712  #                                       #+ sum(SSM, p_d(Y,P,T,Z,SSM))
 713  #                                       =e=
 714  #                                               DEM_T(P,T,Z)
 715  #                                       #       - load_shedding(Y,P,T,Z)
 716  #                                       #       + sum(S, p_c(Y,P,T,Z,S))
 717  #                                               ;
 718  #DEM(Y,Z)*DEM_T(T,Z);
 719   
 720  #--Renewable target--#
 721   
 722  #qresprod(Y,C)..
 723  #                                       sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 724  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 725  #                                       =l=
 726  #                                               (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 727  #                                               ;
 728   
 729  qresprod(Y,C)..
 730                                          sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 731                                          =g=
 732                                                  POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*DEM_T(P,T,Z)))
 733                                                  ;
 734   
 735  qco2lim(Y,C)..
 736  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 737  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 738                                          sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 739                                          =l=
 740                                                  50000000*0.4
 741                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 742   
 743  #--Reserve requirements--#
 744   
 745  qresendomin(Y,P,T,C,R,GRI)..
 746                                          q_endo(Y,P,T,C,R,GRI)
 747                                          =g=
 748                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 749                                                  ;
 750   
 751  qresendomax(Y,P,T,C,R,GRI)..
 752                                          q_endo(Y,P,T,C,R,GRI)
 753                                          =l=
 754                                                  R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 755                                                  ;
 756   
 757   
 758  qres(Y,P,T,C,R)..
 759                                          sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 760                                          + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 761                                          =e=
 762                                                  R_EXO(C,R)
 763                                                  + sum(GRI, q_endo(Y,P,T,C,R,GRI))
 764                                                  ;
 765   
 766  #--Dispatchable capacity--#
 767   
 768  qgendisp(Y,P,T,C)..
 769                                          sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 770                                          =g=
 771                                                  sum(Z $ C_Z(C,Z), DEM_T(P,T,Z))*0.20
 772                                                  ;
 773   
 774  qgendisppeak(Y,C)..
 775                                          sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 776                                          =g=
 777                                                  10000*1.20
 778                                                  ;
 779   
 780  #--Emissions--#
 781   
 782  qco2(Y,C,G)..
 783                                          co2(Y,C,G)
 784                                          =e=
 785                                                  sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 786                                                  ;
 787   
 788  qlcg(Y,C,G)..
 789                                          lcg(Y,C,G)
 790                                          =e=
 791                                                  sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 792                                                  ;
 793   
 794   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 795  #-----###########################----------------------------------------------#
 796  #-----# Generation technologies #----------------------------------------------#
 797  #-----###########################----------------------------------------------#
 798   
 799  ##--Installed generation capacities--#
 800   
 801  qpotcapmin(Y,C,G)..
 802                                          sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 803                                          =g=
 804                                                  G_DATA(G,'CAP_MIN')
 805                                                  ;
 806   
 807  #qpotcapmax(Y,C,G)..
 808  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 809  #                                       =g=
 810  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 811  #                                               ;
 812  #
 813  #qpotgenmin(Y,C,G)..
 814  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 815  #                                       =g=
 816  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 817  #                                               ;
 818  #
 819  #qpotgenmax(Y,Z,G)..
 820  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 821  #                                       =g=
 822  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 823  #                                               ;
 824   
 825  #-------Dispatchable generation technologies-----------------------------------#
 826   
 827  #--Reserve allocation--#
 828   
 829  qresgcu(Y,P,T,Z,RU,GD)..
 830                                          res_g(Y,P,T,Z,RU,GD)
 831                                          =e=
 832                                                  res_g_s(Y,P,T,Z,RU,GD)
 833                                                  + res_g_ns(Y,P,T,Z,RU,GD)
 834                                                  ;
 835   
 836  qresgcd(Y,P,T,Z,RD,GD)..
 837                                          res_g(Y,P,T,Z,RD,GD)
 838                                          =e=
 839                                                  res_g_s(Y,P,T,Z,RD,GD)
 840                                                  + res_g_sd(Y,P,T,Z,RD,GD)
 841                                                  ;
 842   
 843  #--Clustering logical constraints--#
 844   
 845  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 846                                          n(Y,P,T+1,Z,GD)
 847                                          =e=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 848                                                  n(Y,P,T,Z,GD)
 849                                                  + n_su(Y,P,T,Z,GD)
 850                                                  - n_sd(Y,P,T,Z,GD)
 851                                                  ;
 852   
 853  qnmax(Y,P,T,Z,GD)..
 854                                          n(Y,P,T,Z,GD)
 855                                          =l=
 856                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 857                                                  ;
 858   
 859  qnsu(Y,P,T,Z,GD)..
 860                                          n_su(Y,P,T,Z,GD)
 861                                          + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 862                                          =l=
 863                                                  cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 864                                                  - n(Y,P,T,Z,GD)
 865                                                  - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 866                                                  ;
 867   
 868  qnsd(Y,P,T,Z,GD)..
 869                                          n_sd(Y,P,T,Z,GD)
 870                                          + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 871                                          =l=
 872                                                  n(Y,P,T,Z,GD)
 873                                                  - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 874                                                  ;
 875   
 876  #--Generation constraints--#
 877   
 878  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 879                      gen(Y,P,T+1,Z,GD)
 880                      =e=
 881                          gen(Y,P,T,Z,GD)
 882                          + ramp_up(Y,P,T,Z,GD)
 883                          - ramp_dn(Y,P,T,Z,GD)
 884                          + ramp_su(Y,P,T,Z,GD)
 885                          - ramp_sd(Y,P,T,Z,GD)
 886                          ;
 887   
 888  qgenmin(Y,P,T,Z,GD)..
 889                                          gen(Y,P,T,Z,GD)
 890                                          =g=
 891                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 892                                                  ;
 893   
 894  qgenmax(Y,P,T,Z,GD)..
 895                                          gen(Y,P,T,Z,GD)
 896                                          =l=
 897                                                  n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 898                                                  ;
 899                                                  #*G_DATA(G,'PM')/100;
 900   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 901  #--Ramping constraints--#
 902   
 903  qrudyn(Y,P,T,Z,GD)..
 904                      ramp_up(Y,P,T,Z,GD)
 905                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 906                      =l=
 907                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 908                          ;
 909   
 910  qrucap(Y,P,T,Z,GD)..
 911                      ramp_up(Y,P,T,Z,GD)
 912                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 913                      =l=
 914                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
 915                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
 916                          ;
 917   
 918  qrddyn(Y,P,T,Z,GD)..
 919                      ramp_dn(Y,P,T,Z,GD)
 920                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 921                      =l=
 922                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 923                          ;
 924   
 925  qrdcap(Y,P,T,Z,GD)..
 926                      ramp_dn(Y,P,T,Z,GD)
 927                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 928                      =l=
 929                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
 930                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
 931                          ;
 932   
 933  qsumin(Y,P,T,Z,GD)..
 934                                          ramp_su(Y,P,T,Z,GD)
 935                                          =g=
 936                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 937                                                  ;
 938   
 939  qsumax(Y,P,T,Z,GD)..
 940                                          ramp_su(Y,P,T,Z,GD)
 941                                          =l=
 942                                                  n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 943                                                  ;
 944   
 945  qsdmin(Y,P,T,Z,GD)..
 946                                          ramp_sd(Y,P,T,Z,GD)
 947                                          =g=
 948                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 949                                                  ;
 950   
 951  qsdmax(Y,P,T,Z,GD)..
 952                                          ramp_sd(Y,P,T,Z,GD)
 953                                          =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 954                                                  n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 955                                                  ;
 956   
 957  #--Reserve allocation constraints--#
 958   
 959  qrufu(Y,P,T,Z,GD)..
 960                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
 961                      =l=
 962                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
 963                          ;
 964   
 965  qruau(Y,P,T,Z,GD)..
 966                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
 967                      =l=
 968                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 969                          ;
 970   
 971  qrumus(Y,P,T,Z,GD)..
 972                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 973                      =l=
 974                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 975                          ;
 976   
 977  qrdad(Y,P,T,Z,GD)..
 978                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
 979                      =l=
 980                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
 981                          ;
 982   
 983  qrdmd(Y,P,T,Z,GD)..
 984                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 985                      =l=
 986                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
 987                          ;
 988   
 989  qrunsmin(Y,P,T,Z,RU,GD)..
 990                                          res_g_ns(Y,P,T,Z,RU,GD)
 991                                          =g=
 992                                                  n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
 993                                                  ;
 994   
 995  qrunsmax(Y,P,T,Z,RU,GD)..
 996                                          res_g_ns(Y,P,T,Z,RU,GD)
 997                                          =l=
 998                                                  n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
 999                                                  ;
1000   
1001  qrdsdmin(Y,P,T,Z,RD,GD)..
1002                                          res_g_sd(Y,P,T,Z,RD,GD)
1003                                          =g=
1004                                                  n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1005                                                  ;
1006   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1007  qrdsdmax(Y,P,T,Z,RD,GD)..
1008                                          res_g_sd(Y,P,T,Z,RD,GD)
1009                                          =l=
1010                                                  n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1011                                                  ;
1012   
1013  #-------Intermittent renewable generation technologies-------------------------#
1014   
1015  #--Reserve allocation--#
1016   
1017  qresgru(Y,P,T,Z,RU,GRI)..
1018                                          res_g(Y,P,T,Z,RU,GRI)
1019                                          =e=
1020                                                  0
1021                                                  ;
1022   
1023  #--Output and curtailment constraint--#
1024   
1025  qgenr(Y,P,T,Z,GRI)..
1026                      gen(Y,P,T,Z,GRI)
1027                      + curt(Y,P,T,Z,GRI)
1028                      + curt_dummy(Y,P,T,Z,GRI)
1029                      =e=
1030                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1031                          ;
1032   
1033  #--Reserve allocation constraints--#
1034   
1035  qresgrdr(Y,P,T,Z,GRI)..
1036                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1037                                          =l=
1038                                                  cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1039                                                  ;
1040   
1041  qresgrdg(Y,P,T,Z,GRI)..
1042                                          sum(RD, res_g(Y,P,T,Z,RD,GRI))
1043                                          =l=
1044                                                  gen(Y,P,T,Z,GRI)
1045                                                  ;
1046   
1047  #-----########################-------------------------------------------------#
1048  #-----# Storage technologies #-------------------------------------------------#
1049  #-----########################-------------------------------------------------#
1050   
1051  #-------General constraints----------------------------------------------------#
1052   
1053  #--Reserve allocation--#
1054   
1055  qress(Y,P,T,Z,R,S)..
1056                                          res_s(Y,P,T,Z,R,S)
1057                                          =e=
1058                                                  res_s_c(Y,P,T,Z,R,S)
1059                                                  + res_s_d(Y,P,T,Z,R,S)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1060                                                  ;
1061   
1062  #--Installed capacities--#
1063   
1064  qspotcapmin(Y,C,S)..
1065                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1066                                          =g=
1067                                                  S_DATA(S,'CAP_MIN')
1068                                                  ;
1069   
1070  qspotcapmax(Y,C,S)..
1071                                          sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1072                                          =l=
1073                                                  S_DATA(S,'CAP_MAX')
1074                                                  ;
1075   
1076  #-------Short- and mid-term storage--------------------------------------------#
1077   
1078  #--Energy constraints--#
1079   
1080  qe(Y,P,Z,SSM)..
1081                                          e(Y,P++1,Z,SSM)
1082                                          =e=
1083                                                  e(Y,P,Z,SSM)
1084                                                  + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1085                                                  ;
1086   
1087  qemax(Y,P,Z,SSM)..
1088                                          e(Y,P,Z,SSM)
1089                                          =l=
1090                                                  e_cap(Y,Z,SSM)
1091                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1092                                                  ;
1093   
1094  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1095                                          e_f(Y,P,T,Z,SSM)
1096                                          =e=
1097                                                  e(Y,P,Z,SSM)
1098                                                  ;
1099   
1100  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1101                                          e_f(Y,P,T+1,Z,SSM)
1102                                          =e=
1103                                                  e_f(Y,P,T,Z,SSM)
1104                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1105                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1106                                                  ;
1107   
1108  qefmin(Y,P,T,Z,SSM)..
1109                                          e_f(Y,P,T,Z,SSM)
1110                                          =g=
1111                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1112                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1113                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1114                                                  ;
1115  qefmax(Y,P,T,Z,SSM)..
1116                                          e_f(Y,P,T,Z,SSM)
1117                                          =l=
1118                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1119                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1120                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1121                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1122                                                  ;
1123   
1124  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1125                                          e_l(Y,P,T,Z,SSM)
1126                                          =e=
1127                                                  e(Y,P,Z,SSM)
1128                                                  + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1129                                                  ;
1130   
1131  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1132                                          e_l(Y,P,T+1,Z,SSM)
1133                                          =e=
1134                                                  e_l(Y,P,T,Z,SSM)
1135                                                  + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1136                                                  - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1137                                                  ;
1138   
1139  qelmin(Y,P,T,Z,SSM)..
1140                                          e_l(Y,P,T,Z,SSM)
1141                                          =g=
1142                                                  1/(S_DATA(SSM,'EFF_D')/100)*
1143                                                  (p_d(Y,P,T,Z,SSM)*T_MARKET
1144                                                  + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1145                                                  ;
1146  qelmax(Y,P,T,Z,SSM)..
1147                                          e_l(Y,P,T,Z,SSM)
1148                                          =l=
1149                                                  e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1150                                                  #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1151                                                  (p_c(Y,P,T,Z,SSM)*T_MARKET
1152                                                  + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1153                                                  ;
1154   
1155  #--Duration limits--#
1156   
1157  qdurmin(Y,Z,SSM)..
1158                                          e_cap(Y,Z,SSM)
1159                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1160                                          =g=
1161                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1162                                                  ;
1163   
1164  qdurmax(Y,Z,SSM)..
1165                                          e_cap(Y,Z,SSM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1166                                          #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1167                                          =l=
1168                                                  p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1169                                                  ;
1170   
1171  #-------Short-term storage-----------------------------------------------------#
1172   
1173  #--Charging constraints--#
1174   
1175  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1176                                          p_c(Y,P,T+1,Z,SS)
1177                                          =e=
1178                                                  p_c(Y,P,T,Z,SS)
1179                                                  + ramp_c_up(Y,P,T,Z,SS)
1180                          - ramp_c_dn(Y,P,T,Z,SS)
1181                          ;
1182   
1183  qsscru(Y,P,T,Z,SS)..
1184                      ramp_c_up(Y,P,T,Z,SS)
1185                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1186                      =l=
1187                          p_cap_c(Y,Z,SS)
1188                          - p_c(Y,P,T,Z,SS)
1189                          ;
1190   
1191  qsscrd(Y,P,T,Z,SS)..
1192                      ramp_c_dn(Y,P,T,Z,SS)
1193                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1194                      =l=
1195                          p_c(Y,P,T,Z,SS)
1196                          ;
1197   
1198  #--Discharging constraints--#
1199   
1200  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1201                          p_d(Y,P,T+1,Z,SS)
1202                          =e=
1203                                  p_d(Y,P,T,Z,SS)
1204                                  + ramp_d_up(Y,P,T,Z,SS)
1205                          - ramp_d_dn(Y,P,T,Z,SS)
1206                          ;
1207   
1208  qssdru(Y,P,T,Z,SS)..
1209                      ramp_d_up(Y,P,T,Z,SS)
1210                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1211                      =l=
1212                          p_cap_c(Y,Z,SS)
1213                          - p_d(Y,P,T,Z,SS)
1214                          ;
1215   
1216  qssdrd(Y,P,T,Z,SS)..
1217                      ramp_d_dn(Y,P,T,Z,SS)
1218                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1219                      =l=
1220                          p_d(Y,P,T,Z,SS)
1221                          ;
1222   
1223  #-------Mid and long-term storage----------------------------------------------#
1224   
1225  #--Reserve allocation--#
1226   
1227  qresscu(Y,P,T,Z,RU,SML)..
1228                                          res_s_c(Y,P,T,Z,RU,SML)
1229                                          =e=
1230                                                  res_s_c_s(Y,P,T,Z,RU,SML)
1231                                                  + res_s_c_sd(Y,P,T,Z,RU,SML)
1232                                                  ;
1233   
1234  qresscd(Y,P,T,Z,RD,SML)..
1235                                          res_s_c(Y,P,T,Z,RD,SML)
1236                                          =e=
1237                                                  res_s_c_s(Y,P,T,Z,RD,SML)
1238                                                  + res_s_c_ns(Y,P,T,Z,RD,SML)
1239                                                  ;
1240   
1241  qressdu(Y,P,T,Z,RU,SM)..
1242                                          res_s_d(Y,P,T,Z,RU,SM)
1243                                          =e=
1244                                                  res_s_d_s(Y,P,T,Z,RU,SM)
1245                                                  + res_s_d_ns(Y,P,T,Z,RU,SM)
1246                                                  ;
1247   
1248  qressdd(Y,P,T,Z,RD,SM)..
1249                                          res_s_d(Y,P,T,Z,RD,SM)
1250                                          =e=
1251                                                  res_s_d_s(Y,P,T,Z,RD,SM)
1252                                                  + res_s_d_sd(Y,P,T,Z,RD,SM)
1253                                                  ;
1254   
1255  #--Charging logical constraints--#
1256   
1257  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1258                                          n_c(Y,P,T+1,Z,SML)
1259                                          =e=
1260                                                  n_c(Y,P,T,Z,SML)
1261                                                  + n_c_su(Y,P,T,Z,SML)
1262                                                  - n_c_sd(Y,P,T,Z,SML)
1263                                                  ;
1264   
1265  qncmax(Y,P,T,Z,SML)..
1266                                          n_c(Y,P,T,Z,SML)
1267                                          =l=
1268                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1269                                                  ;
1270   
1271  qncsu(Y,P,T,Z,SML)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1272                                          n_c_su(Y,P,T,Z,SML)
1273                                          + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1274                                          =l=
1275                                                  p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1276                                                  - n_c(Y,P,T,Z,SML)
1277                                                  ;
1278   
1279  qncsd(Y,P,T,Z,SML)..
1280                                          n_c_sd(Y,P,T,Z,SML)
1281                                          + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1282                                          =l=
1283                                                  n_c(Y,P,T,Z,SML)
1284                                                  ;
1285   
1286  #--Charging constraints--#
1287   
1288  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1289                      p_c(Y,P,T+1,Z,SML)
1290                      =e=
1291                          p_c(Y,P,T,Z,SML)
1292                          + ramp_c_up(Y,P,T,Z,SML)
1293                          - ramp_c_dn(Y,P,T,Z,SML)
1294                          + ramp_c_su(Y,P,T,Z,SML)
1295                          - ramp_c_sd(Y,P,T,Z,SML)
1296                          ;
1297   
1298  qsmlcmin(Y,P,T,Z,SML)..
1299                                          p_c(Y,P,T,Z,SML)
1300                                          =g=
1301                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1302                                                  ;
1303   
1304  qsmlcmax(Y,P,T,Z,SML)..
1305                                          p_c(Y,P,T,Z,SML)
1306                                          =l=
1307                                                  n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1308                                                  ;
1309   
1310  #--Charging ramping constraints--#
1311   
1312  qcrudyn(Y,P,T,Z,SML)..
1313                      ramp_c_up(Y,P,T,Z,SML)
1314                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1315                      =l=
1316                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1317                          ;
1318   
1319  qcrucap(Y,P,T,Z,SML)..
1320                      ramp_c_up(Y,P,T,Z,SML)
1321                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1322                      =l=
1323                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1324                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1325                          ;
1326   
1327  qcrddyn(Y,P,T,Z,SML)..
1328                      ramp_c_dn(Y,P,T,Z,SML)
1329                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1330                      =l=
1331                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1332                          ;
1333   
1334  qcrdcap(Y,P,T,Z,SML)..
1335                      ramp_c_dn(Y,P,T,Z,SML)
1336                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1337                      =l=
1338                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1339                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1340                          ;
1341   
1342  qcsumin(Y,P,T,Z,SML)..
1343                                          ramp_c_su(Y,P,T,Z,SML)
1344                                          =g=
1345                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1346                                                  ;
1347   
1348  qcsumax(Y,P,T,Z,SML)..
1349                                          ramp_c_su(Y,P,T,Z,SML)
1350                                          =l=
1351                                                  n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1352                                                  ;
1353   
1354  qcsdmin(Y,P,T,Z,SML)..
1355                                          ramp_c_sd(Y,P,T,Z,SML)
1356                                          =g=
1357                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1358                                                  ;
1359   
1360  qcsdmax(Y,P,T,Z,SML)..
1361                                          ramp_c_sd(Y,P,T,Z,SML)
1362                                          =l=
1363                                                  n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1364                                                  ;
1365   
1366  #--Reserve allocation constraints--#
1367   
1368  qcruad(Y,P,T,Z,SML)..
1369                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1370                      =l=
1371                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1372                          ;
1373   
1374  qcrumd(Y,P,T,Z,SML)..
1375                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1376                      =l=
1377                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1378                          ;
1379   
1380  qcrdfu(Y,P,T,Z,SML)..
1381                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1382                      =l=
1383                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1384                          ;
1385   
1386  qcrdau(Y,P,T,Z,SML)..
1387                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1388                      =l=
1389                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1390                          ;
1391   
1392  qcrdmus(Y,P,T,Z,SML)..
1393                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1394                      =l=
1395                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1396                          ;
1397   
1398  qcrunsmin(Y,P,T,Z,RD,SML)..
1399                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1400                                          =g=
1401                                                  n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1402                                                  ;
1403   
1404  qcrunsmax(Y,P,T,Z,RD,SML)..
1405                                          res_s_c_ns(Y,P,T,Z,RD,SML)
1406                                          =l=
1407                                                  n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1408                                                  ;
1409   
1410  qcrdsdmin(Y,P,T,Z,RU,SML)..
1411                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1412                                          =g=
1413                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1414                                                  ;
1415   
1416  qcrdsdmax(Y,P,T,Z,RU,SML)..
1417                                          res_s_c_sd(Y,P,T,Z,RU,SML)
1418                                          =l=
1419                                                  n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1420                                                  ;
1421   
1422  #-------Mid-term storage-------------------------------------------------------#
1423   
1424  qcapdeqcapc(Y,Z,SM)..
1425                                          p_cap_d(Y,Z,SM)
1426                                          =e=
1427                                                  p_cap_c(Y,Z,SM)
1428                                                  ;
1429   
1430  #--Discharging logical constraints--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1431   
1432  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1433                                          n_d(Y,P,T+1,Z,SM)
1434                                          =e=
1435                                                  n_d(Y,P,T,Z,SM)
1436                                                  + n_d_su(Y,P,T,Z,SM)
1437                                                  - n_d_sd(Y,P,T,Z,SM)
1438                                                  ;
1439   
1440  qndmax(Y,P,T,Z,SM)..
1441                                          n_d(Y,P,T,Z,SM)
1442                                          =l=
1443                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1444                                                  ;
1445   
1446  qndsu(Y,P,T,Z,SM)..
1447                                          n_d_su(Y,P,T,Z,SM)
1448                                          + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1449                                          =l=
1450                                                  p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1451                                                  - n_d(Y,P,T,Z,SM)
1452                                                  ;
1453   
1454  qndsd(Y,P,T,Z,SM)..
1455                                          n_d_sd(Y,P,T,Z,SM)
1456                                          + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1457                                          =l=
1458                                                  n_d(Y,P,T,Z,SM)
1459                                                  ;
1460   
1461  #--Discharging constraints--#
1462   
1463  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1464                      p_d(Y,P,T+1,Z,SM)
1465                      =e=
1466                          p_d(Y,P,T,Z,SM)
1467                          + ramp_d_up(Y,P,T,Z,SM)
1468                          - ramp_d_dn(Y,P,T,Z,SM)
1469                          + ramp_d_su(Y,P,T,Z,SM)
1470                          - ramp_d_sd(Y,P,T,Z,SM)
1471                          ;
1472   
1473  qsmdmin(Y,P,T,Z,SM)..
1474                                          p_d(Y,P,T,Z,SM)
1475                                          =g=
1476                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1477                                                  ;
1478   
1479  qsmdmax(Y,P,T,Z,SM)..
1480                                          p_d(Y,P,T,Z,SM)
1481                                          =l=
1482                                                  n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1483                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1484   
1485  #--Discharging ramping constraints--#
1486   
1487  qdrudyn(Y,P,T,Z,SM)..
1488                      ramp_d_up(Y,P,T,Z,SM)
1489                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1490                      =l=
1491                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1492                          ;
1493   
1494  qdrucap(Y,P,T,Z,SM)..
1495                      ramp_d_up(Y,P,T,Z,SM)
1496                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1497                      =l=
1498                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1499                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1500                          ;
1501   
1502  qdrddyn(Y,P,T,Z,SM)..
1503                      ramp_d_dn(Y,P,T,Z,SM)
1504                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1505                      =l=
1506                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1507                          ;
1508   
1509  qdrdcap(Y,P,T,Z,SM)..
1510                      ramp_d_dn(Y,P,T,Z,SM)
1511                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1512                      =l=
1513                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1514                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1515                          ;
1516   
1517  qdsumin(Y,P,T,Z,SM)..
1518                                          ramp_d_su(Y,P,T,Z,SM)
1519                                          =g=
1520                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1521                                                  ;
1522   
1523  qdsumax(Y,P,T,Z,SM)..
1524                                          ramp_d_su(Y,P,T,Z,SM)
1525                                          =l=
1526                                                  n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1527                                                  ;
1528   
1529  qdsdmin(Y,P,T,Z,SM)..
1530                                          ramp_d_sd(Y,P,T,Z,SM)
1531                                          =g=
1532                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1533                                                  ;
1534   
1535  qdsdmax(Y,P,T,Z,SM)..
1536                                          ramp_d_sd(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1537                                          =l=
1538                                                  n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1539                                                  ;
1540   
1541  #--Reserve allocation constraints--#
1542   
1543  qdrufu(Y,P,T,Z,SM)..
1544                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1545                      =l=
1546                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1547                          ;
1548   
1549  qdruau(Y,P,T,Z,SM)..
1550                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1551                      =l=
1552                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1553                          ;
1554   
1555  qdrumus(Y,P,T,Z,SM)..
1556                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1557                      =l=
1558                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1559                          ;
1560   
1561  qdrdad(Y,P,T,Z,SM)..
1562                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1563                      =l=
1564                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1565                          ;
1566   
1567  qdrdmd(Y,P,T,Z,SM)..
1568                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1569                      =l=
1570                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1571                          ;
1572   
1573  qdrunsmin(Y,P,T,Z,RU,SM)..
1574                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1575                                          =g=
1576                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1577                                                  ;
1578   
1579  qdrunsmax(Y,P,T,Z,RU,SM)..
1580                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1581                                          =l=
1582                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1583                                                  ;
1584   
1585  qdrdsdmin(Y,P,T,Z,RD,SM)..
1586                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1587                                          =g=
1588                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1589                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1590   
1591  qdrdsdmax(Y,P,T,Z,RD,SM)..
1592                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1593                                          =l=
1594                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1595                                                  ;
1596   
1597  #-------Long-term storage------------------------------------------------------#
1598   
1599  #--Discharging reserve allocation--#
1600   
1601  qslressd(Y,P,T,Z,R,SL)..
1602                                          res_s_d(Y,P,T,Z,R,SL)
1603                                          =e=
1604                                                  0
1605                                                  ;
1606   
1607  #--Gas energy balance--#
1608   
1609  qgase(Y,P,C)..
1610                                          eg(Y,P++1,C)
1611                                          =e=
1612                                                  eg(Y,P,C)
1613                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1614                                                  ;
1615   
1616  qgasemax(Y,P,C)..
1617                                          eg(Y,P,C)
1618                                          =l=
1619                                                  E_LP
1620                                                  + eg_cap
1621                                                  ;
1622   
1623  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1624                                          eg_f(Y,P,T+1,C)
1625                                          =e=
1626                                                  eg_f(Y,P,T,C)
1627                                                  + pg_c(Y,P,T,C)
1628                                                  - pg_d(Y,P,T,C)
1629                                                  ;
1630   
1631  qgasefmax(Y,P,T,C)..
1632                                          eg_f(Y,P,T,C)
1633                                          =l=
1634                                                  E_LP
1635                                                  + eg_cap
1636                                                  ;
1637   
1638  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1639                                          eg_f(Y,P,T,C)
1640                                          =e=
1641                                                  eg(Y,P,C)
1642                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1643   
1644  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1645                                          eg_l(Y,P,T+1,C)
1646                                          =e=
1647                                                  eg_l(Y,P,T,C)
1648                                                  + pg_c(Y,P,T,C)
1649                                                  - pg_d(Y,P,T,C)
1650                                                  ;
1651   
1652  qgaselmax(Y,P,T,C)..
1653                                          eg_l(Y,P,T,C)
1654                                          =l=
1655                                                  E_LP
1656                                                  + eg_cap
1657                                                  ;
1658   
1659  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1660                                          eg_l(Y,P,T,C)
1661                                          =e=
1662                                                  eg(Y,P,C)
1663                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1664                                                  ;
1665   
1666  #--Gas charging constraints--#
1667   
1668  qgasc(Y,P,T,C)..
1669                                          pg_c(Y,P,T,C)
1670                                          =e=
1671                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1672                                                  + pg_import(Y,P,T,C)
1673                                                  ;
1674   
1675  #--Gas discharging constraints--#
1676   
1677  qgasd(Y,P,T,C)..
1678                                          pg_d(Y,P,T,C)
1679                                          =e=
1680                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1681                                                  ;
1682   
1683  #--Gas usage--#
1684   
1685  qgasuse(Y,C)..
1686                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1687                                          =l=
1688                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1689                                                  ;
1690   
1691  qgasusegen(Y,P,T,Z,GCG)..
1692                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1693                                          =e=
1694                                                  pg_syn(Y,P,T,Z,GCG)
1695                                                  + pg_fos(Y,P,T,Z,GCG)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1696                                                  ;
1697   
1698  ################################################
1699  ################################################
1700   
1701  demand(P,T,Z)..
1702                                          demand_unit(P,T,Z) =e= DEM_T(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_T(P,T,Z)/P_REF)*(price_unit(P,H,Z)-P_REF))
1703                                          ;
1704   
1705  demand_clone(P,H,Z)..
1706                                          demand_unit_clone(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*DIAG(T,H))
1707                                          ;
1708   
1709  totdemand(P,Z)..
1710                                          sum(T,DEM_T(P,T,Z)) =e= sum(T,demand_unit(P,T,Z))
1711                                          ;
1712   
1713  totdemand2(P,Z)..
1714                                          demand_tot(P,Z) =g= sum(T,demand_unit(P,T,Z))
1715  #                                       demand_tot(P,Z) =e= sum(T,DEM_T(P,T,Z))
1716                                          ;
1717   
1718  #price(P,H,Z)..
1719  #                                       (price_unit(P,H,Z) - P_REF)*sum(H,ELAST(T,H)*(DEM_T(P,T,Z)/P_REF)) =e= (demand_unit(P,T,Z)-DEM_T(P,T,Z))
1720  #                                       ;
1721   
1722  price_clone(P,T,Z)..
1723                                          price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1724                                          ;
1725   
1726  refdemand(P,T,Z)..
1727                                          demand_ref(P,T,Z) =e= DEM_T(P,T,Z)
1728                                          ;
1729   
1730  shiftedaway(P,H,Z)..
1731                                          shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1732                                          ;
1733   
1734  shiftedawaytotal(P,Z)..
1735                                          shiftaway_total(P,Z) =e= sum(H,shiftaway(P,H,Z))
1736                                          ;
1737   
1738  shiftedforward(P,H,Z)..
1739                                          shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1740                                          ;
1741   
1742  shiftedforwardtotal(P,Z)..
1743                                          shiftforwards_total(P,Z) =e= sum(H,shiftforwards(P,H,Z))
1744                                          ;
1745   
1746  shiftedbackward(P,H,Z)..
1747                                          shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_T(P,T,Z)*(price_unit(P,H,Z)-P_REF)/P_REF)
1748                                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1749   
1750  shiftedbackwardtotal(P,Z)..
1751                                          shiftbackwards_total(P,Z) =e= sum(H,shiftbackwards(P,H,Z))
1752                                          ;
1753   
1754  shiftconstraint(P,H,Z)..
1755                                          sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1756                                          ;
1757   
1758  shiftconstraint1(P,H,Z)..
1759                                          shiftaway(P,H,Z) =l= LIMITSHIFT
1760                                          ;
1761   
1762  shiftconstraint2(P,H,Z)..
1763                                          shiftaway(P,H,Z) =g= -LIMITSHIFT
1764                                          ;
1765   
1766  priceconstraint1(P,T,Z)..
1767                                          price_unit_clone(P,T,Z) =l= P_REF + LIMITPRICE
1768                                          ;
1769   
1770  priceconstraint2(P,T,Z)..
1771                                          price_unit_clone(P,T,Z) =g= P_REF - LIMITPRICE
1772                                          ;
1773   
1774  demlimitunder(P,T,Z)..
1775                                          DEM_T(P,T,Z) - LIMITDEM =l= demand_unit(P,T,Z)
1776                                          ;
1777   
1778  demlimitupper(P,T,Z)..
1779                                          DEM_T(P,T,Z) + LIMITDEM =g= demand_unit(P,T,Z)
1780                                          ;
1781   
1782   
1783  #priceconstraint3(P,Z)..
1784  #                                       sum(T,price_unit(P,T,Z))/card(T) =e= P_REF
1785  #                                       ;
1786   
1787   
1788  qinnerframe(P,H,Z)..
1789                                          innerframe(P,H,Z) =e= sum(T,DEM_T(P,T,Z)*SHIFTMIN(H,T))
1790                                          ;
1791   
1792  qouterframe(P,H,Z)..
1793                                          outerframe(P,H,Z) =e= sum(T,demand_unit(P,T,Z)*SHIFTMAX(H,T))
1794                                          ;
1795   
1796  fixedcost(Z)..
1797                                          totalfixedcost(Z) =e= sum((Y,G), (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
1798                                          ;
1799   
1800  variablecost(P,Z)..
1801                                          totalvariablecost(P,Z) =e= (sum((Y,T,G), W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1802                                          + sum((Y,T,GC), W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC)))*(168/card(T))
1803                                          ;
1804   
1805  cost(Z)..
1806                                          totalcost(Z) =e= sum(P,totalvariablecost(P,Z)) + totalfixedcost(Z)
1807                                          ;
1808   
1809   
1810  MODEL GOA GOA model /
1811   
1812  #-------Objective function-----------------------------------------------------#
1813                  qobj
1814   
1815  #-------System constraints-----------------------------------------------------#
1816                  qbalance
1817   
1818                  qresprod
1819                  qco2lim
1820   
1821                  qresendomin
1822                  qresendomax
1823                  qres
1824   
1825                  #qgendisp
1826                  #qgendisppeak
1827   
1828                  qco2
1829                  qlcg
1830   
1831  #-------Generation technologies------------------------------------------------#
1832                  qpotcapmin
1833  #               qpotcapmax
1834  #               qpotgenmin
1835  #               qpotgenmax
1836   
1837  #--Conventional generation technologies--#
1838                  qresgcu
1839                  qresgcd
1840   
1841                  qn
1842                  qnmax
1843                  qnsu
1844                  qnsd
1845   
1846                  qgen
1847                  qgenmin
1848                  qgenmax
1849   
1850                  qrudyn
1851                  qrucap
1852                  qrddyn
1853                  qrdcap
1854                  qsumin
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1855                  qsumax
1856                  qsdmin
1857                  qsdmax
1858   
1859                  qrufu
1860                  qruau
1861                  qrumus
1862                  qrdad
1863                  qrdmd
1864                  qrunsmin
1865                  qrunsmax
1866                  qrdsdmin
1867                  qrdsdmax
1868   
1869  #--Intermittent renewable generation technologies--#
1870                  qresgru
1871   
1872                  qgenr
1873   
1874                  qresgrdr
1875                  qresgrdg
1876   
1877  #-------Storage technologies---------------------------------------------------#
1878  #--General constraints--#
1879                  qress
1880                  qspotcapmin
1881                  qspotcapmax
1882   
1883                  qe
1884                  qemax
1885                  qef
1886                  qefmin
1887                  qefmax
1888                  qefstart
1889                  qel
1890                  qelmin
1891                  qelmax
1892                  qelstart
1893   
1894                  qdurmin
1895                  qdurmax
1896   
1897  #--Short-term storage--#
1898                  qssc
1899                  qsscru
1900                  qsscrd
1901   
1902                  qssd
1903                  qssdru
1904                  qssdrd
1905   
1906  #--Mid and long-term storage--#
1907                  qresscu
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1908                  qresscd
1909                  qressdu
1910                  qressdd
1911   
1912                  qnc
1913                  qncmax
1914                  qncsu
1915                  qncsd
1916   
1917                  qsmlc
1918                  qsmlcmin
1919                  qsmlcmax
1920   
1921                  qcrudyn
1922                  qcrucap
1923                  qcrddyn
1924                  qcrdcap
1925                  qcsumin
1926                  qcsumax
1927                  qcsdmin
1928                  qcsdmax
1929   
1930                  qcruad
1931                  qcrumd
1932                  qcrdfu
1933                  qcrdau
1934                  qcrdmus
1935                  qcrunsmin
1936                  qcrunsmax
1937                  qcrdsdmin
1938                  qcrdsdmax
1939   
1940  #--Mid-term storage--#
1941                  qcapdeqcapc
1942   
1943                  qnd
1944                  qndmax
1945                  qndsu
1946                  qndsd
1947   
1948                  qsmd
1949                  qsmdmin
1950                  qsmdmax
1951   
1952                  qdrudyn
1953                  qdrucap
1954                  qdrddyn
1955                  qdrdcap
1956                  qdsumin
1957                  qdsumax
1958                  qdsdmin
1959                  qdsdmax
1960   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1961                  qdrufu
1962                  qdruau
1963                  qdrumus
1964                  qdrdad
1965                  qdrdmd
1966                  qdrunsmin
1967                  qdrunsmax
1968                  qdrdsdmin
1969                  qdrdsdmax
1970   
1971  #--Long-term storage--#
1972                  qslressd
1973   
1974                  qgase
1975                  qgasemax
1976                  qgasef
1977                  qgasefmax
1978                  qgasefstart
1979                  qgasel
1980                  qgaselmax
1981                  qgaselstart
1982   
1983                  qgasc
1984   
1985                  qgasd
1986   
1987                  qgasuse
1988                  qgasusegen
1989   
1990  #-- Price-elasticity--#
1991   
1992  #               price
1993                  price_clone
1994                  demand
1995                  demand_clone
1996                  totdemand
1997                  totdemand2
1998                  refdemand
1999   
2000                  shiftedaway
2001                  shiftedforward
2002                  shiftedbackward
2003   
2004                  shiftedawaytotal
2005                  shiftedforwardtotal
2006                  shiftedbackwardtotal
2007   
2008                  priceconstraint1
2009                  priceconstraint2
2010  #               priceconstraint3
2011                  shiftconstraint
2012                  shiftconstraint1
2013                  shiftconstraint2
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2014   
2015                  qinnerframe
2016                  qouterframe
2017   
2018  #               revenue
2019                  fixedcost
2020                  variablecost
2021                  cost
2022   
2023                  demlimitunder
2024                  demlimitupper
2025  /;
2026   
2027   
2028   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 41
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.015 SECONDS      4 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                04/20/16 21:45:49 Page 42
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.gms
Output     C:\Users\Wout\Documents\GitHub\thesis\Model2\run\../gams/LinearModel_Wout.lst
Save       C:\Users\Wout\Documents\GitHub\thesis\Model2\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
